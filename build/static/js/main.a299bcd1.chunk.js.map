{"version":3,"sources":["azure-storage-blob.ts","authConfig.js","components/SignInButton.jsx","components/SignOutButton.jsx","components/PageLayout.jsx","components/ProfileData.jsx","graph.js","App.tsx","serviceWorker.ts","index.tsx"],"names":["containerName","process","sasToken","getBlobsInContainer","containerClient","returnedBlobUrls","listBlobsFlat","blob","push","name","createBlobInContainer","file","blobClient","getBlockBlobClient","options","blobHTTPHeaders","blobContentType","type","uploadBrowserData","uploadFileToBlob","blobService","BlobServiceClient","getContainerClient","createIfNotExists","access","msalConfig","auth","clientId","authority","redirectUri","cache","cacheLocation","storeAuthStateInCookie","loginRequest","scopes","graphConfig","SignInButton","instance","useMsal","Button","variant","className","onClick","loginPopup","catch","e","console","log","SignOutButton","logoutPopup","postLogoutRedirectUri","mainWindowRedirectUri","PageLayout","props","isAuthenticated","useIsAuthenticated","Navbar","bg","href","children","ProfileData","id","graphData","givenName","surname","userPrincipalName","callMsGraph","accessToken","headers","Headers","bearer","append","method","fetch","then","response","json","error","ProfileContent","accounts","useState","setGraphData","request","account","acquireTokenSilent","acquireTokenPopup","App","blobList","setBlobList","fileSelected","setFileSelected","uploading","setUploading","Math","random","toString","inputKey","setInputKey","onFileChange","event","target","files","onFileUpload","blobsInContainer","onChange","key","length","map","item","Path","basename","src","alt","height","Boolean","window","location","hostname","match","msalInstance","PublicClientApplication","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.a299bcd1.chunk.js","sourcesContent":["// ./src/azure-storage-blob.ts\r\n\r\n// <snippet_package>\r\n// THIS IS SAMPLE CODE ONLY - NOT MEANT FOR PRODUCTION USE\r\nimport { BlobServiceClient, ContainerClient} from '@azure/storage-blob';\r\n\r\n// THIS IS SAMPLE CODE ONLY - DON'T STORE TOKEN IN PRODUCTION CODE\r\nconst containerName = `${process.env.REACT_APP_CONTAINER_NAME}`; //\"`tutorial-container`\";\r\nconst sasToken = process.env.REACT_APP_SAS_TOKEN; // || \"sv=2021-06-08&ss=bfqt&srt=sco&sp=rwdlacupiytfx&se=2022-12-28T22:53:41Z&st=2022-12-28T14:53:41Z&spr=https&sig=6clc0kWfhel%2FZxOA%2FAkN2zuVmldyCzD2l3grmcr93Bg%3D\"; // Fill string with your SAS token\r\nconst storageAccountName = process.env.REACT_APP_STORAGE_ACCOUNT_NAME; // || \"reactuploadtest\";  Fill string with your Storage resource name\r\n// </snippet_package>\r\n\r\n// <snippet_isStorageConfigured>\r\n// Feature flag - disable storage feature to app if not configured\r\nexport const isStorageConfigured = () => {\r\n  return (!storageAccountName || !sasToken) ? false : true;\r\n}\r\n// </snippet_isStorageConfigured>\r\n\r\n// <snippet_getBlobsInContainer>\r\n// return list of blobs in container to display\r\nconst getBlobsInContainer = async (containerClient: ContainerClient) => {\r\n  const returnedBlobUrls: string[] = [];\r\n\r\n  // get list of blobs in container\r\n  // eslint-disable-next-line\r\n  for await (const blob of containerClient.listBlobsFlat()) {\r\n    // if image is public, just construct URL\r\n    returnedBlobUrls.push(\r\n      `https://${storageAccountName}.blob.core.windows.net/${containerName}/${blob.name}`\r\n    );\r\n  }\r\n\r\n  return returnedBlobUrls;\r\n}\r\n// </snippet_getBlobsInContainer>\r\n\r\n// <snippet_createBlobInContainer>\r\nconst createBlobInContainer = async (containerClient: ContainerClient, file: File) => {\r\n  \r\n  // create blobClient for container\r\n  const blobClient = containerClient.getBlockBlobClient(file.name);\r\n\r\n  // set mimetype as determined from browser with file upload control\r\n  const options = { blobHTTPHeaders: { blobContentType: file.type } };\r\n\r\n  // upload file\r\n  await blobClient.uploadBrowserData(file, options);\r\n}\r\n// </snippet_createBlobInContainer>\r\n\r\n// <snippet_uploadFileToBlob>\r\nconst uploadFileToBlob = async (file: File | null): Promise<string[]> => {\r\n  if (!file) return [];\r\n\r\n  // get BlobService = notice `?` is pulled out of sasToken - if created in Azure portal\r\n  const blobService = new BlobServiceClient(\r\n    `https://${storageAccountName}.blob.core.windows.net/?${sasToken}`\r\n  );\r\n\r\n  // get Container - full public read access\r\n  const containerClient: ContainerClient = blobService.getContainerClient(containerName);\r\n  await containerClient.createIfNotExists({\r\n    access: 'container',\r\n  });\r\n\r\n  // upload file\r\n  await createBlobInContainer(containerClient, file);\r\n\r\n  // get list of blobs in container\r\n  return getBlobsInContainer(containerClient);\r\n};\r\n// </snippet_uploadFileToBlob>\r\n\r\nexport default uploadFileToBlob;\r\n\r\n","export const msalConfig = {\n    auth: {\n      clientId: `${process.env.REACT_APP_CLIENT_ID}`, //\"c6794e02-3287-4053-979a-5c45704db40b\",\n      authority: `${process.env.REACT_APP_TENANT_ID}`, // This is a URL (e.g. https://login.microsoftonline.com/{your tenant ID}) \n      redirectUri: `${process.env.REACT_APP_REDIRECT_URI}`,\n    },\n    cache: {\n      cacheLocation: \"sessionStorage\", // This configures where your cache will be stored\n      storeAuthStateInCookie: false, // Set this to \"true\" if you are having issues on IE11 or Edge\n    }\n  };\n  \n  // Add scopes here for ID token to be used at Microsoft identity platform endpoints.\n  export const loginRequest = {\n   scopes: [\"User.Read\"]\n  };\n  \n  // Add the endpoints here for Microsoft Graph API services you'd like to use.\n  export const graphConfig = {\n      graphMeEndpoint: \"https://graph.microsoft.com/v1.0\"\n  };","import React from \"react\";\nimport { useMsal } from \"@azure/msal-react\";\nimport { loginRequest } from \"../authConfig\";\nimport Button from \"react-bootstrap/Button\";\n\n\n/**\n * Renders a button which, when selected, will open a popup for login\n */\nexport const SignInButton = () => {\n    const { instance } = useMsal();\n\n    const handleLogin = (loginType) => {\n        if (loginType === \"popup\") {\n            instance.loginPopup(loginRequest).catch(e => {\n                console.log(e);\n            });\n        }\n    }\n    return (\n        <Button variant=\"secondary\" className=\"ml-auto\" onClick={() => handleLogin(\"popup\")}>Sign in using Popup</Button>\n    );\n}","import React from \"react\";\nimport { useMsal } from \"@azure/msal-react\";\nimport Button from \"react-bootstrap/Button\";\n\n/**\n * Renders a button which, when selected, will open a popup for logout\n */\nexport const SignOutButton = () => {\n    const { instance } = useMsal();\n\n    const handleLogout = (logoutType) => {\n        if (logoutType === \"popup\") {\n            instance.logoutPopup({\n                postLogoutRedirectUri: \"/\",\n                mainWindowRedirectUri: \"/\" // redirects the top level app after logout\n            });\n        }\n    }\n\n    return (\n        <Button variant=\"secondary\" className=\"ml-auto\" onClick={() => handleLogout(\"popup\")}>Sign out using Popup</Button>\n    );\n}","import React from \"react\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport { useIsAuthenticated } from \"@azure/msal-react\";\nimport { SignInButton } from \"./SignInButton\";\nimport { SignOutButton } from \"./SignOutButton\";\n\n/**\n * Renders the navbar component with a sign-in button if a user is not authenticated\n */\nexport const PageLayout = (props) => {\n    const isAuthenticated = useIsAuthenticated();\n\n    return (\n        <>\n            <Navbar bg=\"primary\" variant=\"dark\">\n                <a className=\"navbar-brand\" href=\"/\">Test Application</a>\n                { isAuthenticated ? <SignOutButton /> : <SignInButton /> }\n            </Navbar>\n            <h5><center>Welcome to the Test Application Authentication</center></h5>\n            <br />\n            <br />\n            {props.children}\n        </>\n    );\n};\n\n// import React from \"react\";\n// import Navbar from \"react-bootstrap/Navbar\";\n// import { useIsAuthenticated } from \"@azure/msal-react\";\n// import { SignInButton } from \"./SignInButton\";\n\n// /**\n//  * Renders the navbar component with a sign-in button if a user is not authenticated\n//  */\n// export const PageLayout = (props) => {\n//     const isAuthenticated = useIsAuthenticated();\n\n//     return (\n//         <>\n//             <Navbar bg=\"primary\" variant=\"dark\">\n//                 <a className=\"navbar-brand\" href=\"/\">Test Application</a>\n//                 { isAuthenticated ? <span>Signed In</span> : <SignInButton /> }\n//             </Navbar>\n//             <h5><center>Welcome to the Test Application Authentication</center></h5>\n//             <br />\n//             <br />\n//             {props.children}\n//         </>\n//     );\n// };","import React from \"react\";\n\n/**\n * Renders information about the user obtained from Microsoft Graph\n */\nexport const ProfileData = (props) => {\n    return (\n        <div id=\"profile-div\">\n            <p><strong>First Name: </strong> {props.graphData.givenName}</p>\n            <p><strong>Last Name: </strong> {props.graphData.surname}</p>\n            <p><strong>Email: </strong> {props.graphData.userPrincipalName}</p>\n            <p><strong>Id: </strong> {props.graphData.id}</p>\n        </div>\n    );\n};","import { graphConfig } from \"./authConfig\";\n\n/**\n * Attaches a given access token to a Microsoft Graph API call. Returns information about the user\n */\nexport async function callMsGraph(accessToken) {\n    const headers = new Headers();\n    const bearer = `Bearer ${accessToken}`;\n\n    headers.append(\"Authorization\", bearer);\n\n    const options = {\n        method: \"GET\",\n        headers: headers\n    };\n\n    return fetch(graphConfig.graphMeEndpoint, options)\n        .then(response => response.json())\n        .catch(error => console.log(error));\n}","// ./src/App.tsx\r\n\r\nimport React, { useState } from 'react';\r\nimport Path from 'path';\r\nimport uploadFileToBlob, { isStorageConfigured } from './azure-storage-blob';\r\n\r\n// import React from \"react\";\r\nimport { PageLayout } from \"./components/PageLayout\";\r\n// Addition\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport { AuthenticatedTemplate, UnauthenticatedTemplate, useMsal } from \"@azure/msal-react\";\r\nimport { loginRequest } from \"./authConfig\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { ProfileData } from \"./components/ProfileData\";\r\nimport { callMsGraph } from \"./graph\";\r\n// End addition\r\n\r\nfunction ProfileContent() {\r\n  const { instance, accounts } = useMsal();\r\n  const [graphData, setGraphData] = useState(null);\r\n\r\n  const name = accounts[0] && accounts[0].name;\r\n\r\n  function RequestProfileData() {\r\n      const request = {\r\n          ...loginRequest,\r\n          account: accounts[0]\r\n      };\r\n\r\n      // Silently acquires an access token which is then attached to a request for Microsoft Graph data\r\n      instance.acquireTokenSilent(request).then((response) => {\r\n          callMsGraph(response.accessToken).then(response => setGraphData(response));\r\n      }).catch((e) => {\r\n          instance.acquireTokenPopup(request).then((response) => {\r\n              callMsGraph(response.accessToken).then(response => setGraphData(response));\r\n          });\r\n      });\r\n  }\r\n\r\n  return (\r\n      <>\r\n          <h5 className=\"card-title\">Welcome {name}</h5>\r\n          {graphData ? \r\n              <ProfileData graphData={graphData} />\r\n              :\r\n              <Button variant=\"secondary\" onClick={RequestProfileData}>Request Profile Information</Button>\r\n          }\r\n      </>\r\n  );\r\n};\r\n\r\n// Previous storage code\r\nconst storageConfigured = isStorageConfigured();\r\n\r\nconst App = (): JSX.Element => {\r\n  // all blobs in container\r\n  const [blobList, setBlobList] = useState<string[]>([]);\r\n\r\n  // current file to upload into container\r\n  const [fileSelected, setFileSelected] = useState(null);\r\n\r\n  // UI/form management\r\n  const [uploading, setUploading] = useState(false);\r\n  const [inputKey, setInputKey] = useState(Math.random().toString(36));\r\n\r\n  const onFileChange = (event: any) => {\r\n    // capture file into state\r\n    setFileSelected(event.target.files[0]);\r\n  };\r\n\r\n  const onFileUpload = async () => {\r\n    // prepare UI\r\n    setUploading(true);\r\n\r\n    // *** UPLOAD TO AZURE STORAGE ***\r\n    const blobsInContainer: string[] = await uploadFileToBlob(fileSelected);\r\n\r\n    // prepare UI for results\r\n    setBlobList(blobsInContainer);\r\n\r\n    // reset state/form\r\n    setFileSelected(null);\r\n    setUploading(false);\r\n    setInputKey(Math.random().toString(36));\r\n  };\r\n\r\n  // display form\r\n  const DisplayForm = () => (\r\n    <div>\r\n      <input type=\"file\" onChange={onFileChange} key={inputKey || ''} />\r\n      <button type=\"submit\" onClick={onFileUpload}>\r\n        Upload!\r\n          </button>\r\n    </div>\r\n  )\r\n\r\n  // display file name and image\r\n  const DisplayImagesFromContainer = () => (\r\n    <div>\r\n      <h2>Container items</h2>\r\n      <ul>\r\n        {blobList.map((item) => {\r\n          return (\r\n            <li key={item}>\r\n              <div>\r\n                {Path.basename(item)}\r\n                <br />\r\n                <img src={item} alt={item} height=\"200\" />\r\n              </div>\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    </div>\r\n  );\r\n\r\n//End previous storage code\r\n\r\n\r\n// function App() {\r\n  return (\r\n      <PageLayout>\r\n           <AuthenticatedTemplate>\r\n              <ProfileContent />\r\n                <div>\r\n                  <h1>Upload file to Azure Blob Storage</h1>\r\n                  {storageConfigured && !uploading && DisplayForm()}\r\n                  {storageConfigured && uploading && <div>Uploading</div>}\r\n                  <hr />\r\n                  {storageConfigured && blobList.length > 0 && DisplayImagesFromContainer()}\r\n                  {!storageConfigured && <div>Storage is not configured.</div>}\r\n                </div>\r\n              \r\n            </AuthenticatedTemplate>\r\n\r\n            <UnauthenticatedTemplate>\r\n                <p>You are not signed in! Please take a moment to sign in above.</p>\r\n            </UnauthenticatedTemplate>\r\n      </PageLayout>\r\n  );\r\n// }\r\n};\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n/* eslint-disable */\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n// Additions\r\n// import \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { PublicClientApplication } from \"@azure/msal-browser\";\r\nimport { MsalProvider } from \"@azure/msal-react\";\r\nimport { msalConfig } from \"./authConfig\";\r\n\r\n// Addition\r\nconst msalInstance = new PublicClientApplication(msalConfig);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <MsalProvider instance={msalInstance}>\r\n            <App />\r\n        </MsalProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
{"version":3,"sources":["azure-storage-blob.ts","authConfig.js","components/SignInButton.jsx","components/SignOutButton.jsx","Geo_logo.png","login.png","upload.png","confirmation.png","result.png","components/PageLayout.jsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["containerName","process","sasToken","storageAccountName","getBlobsInContainer","containerClient","returnedBlobUrls","listBlobsFlat","blob","push","name","createBlobInContainer","file","console","log","blobClient","getBlockBlobClient","options","blobHTTPHeaders","blobContentType","type","uploadData","uploadFileToBlob","blobService","BlobServiceClient","getContainerClient","createIfNotExists","access","msalConfig","auth","clientId","authority","redirectUri","cache","cacheLocation","storeAuthStateInCookie","loginRequest","scopes","SignInButton","instance","useMsal","onClick","loginPopup","catch","e","SignOutButton","logoutPopup","postLogoutRedirectUri","mainWindowRedirectUri","Header","props","isAuthenticated","useIsAuthenticated","className","role","href","src","Logo","alt","id","icon","faUser","color","style","backgroundColor","Main","hasUploaded","children","Image","marginTop","Instruction","contentStyle","background","contentArrowStyle","borderRight","iconStyle","fa1","Login","fa2","Upload","fa3","Confirmation","fa4","Result","PageLayout","App","useState","blobList","setBlobList","fileSelected","setFileSelected","accounts","uploading","setUploading","Math","random","toString","inputKey","setInputKey","onFileChange","incommingFiles","onFileUpload","blobsInContainer","removeFile","filter","x","dropzoneStyle","UploadArea","onChange","value","accept","label","maxFiles","maxFileSize","length","map","onDelete","key","info","Boolean","window","location","hostname","match","msalInstance","PublicClientApplication","root","ReactDOM","createRoot","document","getElementById","render","navigator","serviceWorker","ready","then","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.58ddd4be.chunk.js","sourcesContent":["// ./src/azure-storage-blob.ts\r\n\r\n// <snippet_package>\r\n// THIS IS SAMPLE CODE ONLY - NOT MEANT FOR PRODUCTION USE\r\nimport { BlobServiceClient, ContainerClient} from '@azure/storage-blob';\r\n\r\n// THIS IS SAMPLE CODE ONLY - DON'T STORE TOKEN IN PRODUCTION CODE\r\nconst containerName = `${process.env.REACT_APP_CONTAINER_NAME}`; //\"`tutorial-container`\";\r\nconst sasToken = process.env.REACT_APP_SAS_TOKEN; // || \"sv=2021-06-08&ss=bfqt&srt=sco&sp=rwdlacupiytfx&se=2022-12-28T22:53:41Z&st=2022-12-28T14:53:41Z&spr=https&sig=6clc0kWfhel%2FZxOA%2FAkN2zuVmldyCzD2l3grmcr93Bg%3D\"; // Fill string with your SAS token\r\nconst storageAccountName = process.env.REACT_APP_STORAGE_ACCOUNT_NAME; // || \"reactuploadtest\";  Fill string with your Storage resource name\r\n// </snippet_package>\r\n\r\n// <snippet_isStorageConfigured>\r\n// Feature flag - disable storage feature to app if not configured\r\nexport const isStorageConfigured = () => {\r\n  return (!storageAccountName || !sasToken) ? false : true;\r\n}\r\n// </snippet_isStorageConfigured>\r\n\r\n// <snippet_getBlobsInContainer>\r\n// return list of blobs in container to display\r\nconst getBlobsInContainer = async (containerClient: ContainerClient) => {\r\n  const returnedBlobUrls: string[] = [];\r\n\r\n  // get list of blobs in container\r\n  // eslint-disable-next-line\r\n  for await (const blob of containerClient.listBlobsFlat()) {\r\n    // if image is public, just construct URL\r\n    returnedBlobUrls.push(\r\n      `https://${storageAccountName}.blob.core.windows.net/${containerName}/${blob.name}`\r\n    );\r\n  }\r\n\r\n  return returnedBlobUrls;\r\n}\r\n// </snippet_getBlobsInContainer>\r\n\r\n// <snippet_createBlobInContainer>\r\nconst createBlobInContainer = async (containerClient: ContainerClient, file: File) => {\r\n  console.log(\"ok 1\")\r\n  console.log(file)\r\n  console.log(containerClient)\r\n  // create blobClient for container\r\n  const blobClient = containerClient.getBlockBlobClient(file.name);\r\n  console.log(\"ok 2\")\r\n  console.log(blobClient)\r\n\r\n  // set mimetype as determined from browser with file upload control\r\n  const options = { blobHTTPHeaders: { blobContentType: file.type } };\r\n\r\n  // upload file\r\n  await blobClient.uploadData(file, options);\r\n}\r\n// </snippet_createBlobInContainer>\r\n\r\n// <snippet_uploadFileToBlob>\r\nconst uploadFileToBlob = async (file: File | null): Promise<string[]> => {\r\n  if (!file) return [];\r\n\r\n  // get BlobService = notice `?` is pulled out of sasToken - if created in Azure portal\r\n  const blobService = new BlobServiceClient(\r\n    `https://${storageAccountName}.blob.core.windows.net/?${sasToken}`\r\n  );\r\n\r\n  // get Container - full public read access\r\n  const containerClient: ContainerClient = blobService.getContainerClient(containerName);\r\n  await containerClient.createIfNotExists({\r\n    access: 'container',\r\n  });\r\n\r\n  // upload file\r\n  await createBlobInContainer(containerClient, file);\r\n\r\n  // get list of blobs in container\r\n  return getBlobsInContainer(containerClient);\r\n};\r\n// </snippet_uploadFileToBlob>\r\n\r\nexport default uploadFileToBlob;\r\n\r\n","export const msalConfig = {\n    auth: {\n      clientId: `${process.env.REACT_APP_CLIENT_ID}`, //\"c6794e02-3287-4053-979a-5c45704db40b\",\n      authority: `${process.env.REACT_APP_TENANT_ID}`, // This is a URL (e.g. https://login.microsoftonline.com/{your tenant ID}) \n      redirectUri: `${process.env.REACT_APP_REDIRECT_URI}`,\n    },\n    cache: {\n      cacheLocation: \"sessionStorage\", // This configures where your cache will be stored\n      storeAuthStateInCookie: false, // Set this to \"true\" if you are having issues on IE11 or Edge\n    }\n  };\n  \n  // Add scopes here for ID token to be used at Microsoft identity platform endpoints.\n  export const loginRequest = {\n   scopes: [\"User.Read\"]\n  };\n  \n  // Add the endpoints here for Microsoft Graph API services you'd like to use.\n  export const graphConfig = {\n      graphMeEndpoint: \"https://graph.microsoft.com/v1.0\"\n  };","import { useMsal } from \"@azure/msal-react\";\nimport { loginRequest } from \"../authConfig\";\n\n\n/**\n * Renders a button which, when selected, will open a popup for login\n */\nexport const SignInButton = () => {\n    const { instance } = useMsal();\n\n    const handleLogin = (loginType) => {\n        if (loginType === \"popup\") {\n            console.log(\"count login\");\n            instance.loginPopup(loginRequest).catch(e => {\n                console.log(e);\n            });\n        }\n    }\n    return (\n        /*<MicrosoftLogin className=\"logout\" clientId={process.env.REACT_APP_CLIENT_ID} authCallback={() => handleLogin(\"popup\")} />*/\n        <div onClick={() => handleLogin(\"popup\")}>Sign in</div>\n    );\n}","import { useMsal } from \"@azure/msal-react\";\nimport 'bulma/css/bulma.min.css';\n\n/**\n * Renders a button which, when selected, will open a popup for logout\n */\nexport const SignOutButton = () => {\n    const { instance } = useMsal();\n\n    const handleLogout = (logoutType) => {\n        if (logoutType === \"popup\") {\n            instance.logoutPopup({\n                postLogoutRedirectUri: \"/geolocator\",\n                mainWindowRedirectUri: \"/geolocator\" // redirects the top level app after logout\n            });\n        }\n    }\n\n    return (\n        <div  onClick={() => handleLogout(\"popup\")}>Sign out</div>\n    );\n\n}","export default __webpack_public_path__ + \"static/media/Geo_logo.1b1c8db5.png\";","export default __webpack_public_path__ + \"static/media/login.18734caf.png\";","export default __webpack_public_path__ + \"static/media/upload.1f8d18b0.png\";","export default __webpack_public_path__ + \"static/media/confirmation.20388572.png\";","export default __webpack_public_path__ + \"static/media/result.9c5c2108.png\";","import { UnauthenticatedTemplate, useIsAuthenticated } from \"@azure/msal-react\";\nimport { SignInButton } from \"./SignInButton\";\nimport { SignOutButton } from \"./SignOutButton\";\nimport \"../App.css\";\nimport 'bulma/css/bulma.css';\nimport Logo from \"../Geo_logo.png\";\nimport Login from \"../login.png\";\nimport Upload from \"../upload.png\";\nimport Confirmation from \"../confirmation.png\";\nimport Result from \"../result.png\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUser } from '@fortawesome/free-solid-svg-icons';\nimport { fa1 } from '@fortawesome/free-solid-svg-icons';\nimport { fa2 } from '@fortawesome/free-solid-svg-icons';\nimport { fa3 } from '@fortawesome/free-solid-svg-icons';\nimport { fa4 } from '@fortawesome/free-solid-svg-icons';\nimport { AuthenticatedTemplate } from \"@azure/msal-react\";\nimport { VerticalTimeline, VerticalTimelineElement } from 'react-vertical-timeline-component';\nimport 'react-vertical-timeline-component/style.min.css';\n\n/**\n * Renders the navbar component with a sign-in button if a user is not authenticated\n */\n\n\nconst Header = (props) => {\n    const isAuthenticated = useIsAuthenticated();\n    return (\n        <div>\n            <nav className=\"navbar\" role=\"navigation\" aria-label=\"main navigation\">\n                <div className=\"navbar-brand\">\n                    <a className=\"navbar-item\" href=\"https://de-data-lab.github.io/geolocator/\">\n                        <img src={Logo}  alt=\"\" />\n                    </a>\n\n                    <a role=\"button\" href=\"https://de-data-lab.github.io/geolocator/\" className=\"navbar-burger\" aria-label=\"menu\" aria-expanded=\"false\" data-target=\"navbarBasicExample\">\n                        <span aria-hidden=\"true\"></span>\n                        <span aria-hidden=\"true\"></span>\n                        <span aria-hidden=\"true\"></span>\n                    </a>\n                </div>\n\n                <div id=\"navbarBasicExample\" className=\"navbar-menu\">\n                    <div className=\"navbar-start\">\n                        <a className=\"navbar-item is-hoverable\" href=\"https://de-data-lab.github.io/geolocator/\">\n                            Home\n                        </a>\n\n                        <a className=\"navbar-item is-hoverable\" href=\"https://de-data-lab.github.io/geolocator/\">\n                            Documentation\n                        </a>\n\n                        <div className=\"navbar-item has-dropdown is-hoverable\">\n                            <a className=\"navbar-link\" href=\"https://de-data-lab.github.io/geolocator/\">\n                                More\n                            </a>\n\n                            <div className=\"navbar-dropdown\">\n                                <a className=\"navbar-item\" href=\"https://de-data-lab.github.io/geolocator/\">\n                                    About\n                                </a>\n                                <a className=\"navbar-item\" href=\"https://de-data-lab.github.io/geolocator/\">\n                                    Contact\n                                </a>\n                                <a className=\"navbar-item\" href=\"https://de-data-lab.github.io/geolocator/\">\n                                    Report an issue\n                                </a>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div className=\"navbar-end\">\n                        <div className=\"navbar-item\">\n                            <div className=\"buttons\">\n                                {isAuthenticated ?\n                                    <button className=\"button\">\n                                        <span className=\"icon\">\n                                            <FontAwesomeIcon icon={faUser} color=\"#0057B8\" />\n                                        </span>\n                                        <span>{props.name}</span>\n                                    </button>\n                                    :\n                                    <div className=\"button is-primary\" style={{backgroundColor: \"#0057B8\"}}>\n                                        <strong>Sign up</strong>\n                                    </div>}\n\n                                <div className=\"button is-light\">\n                                    {isAuthenticated ? <SignOutButton /> : <SignInButton />}\n                                </div>\n\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </nav>\n        </div>\n    )\n}\n\nconst Main = (props) => {\n    return (\n        <div className=\"section\">\n            <div className=\"columns\">\n\n\n\n                <main className=\"column\">\n                    <div className=\"level\">\n                        <div className=\"level-left\">\n                            <div className=\"level-item\">\n                                <div className=\"title\">{props.hasUploaded ? \"You file has been uploaded successfully.\" : \"You can upload a file now.\"}</div>\n                            </div>\n                        </div>\n                        <div className=\"level-right\">\n                            <div className=\"level-item\">\n                                <button type=\"button\" className=\"button is-small\">\n                                    Beta version\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div className=\"columns is-multiline\">\n                        <div className=\"column\">\n                            <div className=\"b\">\n                                {props.children}\n                            </div>\n                        </div>\n\n\n\n\n                    </div>\n\n\n                </main>\n            </div>\n        </div>\n    )\n}\n\nconst Image = (props) => {\n    return (\n        <img src={props.src} style={{marginTop: \"30px\"}} />\n    )\n}\n\nconst Instruction = () => {\n    return (\n        <div className=\"section\">\n            <VerticalTimeline>\n                <VerticalTimelineElement\n                    className=\"vertical-timeline-element--work\"\n                    contentStyle={{ background: '#0057B8', color: '#fff' }}\n                    contentArrowStyle={{ borderRight: '7px solid  #0057B8' }}\n                    iconStyle={{ background: '#0057B8', color: '#fff' }}\n                    icon={<FontAwesomeIcon icon={fa1} />}\n                >\n                    <h3 className=\"vertical-timeline-element-title\">LOGIN</h3>\n                    <h4 className=\"vertical-timeline-element-subtitle\"></h4>\n                    <p>\n                        Login with your email.\n                    </p>\n                    <Image src={Login} />\n                </VerticalTimelineElement>\n                <VerticalTimelineElement\n                    className=\"vertical-timeline-element--work\"\n                    contentStyle={{ background: '#0057B8', color: '#fff' }}\n                    contentArrowStyle={{ borderRight: '7px solid  #0057B8' }}\n                    iconStyle={{ background: '#0057B8', color: '#fff' }}\n                    icon={<FontAwesomeIcon icon={fa2} />}\n                >\n                    <h3 className=\"vertical-timeline-element-title\">UPLOAD</h3>\n                    <h4 className=\"vertical-timeline-element-subtitle\"></h4>\n                    <p>\n                        Upload a \".csv\", \".xls\", or \".xlsx\" file where the first line is a name like \"addresses\" and the other lines are addresses.\n                    </p>\n                    <Image src={Upload} />\n                </VerticalTimelineElement>\n                <VerticalTimelineElement\n                    className=\"vertical-timeline-element--work\"\n                    contentStyle={{ background: '#0057B8', color: '#fff' }}\n                    contentArrowStyle={{ borderRight: '7px solid  #0057B8' }}\n                    iconStyle={{ background: '#0057B8', color: '#fff' }}\n                    icon={<FontAwesomeIcon icon={fa3} />}\n                >\n                    <h3 className=\"vertical-timeline-element-title\">CONFIRMATION</h3>\n                    <h4 className=\"vertical-timeline-element-subtitle\"></h4>\n                    <p>\n                        You will receive email confirmation that your file has been received and is being processed. \n                    </p>\n                    <Image src={Confirmation} />\n                </VerticalTimelineElement>\n                <VerticalTimelineElement\n                    className=\"vertical-timeline-element--work\"\n                    contentStyle={{ background: '#0057B8', color: '#fff' }}\n                    contentArrowStyle={{ borderRight: '7px solid  #0057B8' }}\n                    iconStyle={{ background: '#0057B8', color: '#fff' }}\n                    icon={<FontAwesomeIcon icon={fa4} />}\n                >\n                    <h3 className=\"vertical-timeline-element-title\">RESULT</h3>\n                    <h4 className=\"vertical-timeline-element-subtitle\"></h4>\n                    <p>\n                        The geolocated addresses will be emailed to you as a \".zip\" file when they are ready. \n                    </p>\n                    <Image src={Result} />\n                </VerticalTimelineElement>\n                \n            </VerticalTimeline>\n\n        </div>\n    )\n}\n\n\nexport const PageLayout = (props) => {\n\n    return (\n        <>\n            <Header {...props} />\n            <AuthenticatedTemplate>\n                <Main {...props} />\n            </AuthenticatedTemplate>\n            <UnauthenticatedTemplate>\n                <Instruction />\n            </UnauthenticatedTemplate>\n\n        </>\n    );\n};\n\n\n/*******\n \n<div className=\"columns\">\n                <main className=\"column\">\n                    <div className=\"level\">\n                        <div className=\"level-left\">\n                            <div className=\"level-item\">\n                                <div className=\"title\">Instruction</div>\n                            </div>\n                        </div>\n                        <div className=\"level-right\">\n                            <div className=\"level-item\">\n                                <button type=\"button\" className=\"button is-small\">\n                                    Beta version \n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"columns is-multiline\">\n                        <div className=\"column\">\n                            <div className=\"b\">\n                                1. Login with your email. \n                            </div>\n                            <div className=\"b\">\n                                2. Upload a \".csv\", \".xls\", or \".xlsx\" file where the first line is a name like \"addresses\" and the other lines are addresses.\n                            </div>\n                            <div className=\"b\">\n                                3. You will receive email confirmation that your file has been received and is being processed. \n                            </div>\n                            <div className=\"b\">\n                                4. The geolocated addresses will be emailed to you as a \".zip\" file when they are ready. \n                            </div>\n                        </div>\n                    </div>\n                </main>\n            </div>\n\n\n\n\n\n\n */","// ./src/App.tsx\r\n\r\nimport \"./App.css\";\r\nimport { useState } from 'react';\r\nimport uploadFileToBlob, { isStorageConfigured } from './azure-storage-blob';\r\nimport { Dropzone, FileItem } from \"@dropzone-ui/react\";\r\n\r\n// import React from \"react\";\r\nimport { PageLayout } from \"./components/PageLayout\";\r\n// Addition\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport { AuthenticatedTemplate, UnauthenticatedTemplate, useMsal } from \"@azure/msal-react\";\r\n\r\n// End addition\r\n\r\n\r\n// Previous storage code\r\nconst storageConfigured = isStorageConfigured();\r\n\r\nconst App = (): JSX.Element => {\r\n\t// all blobs in container\r\n\tconst [blobList, setBlobList] = useState<string[]>([]);\r\n\r\n\t// current file to upload into container\r\n\tconst [fileSelected, setFileSelected] = useState<any[]>([]);\r\n\r\n\tconst { instance, accounts } = useMsal();\r\n\tconst name = accounts[0] && accounts[0].name;\r\n\r\n\t// UI/form management\r\n\tconst [uploading, setUploading] = useState(false);\r\n\tconst [inputKey, setInputKey] = useState(Math.random().toString(36));\r\n\r\n\tconsole.log(instance);\r\n\tconsole.log(uploading);\r\n\tconsole.log(inputKey);\r\n\r\n\tconst onFileChange = (incommingFiles: any) => {\r\n\t\t// capture file into state\r\n\t\tsetFileSelected(incommingFiles);\r\n\t};\r\n\r\n\tconst onFileUpload = async () => {\r\n\t\t// prepare UI\r\n\t\tsetUploading(true);\r\n\r\n\t\t// *** UPLOAD TO AZURE STORAGE ***\r\n\t\tconst blobsInContainer: string[] = await uploadFileToBlob(fileSelected[0].file);\r\n\r\n\t\t// prepare UI for results\r\n\t\tsetBlobList(blobsInContainer);\r\n\r\n\t\t// reset state/form\r\n\t\tsetFileSelected([]);\r\n\t\tsetUploading(false);\r\n\t\tsetInputKey(Math.random().toString(36));\r\n\t};\r\n\r\n\t//End previous storage code\r\n\r\n\tconst removeFile = (id: any) => {\r\n\t\tsetFileSelected(fileSelected.filter((x) => x.id !== id));\r\n\t};\r\n\r\n\tconst dropzoneStyle = {\r\n\t\tbackground: \"ffffff\"\r\n\t}\r\n\r\n\tconst UploadArea = () => (\r\n\t\t<div className=\"upload-area\">\r\n\t\t\t<Dropzone\r\n\t\t\t\tonChange={onFileChange}\r\n\t\t\t\tvalue={fileSelected}\r\n\t\t\t\taccept=\".csv, .xls, .xlsx\"\r\n\t\t\t\tlabel=\"click or drop your files here\"\r\n\t\t\t\tmaxFiles={1}\r\n\t\t\t\tmaxFileSize={104857600}\r\n\t\t\t\tstyle={dropzoneStyle}\r\n\t\t\t>\r\n\t\t\t\t{fileSelected.length > 0 &&\r\n\t\t\t\t\tfileSelected.map((file) => (\r\n\t\t\t\t\t\t<FileItem\r\n\t\t\t\t\t\t\t{...file}\r\n\t\t\t\t\t\t\tonDelete={removeFile}\r\n\t\t\t\t\t\t\tkey={file.id}\r\n\t\t\t\t\t\t\tinfo\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t))}\r\n\r\n\t\t\t</Dropzone>\r\n\t\t\t<div className=\"box has-text-centered\">\r\n\t\t\t\t<button type=\"submit\" className=\"button is-primary\" style={{backgroundColor: \"#0057B8\"}} onClick={onFileUpload}>Upload File</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n\r\n\r\n\treturn (\r\n\t\t<PageLayout name={name} hasUploaded={storageConfigured && blobList.length > 0} >\r\n\t\t\t<AuthenticatedTemplate>\r\n\t\t\t\t<UploadArea />\r\n\t\t\t</AuthenticatedTemplate>\r\n\r\n\t\t\t<UnauthenticatedTemplate>\r\n\t\t\t</UnauthenticatedTemplate>\r\n\t\t</PageLayout>\r\n\t);\r\n\r\n};\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n/* eslint-disable */\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n// Additions\r\n// import \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { PublicClientApplication } from \"@azure/msal-browser\";\r\nimport { MsalProvider } from \"@azure/msal-react\";\r\nimport { msalConfig } from \"./authConfig\";\r\n\r\n// Addition\r\nconst msalInstance = new PublicClientApplication(msalConfig);\r\nconst root = ReactDOM.createRoot(document.getElementById(\"root\") as HTMLElement);\r\nconsole.log(\"msInstance: \" + msalInstance);\r\nroot.render(\r\n\t<MsalProvider instance={msalInstance}>\r\n\t\t<App />\r\n\t</MsalProvider>\r\n);\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
{"ast":null,"code":"import _classCallCheck from \"/Users/tbeckett/Documents/geo-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tbeckett/Documents/geo-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/tbeckett/Documents/geo-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/tbeckett/Documents/geo-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { GenericPollOperation } from \"./operation\";\nimport { POLL_INTERVAL_IN_MS } from \"../../poller/constants\";\nimport { Poller } from \"../poller\";\nimport { deserializeState } from \"../../poller/operation\";\n/**\n * The LRO Engine, a class that performs polling.\n */\nexport var LroEngine = /*#__PURE__*/function (_Poller) {\n  _inherits(LroEngine, _Poller);\n  var _super = _createSuper(LroEngine);\n  function LroEngine(lro, options) {\n    var _this;\n    _classCallCheck(this, LroEngine);\n    var _ref = options || {},\n      _ref$intervalInMs = _ref.intervalInMs,\n      intervalInMs = _ref$intervalInMs === void 0 ? POLL_INTERVAL_IN_MS : _ref$intervalInMs,\n      resumeFrom = _ref.resumeFrom,\n      _ref$resolveOnUnsucce = _ref.resolveOnUnsuccessful,\n      resolveOnUnsuccessful = _ref$resolveOnUnsucce === void 0 ? false : _ref$resolveOnUnsucce,\n      isDone = _ref.isDone,\n      lroResourceLocationConfig = _ref.lroResourceLocationConfig,\n      processResult = _ref.processResult,\n      updateState = _ref.updateState;\n    var state = resumeFrom ? deserializeState(resumeFrom) : {};\n    var operation = new GenericPollOperation(state, lro, !resolveOnUnsuccessful, lroResourceLocationConfig, processResult, updateState, isDone);\n    _this = _super.call(this, operation);\n    _this.resolveOnUnsuccessful = resolveOnUnsuccessful;\n    _this.config = {\n      intervalInMs: intervalInMs\n    };\n    operation.setPollerConfig(_this.config);\n    return _this;\n  }\n  /**\n   * The method used by the poller to wait before attempting to update its operation.\n   */\n  _createClass(LroEngine, [{\n    key: \"delay\",\n    value: function delay() {\n      var _this2 = this;\n      return new Promise(function (resolve) {\n        return setTimeout(function () {\n          return resolve();\n        }, _this2.config.intervalInMs);\n      });\n    }\n  }]);\n  return LroEngine;\n}(Poller);","map":{"version":3,"mappings":";;;;AAAA;AACA;AAGA,SAASA,oBAAoB,QAAQ,aAAa;AAElD,SAASC,mBAAmB,QAAQ,wBAAwB;AAE5D,SAASC,MAAM,QAAQ,WAAW;AAElC,SAASC,gBAAgB,QAAQ,wBAAwB;AAEzD;;;AAGA,WAAaC,SAA+D;EAAA;EAAA;EAM1E,mBAAYC,GAAkC,EAAEC,OAA2C;IAAA;IAAA;IACzF,WAQIA,OAAO,IAAI,EAAE;MAAA,yBAPfC,YAAY;MAAZA,YAAY,kCAAGN,mBAAmB;MAClCO,UAAU,QAAVA,UAAU;MAAA,6BACVC,qBAAqB;MAArBA,qBAAqB,sCAAG,KAAK;MAC7BC,MAAM,QAANA,MAAM;MACNC,yBAAyB,QAAzBA,yBAAyB;MACzBC,aAAa,QAAbA,aAAa;MACbC,WAAW,QAAXA,WAAW;IAEb,IAAMC,KAAK,GAAqCN,UAAU,GACtDL,gBAAgB,CAACK,UAAU,CAAC,GAC3B,EAAuC;IAC5C,IAAMO,SAAS,GAAG,IAAIf,oBAAoB,CACxCc,KAAK,EACLT,GAAG,EACH,CAACI,qBAAqB,EACtBE,yBAAyB,EACzBC,aAAa,EACbC,WAAW,EACXH,MAAM,CACP;IACD,0BAAMK,SAAS;IACf,MAAKN,qBAAqB,GAAGA,qBAAqB;IAElD,MAAKO,MAAM,GAAG;MAAET,YAAY,EAAEA;IAAY,CAAE;IAC5CQ,SAAS,CAACE,eAAe,CAAC,MAAKD,MAAM,CAAC;IAAC;EACzC;EAEA;;;EAAA;IAAA;IAAA,OAGA,iBAAK;MAAA;MACH,OAAO,IAAIE,OAAO,CAAC,UAACC,OAAO;QAAA,OAAKC,UAAU,CAAC;UAAA,OAAMD,OAAO,EAAE;QAAA,GAAE,MAAI,CAACH,MAAM,CAACT,YAAY,CAAC;MAAA,EAAC;IACxF;EAAC;EAAA;AAAA,EAxCiFL,MAGnF","names":["GenericPollOperation","POLL_INTERVAL_IN_MS","Poller","deserializeState","LroEngine","lro","options","intervalInMs","resumeFrom","resolveOnUnsuccessful","isDone","lroResourceLocationConfig","processResult","updateState","state","operation","config","setPollerConfig","Promise","resolve","setTimeout"],"sourceRoot":"","sources":["../../../../src/legacy/lroEngine/lroEngine.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { LroEngineOptions, PollerConfig } from \"./models\";\nimport { GenericPollOperation } from \"./operation\";\nimport { LongRunningOperation } from \"../../http/models\";\nimport { POLL_INTERVAL_IN_MS } from \"../../poller/constants\";\nimport { PollOperationState } from \"../pollOperation\";\nimport { Poller } from \"../poller\";\nimport { RestorableOperationState } from \"../../poller/models\";\nimport { deserializeState } from \"../../poller/operation\";\n\n/**\n * The LRO Engine, a class that performs polling.\n */\nexport class LroEngine<TResult, TState extends PollOperationState<TResult>> extends Poller<\n  TState,\n  TResult\n> {\n  private config: PollerConfig;\n\n  constructor(lro: LongRunningOperation<TResult>, options?: LroEngineOptions<TResult, TState>) {\n    const {\n      intervalInMs = POLL_INTERVAL_IN_MS,\n      resumeFrom,\n      resolveOnUnsuccessful = false,\n      isDone,\n      lroResourceLocationConfig,\n      processResult,\n      updateState,\n    } = options || {};\n    const state: RestorableOperationState<TState> = resumeFrom\n      ? deserializeState(resumeFrom)\n      : ({} as RestorableOperationState<TState>);\n    const operation = new GenericPollOperation(\n      state,\n      lro,\n      !resolveOnUnsuccessful,\n      lroResourceLocationConfig,\n      processResult,\n      updateState,\n      isDone\n    );\n    super(operation);\n    this.resolveOnUnsuccessful = resolveOnUnsuccessful;\n\n    this.config = { intervalInMs: intervalInMs };\n    operation.setPollerConfig(this.config);\n  }\n\n  /**\n   * The method used by the poller to wait before attempting to update its operation.\n   */\n  delay(): Promise<void> {\n    return new Promise((resolve) => setTimeout(() => resolve(), this.config.intervalInMs));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
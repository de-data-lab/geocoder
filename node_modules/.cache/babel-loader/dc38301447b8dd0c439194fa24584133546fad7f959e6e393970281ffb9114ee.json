{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * Convert a Browser Blob object into ArrayBuffer.\n *\n * @param blob -\n */\nexport async function blobToArrayBuffer(blob) {\n  const fileReader = new FileReader();\n  return new Promise((resolve, reject) => {\n    fileReader.onloadend = ev => {\n      resolve(ev.target.result);\n    };\n    fileReader.onerror = reject;\n    fileReader.readAsArrayBuffer(blob);\n  });\n}\n/**\n * Convert a Browser Blob object into string.\n *\n * @param blob -\n */\nexport async function blobToString(blob) {\n  const fileReader = new FileReader();\n  return new Promise((resolve, reject) => {\n    fileReader.onloadend = ev => {\n      resolve(ev.target.result);\n    };\n    fileReader.onerror = reject;\n    fileReader.readAsText(blob);\n  });\n}\nexport function streamToBuffer() {\n  /* empty */\n}\nexport function streamToBuffer2() {\n  /* empty */\n}\nexport function readStreamToLocalFile() {\n  /* empty */\n}\nexport const fsStat = function stat() {\n  /* empty */\n};\nexport const fsCreateReadStream = function createReadStream() {\n  /* empty */\n};","map":{"version":3,"mappings":"AAAA;AACA;AAEA;;;;;AAKA,OAAO,eAAeA,iBAAiB,CAACC,IAAU;EAChD,MAAMC,UAAU,GAAG,IAAIC,UAAU,EAAE;EACnC,OAAO,IAAIC,OAAO,CAAc,CAACC,OAAO,EAAEC,MAAM,KAAI;IAClDJ,UAAU,CAACK,SAAS,GAAIC,EAAO,IAAI;MACjCH,OAAO,CAACG,EAAE,CAACC,MAAO,CAACC,MAAM,CAAC;IAC5B,CAAC;IACDR,UAAU,CAACS,OAAO,GAAGL,MAAM;IAC3BJ,UAAU,CAACU,iBAAiB,CAACX,IAAI,CAAC;EACpC,CAAC,CAAC;AACJ;AAEA;;;;;AAKA,OAAO,eAAeY,YAAY,CAACZ,IAAU;EAC3C,MAAMC,UAAU,GAAG,IAAIC,UAAU,EAAE;EACnC,OAAO,IAAIC,OAAO,CAAS,CAACC,OAAO,EAAEC,MAAM,KAAI;IAC7CJ,UAAU,CAACK,SAAS,GAAIC,EAAO,IAAI;MACjCH,OAAO,CAACG,EAAE,CAACC,MAAO,CAACC,MAAM,CAAC;IAC5B,CAAC;IACDR,UAAU,CAACS,OAAO,GAAGL,MAAM;IAC3BJ,UAAU,CAACY,UAAU,CAACb,IAAI,CAAC;EAC7B,CAAC,CAAC;AACJ;AAEA,OAAM,SAAUc,cAAc;EAC5B;AAAA;AAGF,OAAM,SAAUC,eAAe;EAC7B;AAAA;AAGF,OAAM,SAAUC,qBAAqB;EACnC;AAAA;AAGF,OAAO,MAAMC,MAAM,GAAG,SAASC,IAAI;EACjC;AAAA,CACD;AAED,OAAO,MAAMC,kBAAkB,GAAG,SAASC,gBAAgB;EACzD;AAAA,CACD","names":["blobToArrayBuffer","blob","fileReader","FileReader","Promise","resolve","reject","onloadend","ev","target","result","onerror","readAsArrayBuffer","blobToString","readAsText","streamToBuffer","streamToBuffer2","readStreamToLocalFile","fsStat","stat","fsCreateReadStream","createReadStream"],"sources":["/Users/yupenglei/Documents/geo-react/node_modules/@azure/storage-blob/src/utils/utils.browser.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Convert a Browser Blob object into ArrayBuffer.\n *\n * @param blob -\n */\nexport async function blobToArrayBuffer(blob: Blob): Promise<ArrayBuffer> {\n  const fileReader = new FileReader();\n  return new Promise<ArrayBuffer>((resolve, reject) => {\n    fileReader.onloadend = (ev: any) => {\n      resolve(ev.target!.result);\n    };\n    fileReader.onerror = reject;\n    fileReader.readAsArrayBuffer(blob);\n  });\n}\n\n/**\n * Convert a Browser Blob object into string.\n *\n * @param blob -\n */\nexport async function blobToString(blob: Blob): Promise<string> {\n  const fileReader = new FileReader();\n  return new Promise<string>((resolve, reject) => {\n    fileReader.onloadend = (ev: any) => {\n      resolve(ev.target!.result);\n    };\n    fileReader.onerror = reject;\n    fileReader.readAsText(blob);\n  });\n}\n\nexport function streamToBuffer(): void {\n  /* empty */\n}\n\nexport function streamToBuffer2(): void {\n  /* empty */\n}\n\nexport function readStreamToLocalFile(): void {\n  /* empty */\n}\n\nexport const fsStat = function stat(): void {\n  /* empty */\n};\n\nexport const fsCreateReadStream = function createReadStream(): void {\n  /* empty */\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
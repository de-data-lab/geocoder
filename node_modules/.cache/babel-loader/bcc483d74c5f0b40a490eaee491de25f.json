{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * This is a helper class to construct a string representing the permissions granted by a ServiceSAS to a blob. Setting\n * a value to true means that any SAS which uses these permissions will grant permissions for that operation. Once all\n * the values are set, this should be serialized with toString and set as the permissions field on a\n * {@link BlobSASSignatureValues} object. It is possible to construct the permissions string without this class, but\n * the order of the permissions is particular and this class guarantees correctness.\n */\nexport class BlobSASPermissions {\n  constructor() {\n    /**\n     * Specifies Read access granted.\n     */\n    this.read = false;\n    /**\n     * Specifies Add access granted.\n     */\n    this.add = false;\n    /**\n     * Specifies Create access granted.\n     */\n    this.create = false;\n    /**\n     * Specifies Write access granted.\n     */\n    this.write = false;\n    /**\n     * Specifies Delete access granted.\n     */\n    this.delete = false;\n    /**\n     * Specifies Delete version access granted.\n     */\n    this.deleteVersion = false;\n    /**\n     * Specfies Tag access granted.\n     */\n    this.tag = false;\n    /**\n     * Specifies Move access granted.\n     */\n    this.move = false;\n    /**\n     * Specifies Execute access granted.\n     */\n    this.execute = false;\n    /**\n     * Specifies SetImmutabilityPolicy access granted.\n     */\n    this.setImmutabilityPolicy = false;\n    /**\n     * Specifies that Permanent Delete is permitted.\n     */\n    this.permanentDelete = false;\n  }\n  /**\n   * Creates a {@link BlobSASPermissions} from the specified permissions string. This method will throw an\n   * Error if it encounters a character that does not correspond to a valid permission.\n   *\n   * @param permissions -\n   */\n  static parse(permissions) {\n    const blobSASPermissions = new BlobSASPermissions();\n    for (const char of permissions) {\n      switch (char) {\n        case \"r\":\n          blobSASPermissions.read = true;\n          break;\n        case \"a\":\n          blobSASPermissions.add = true;\n          break;\n        case \"c\":\n          blobSASPermissions.create = true;\n          break;\n        case \"w\":\n          blobSASPermissions.write = true;\n          break;\n        case \"d\":\n          blobSASPermissions.delete = true;\n          break;\n        case \"x\":\n          blobSASPermissions.deleteVersion = true;\n          break;\n        case \"t\":\n          blobSASPermissions.tag = true;\n          break;\n        case \"m\":\n          blobSASPermissions.move = true;\n          break;\n        case \"e\":\n          blobSASPermissions.execute = true;\n          break;\n        case \"i\":\n          blobSASPermissions.setImmutabilityPolicy = true;\n          break;\n        case \"y\":\n          blobSASPermissions.permanentDelete = true;\n          break;\n        default:\n          throw new RangeError(`Invalid permission: ${char}`);\n      }\n    }\n    return blobSASPermissions;\n  }\n  /**\n   * Creates a {@link BlobSASPermissions} from a raw object which contains same keys as it\n   * and boolean values for them.\n   *\n   * @param permissionLike -\n   */\n  static from(permissionLike) {\n    const blobSASPermissions = new BlobSASPermissions();\n    if (permissionLike.read) {\n      blobSASPermissions.read = true;\n    }\n    if (permissionLike.add) {\n      blobSASPermissions.add = true;\n    }\n    if (permissionLike.create) {\n      blobSASPermissions.create = true;\n    }\n    if (permissionLike.write) {\n      blobSASPermissions.write = true;\n    }\n    if (permissionLike.delete) {\n      blobSASPermissions.delete = true;\n    }\n    if (permissionLike.deleteVersion) {\n      blobSASPermissions.deleteVersion = true;\n    }\n    if (permissionLike.tag) {\n      blobSASPermissions.tag = true;\n    }\n    if (permissionLike.move) {\n      blobSASPermissions.move = true;\n    }\n    if (permissionLike.execute) {\n      blobSASPermissions.execute = true;\n    }\n    if (permissionLike.setImmutabilityPolicy) {\n      blobSASPermissions.setImmutabilityPolicy = true;\n    }\n    if (permissionLike.permanentDelete) {\n      blobSASPermissions.permanentDelete = true;\n    }\n    return blobSASPermissions;\n  }\n  /**\n   * Converts the given permissions to a string. Using this method will guarantee the permissions are in an\n   * order accepted by the service.\n   *\n   * @returns A string which represents the BlobSASPermissions\n   */\n  toString() {\n    const permissions = [];\n    if (this.read) {\n      permissions.push(\"r\");\n    }\n    if (this.add) {\n      permissions.push(\"a\");\n    }\n    if (this.create) {\n      permissions.push(\"c\");\n    }\n    if (this.write) {\n      permissions.push(\"w\");\n    }\n    if (this.delete) {\n      permissions.push(\"d\");\n    }\n    if (this.deleteVersion) {\n      permissions.push(\"x\");\n    }\n    if (this.tag) {\n      permissions.push(\"t\");\n    }\n    if (this.move) {\n      permissions.push(\"m\");\n    }\n    if (this.execute) {\n      permissions.push(\"e\");\n    }\n    if (this.setImmutabilityPolicy) {\n      permissions.push(\"i\");\n    }\n    if (this.permanentDelete) {\n      permissions.push(\"y\");\n    }\n    return permissions.join(\"\");\n  }\n}","map":{"version":3,"mappings":"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","names":["BlobSASPermissions","constructor","parse","permissions","blobSASPermissions","char","read","add","create","write","delete","deleteVersion","tag","move","execute","setImmutabilityPolicy","permanentDelete","RangeError","from","permissionLike","toString","push","join"],"sourceRoot":"","sources":["../../../../src/sas/BlobSASPermissions.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * This is a helper class to construct a string representing the permissions granted by a ServiceSAS to a blob. Setting\n * a value to true means that any SAS which uses these permissions will grant permissions for that operation. Once all\n * the values are set, this should be serialized with toString and set as the permissions field on a\n * {@link BlobSASSignatureValues} object. It is possible to construct the permissions string without this class, but\n * the order of the permissions is particular and this class guarantees correctness.\n */\nexport class BlobSASPermissions {\n  /**\n   * Creates a {@link BlobSASPermissions} from the specified permissions string. This method will throw an\n   * Error if it encounters a character that does not correspond to a valid permission.\n   *\n   * @param permissions -\n   */\n  public static parse(permissions: string): BlobSASPermissions {\n    const blobSASPermissions = new BlobSASPermissions();\n\n    for (const char of permissions) {\n      switch (char) {\n        case \"r\":\n          blobSASPermissions.read = true;\n          break;\n        case \"a\":\n          blobSASPermissions.add = true;\n          break;\n        case \"c\":\n          blobSASPermissions.create = true;\n          break;\n        case \"w\":\n          blobSASPermissions.write = true;\n          break;\n        case \"d\":\n          blobSASPermissions.delete = true;\n          break;\n        case \"x\":\n          blobSASPermissions.deleteVersion = true;\n          break;\n        case \"t\":\n          blobSASPermissions.tag = true;\n          break;\n        case \"m\":\n          blobSASPermissions.move = true;\n          break;\n        case \"e\":\n          blobSASPermissions.execute = true;\n          break;\n        case \"i\":\n          blobSASPermissions.setImmutabilityPolicy = true;\n          break;\n        case \"y\":\n          blobSASPermissions.permanentDelete = true;\n          break;\n        default:\n          throw new RangeError(`Invalid permission: ${char}`);\n      }\n    }\n\n    return blobSASPermissions;\n  }\n\n  /**\n   * Creates a {@link BlobSASPermissions} from a raw object which contains same keys as it\n   * and boolean values for them.\n   *\n   * @param permissionLike -\n   */\n  public static from(permissionLike: BlobSASPermissionsLike): BlobSASPermissions {\n    const blobSASPermissions = new BlobSASPermissions();\n    if (permissionLike.read) {\n      blobSASPermissions.read = true;\n    }\n    if (permissionLike.add) {\n      blobSASPermissions.add = true;\n    }\n    if (permissionLike.create) {\n      blobSASPermissions.create = true;\n    }\n    if (permissionLike.write) {\n      blobSASPermissions.write = true;\n    }\n    if (permissionLike.delete) {\n      blobSASPermissions.delete = true;\n    }\n    if (permissionLike.deleteVersion) {\n      blobSASPermissions.deleteVersion = true;\n    }\n    if (permissionLike.tag) {\n      blobSASPermissions.tag = true;\n    }\n    if (permissionLike.move) {\n      blobSASPermissions.move = true;\n    }\n    if (permissionLike.execute) {\n      blobSASPermissions.execute = true;\n    }\n    if (permissionLike.setImmutabilityPolicy) {\n      blobSASPermissions.setImmutabilityPolicy = true;\n    }\n    if (permissionLike.permanentDelete) {\n      blobSASPermissions.permanentDelete = true;\n    }\n    return blobSASPermissions;\n  }\n\n  /**\n   * Specifies Read access granted.\n   */\n  public read: boolean = false;\n\n  /**\n   * Specifies Add access granted.\n   */\n  public add: boolean = false;\n\n  /**\n   * Specifies Create access granted.\n   */\n  public create: boolean = false;\n\n  /**\n   * Specifies Write access granted.\n   */\n  public write: boolean = false;\n\n  /**\n   * Specifies Delete access granted.\n   */\n  public delete: boolean = false;\n\n  /**\n   * Specifies Delete version access granted.\n   */\n  public deleteVersion: boolean = false;\n\n  /**\n   * Specfies Tag access granted.\n   */\n  public tag: boolean = false;\n\n  /**\n   * Specifies Move access granted.\n   */\n  public move: boolean = false;\n\n  /**\n   * Specifies Execute access granted.\n   */\n  public execute: boolean = false;\n\n  /**\n   * Specifies SetImmutabilityPolicy access granted.\n   */\n  public setImmutabilityPolicy: boolean = false;\n\n  /**\n   * Specifies that Permanent Delete is permitted.\n   */\n  public permanentDelete: boolean = false;\n\n  /**\n   * Converts the given permissions to a string. Using this method will guarantee the permissions are in an\n   * order accepted by the service.\n   *\n   * @returns A string which represents the BlobSASPermissions\n   */\n  public toString(): string {\n    const permissions: string[] = [];\n    if (this.read) {\n      permissions.push(\"r\");\n    }\n    if (this.add) {\n      permissions.push(\"a\");\n    }\n    if (this.create) {\n      permissions.push(\"c\");\n    }\n    if (this.write) {\n      permissions.push(\"w\");\n    }\n    if (this.delete) {\n      permissions.push(\"d\");\n    }\n    if (this.deleteVersion) {\n      permissions.push(\"x\");\n    }\n    if (this.tag) {\n      permissions.push(\"t\");\n    }\n    if (this.move) {\n      permissions.push(\"m\");\n    }\n    if (this.execute) {\n      permissions.push(\"e\");\n    }\n    if (this.setImmutabilityPolicy) {\n      permissions.push(\"i\");\n    }\n    if (this.permanentDelete) {\n      permissions.push(\"y\");\n    }\n    return permissions.join(\"\");\n  }\n}\n\n/**\n * A type that looks like a Blob SAS permission.\n * Used in {@link BlobSASPermissions} to parse SAS permissions from raw objects.\n */\nexport interface BlobSASPermissionsLike {\n  /**\n   * Specifies Read access granted.\n   */\n  read?: boolean;\n\n  /**\n   * Specifies Add access granted.\n   */\n  add?: boolean;\n\n  /**\n   * Specifies Create access granted.\n   */\n  create?: boolean;\n\n  /**\n   * Specifies Write access granted.\n   */\n  write?: boolean;\n\n  /**\n   * Specifies Delete access granted.\n   */\n  delete?: boolean;\n\n  /**\n   * Specifies Delete version access granted.\n   */\n  deleteVersion?: boolean;\n\n  /**\n   * Specfies Tag access granted.\n   */\n  tag?: boolean;\n\n  /**\n   * Specifies Move access granted.\n   */\n  move?: boolean;\n\n  /**\n   * Specifies Execute access granted.\n   */\n  execute?: boolean;\n\n  /**\n   * Specifies SetImmutabilityPolicy access granted.\n   */\n  setImmutabilityPolicy?: boolean;\n\n  /**\n   * Specifies that Permanent Delete is permitted.\n   */\n  permanentDelete?: boolean;\n}\n"]},"metadata":{},"sourceType":"module"}
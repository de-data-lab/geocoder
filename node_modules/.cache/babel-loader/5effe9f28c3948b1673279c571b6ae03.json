{"ast":null,"code":"import _defineProperty from \"/Users/tbeckett/Documents/geo-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"/Users/tbeckett/Documents/geo-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/tbeckett/Documents/geo-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tbeckett/Documents/geo-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/tbeckett/Documents/geo-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/tbeckett/Documents/geo-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nimport { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from \"tslib\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { isTokenCredential, isNode, getDefaultProxySettings } from \"@azure/core-http\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport { Container, Service } from \"./generated/src/operations\";\nimport { newPipeline, isPipelineLike } from \"./Pipeline\";\nimport { ContainerClient } from \"./ContainerClient\";\nimport { appendToURLPath, appendToURLQuery, extractConnectionStringParts, toTags } from \"./utils/utils.common\";\nimport { StorageSharedKeyCredential } from \"./credentials/StorageSharedKeyCredential\";\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\nimport \"@azure/core-paging\";\nimport { truncatedISO8061Date } from \"./utils/utils.common\";\nimport { convertTracingToRequestOptionsBase, createSpan } from \"./utils/tracing\";\nimport { BlobBatchClient } from \"./BlobBatchClient\";\nimport { StorageClient } from \"./StorageClient\";\nimport { AccountSASPermissions } from \"./sas/AccountSASPermissions\";\nimport { generateAccountSASQueryParameters } from \"./sas/AccountSASSignatureValues\";\nimport { AccountSASServices } from \"./sas/AccountSASServices\";\n/**\n * A BlobServiceClient represents a Client to the Azure Storage Blob service allowing you\n * to manipulate blob containers.\n */\nexport var BlobServiceClient = /*#__PURE__*/function (_StorageClient) {\n  _inherits(BlobServiceClient, _StorageClient);\n  var _super = _createSuper(BlobServiceClient);\n  function BlobServiceClient(url, credentialOrPipeline,\n  // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n  /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n  options) {\n    var _this;\n    _classCallCheck(this, BlobServiceClient);\n    var pipeline;\n    if (isPipelineLike(credentialOrPipeline)) {\n      pipeline = credentialOrPipeline;\n    } else if (isNode && credentialOrPipeline instanceof StorageSharedKeyCredential || credentialOrPipeline instanceof AnonymousCredential || isTokenCredential(credentialOrPipeline)) {\n      pipeline = newPipeline(credentialOrPipeline, options);\n    } else {\n      // The second parameter is undefined. Use anonymous credential\n      pipeline = newPipeline(new AnonymousCredential(), options);\n    }\n    _this = _super.call(this, url, pipeline);\n    _this.serviceContext = new Service(_this.storageClientContext);\n    return _this;\n  }\n  /**\n   *\n   * Creates an instance of BlobServiceClient from connection string.\n   *\n   * @param connectionString - Account connection string or a SAS connection string of an Azure storage account.\n   *                                  [ Note - Account connection string can only be used in NODE.JS runtime. ]\n   *                                  Account connection string example -\n   *                                  `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`\n   *                                  SAS connection string example -\n   *                                  `BlobEndpoint=https://myaccount.blob.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   */\n  _createClass(BlobServiceClient, [{\n    key: \"getContainerClient\",\n    value:\n    /**\n     * Creates a {@link ContainerClient} object\n     *\n     * @param containerName - A container name\n     * @returns A new ContainerClient object for the given container name.\n     *\n     * Example usage:\n     *\n     * ```js\n     * const containerClient = blobServiceClient.getContainerClient(\"<container name>\");\n     * ```\n     */\n    function getContainerClient(containerName) {\n      return new ContainerClient(appendToURLPath(this.url, encodeURIComponent(containerName)), this.pipeline);\n    }\n    /**\n     * Create a Blob container.\n     *\n     * @param containerName - Name of the container to create.\n     * @param options - Options to configure Container Create operation.\n     * @returns Container creation response and the corresponding container client.\n     */\n  }, {\n    key: \"createContainer\",\n    value: function () {\n      var _createContainer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(containerName) {\n        var options,\n          _createSpan,\n          span,\n          updatedOptions,\n          containerClient,\n          containerCreateResponse,\n          _args = arguments;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n                _createSpan = createSpan(\"BlobServiceClient-createContainer\", options), span = _createSpan.span, updatedOptions = _createSpan.updatedOptions;\n                _context.prev = 2;\n                containerClient = this.getContainerClient(containerName);\n                _context.next = 6;\n                return containerClient.create(updatedOptions);\n              case 6:\n                containerCreateResponse = _context.sent;\n                return _context.abrupt(\"return\", {\n                  containerClient: containerClient,\n                  containerCreateResponse: containerCreateResponse\n                });\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](2);\n                span.setStatus({\n                  code: SpanStatusCode.ERROR,\n                  message: _context.t0.message\n                });\n                throw _context.t0;\n              case 14:\n                _context.prev = 14;\n                span.end();\n                return _context.finish(14);\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[2, 10, 14, 17]]);\n      }));\n      function createContainer(_x) {\n        return _createContainer.apply(this, arguments);\n      }\n      return createContainer;\n    }()\n    /**\n     * Deletes a Blob container.\n     *\n     * @param containerName - Name of the container to delete.\n     * @param options - Options to configure Container Delete operation.\n     * @returns Container deletion response.\n     */\n  }, {\n    key: \"deleteContainer\",\n    value: function () {\n      var _deleteContainer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(containerName) {\n        var options,\n          _createSpan2,\n          span,\n          updatedOptions,\n          containerClient,\n          _args2 = arguments;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                options = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};\n                _createSpan2 = createSpan(\"BlobServiceClient-deleteContainer\", options), span = _createSpan2.span, updatedOptions = _createSpan2.updatedOptions;\n                _context2.prev = 2;\n                containerClient = this.getContainerClient(containerName);\n                _context2.next = 6;\n                return containerClient.delete(updatedOptions);\n              case 6:\n                return _context2.abrupt(\"return\", _context2.sent);\n              case 9:\n                _context2.prev = 9;\n                _context2.t0 = _context2[\"catch\"](2);\n                span.setStatus({\n                  code: SpanStatusCode.ERROR,\n                  message: _context2.t0.message\n                });\n                throw _context2.t0;\n              case 13:\n                _context2.prev = 13;\n                span.end();\n                return _context2.finish(13);\n              case 16:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[2, 9, 13, 16]]);\n      }));\n      function deleteContainer(_x2) {\n        return _deleteContainer.apply(this, arguments);\n      }\n      return deleteContainer;\n    }()\n    /**\n     * Restore a previously deleted Blob container.\n     * This API is only functional if Container Soft Delete is enabled for the storage account associated with the container.\n     *\n     * @param deletedContainerName - Name of the previously deleted container.\n     * @param deletedContainerVersion - Version of the previously deleted container, used to uniquely identify the deleted container.\n     * @param options - Options to configure Container Restore operation.\n     * @returns Container deletion response.\n     */\n  }, {\n    key: \"undeleteContainer\",\n    value: function () {\n      var _undeleteContainer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(deletedContainerName, deletedContainerVersion) {\n        var options,\n          _createSpan3,\n          span,\n          updatedOptions,\n          containerClient,\n          containerContext,\n          containerUndeleteResponse,\n          _args3 = arguments;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                options = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : {};\n                _createSpan3 = createSpan(\"BlobServiceClient-undeleteContainer\", options), span = _createSpan3.span, updatedOptions = _createSpan3.updatedOptions;\n                _context3.prev = 2;\n                containerClient = this.getContainerClient(options.destinationContainerName || deletedContainerName); // Hack to access a protected member.\n                containerContext = new Container(containerClient[\"storageClientContext\"]);\n                _context3.next = 7;\n                return containerContext.restore(Object.assign({\n                  deletedContainerName: deletedContainerName,\n                  deletedContainerVersion: deletedContainerVersion\n                }, updatedOptions));\n              case 7:\n                containerUndeleteResponse = _context3.sent;\n                return _context3.abrupt(\"return\", {\n                  containerClient: containerClient,\n                  containerUndeleteResponse: containerUndeleteResponse\n                });\n              case 11:\n                _context3.prev = 11;\n                _context3.t0 = _context3[\"catch\"](2);\n                span.setStatus({\n                  code: SpanStatusCode.ERROR,\n                  message: _context3.t0.message\n                });\n                throw _context3.t0;\n              case 15:\n                _context3.prev = 15;\n                span.end();\n                return _context3.finish(15);\n              case 18:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[2, 11, 15, 18]]);\n      }));\n      function undeleteContainer(_x3, _x4) {\n        return _undeleteContainer.apply(this, arguments);\n      }\n      return undeleteContainer;\n    }()\n    /**\n     * Rename an existing Blob Container.\n     *\n     * @param sourceContainerName - The name of the source container.\n     * @param destinationContainerName - The new name of the container.\n     * @param options - Options to configure Container Rename operation.\n     */\n    /* eslint-disable-next-line @typescript-eslint/ban-ts-comment */\n    // @ts-ignore Need to hide this interface for now. Make it public and turn on the live tests for it when the service is ready.\n  }, {\n    key: \"renameContainer\",\n    value: function () {\n      var _renameContainer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(sourceContainerName, destinationContainerName) {\n        var options,\n          _a,\n          _createSpan4,\n          span,\n          updatedOptions,\n          containerClient,\n          containerContext,\n          containerRenameResponse,\n          _args4 = arguments;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                options = _args4.length > 2 && _args4[2] !== undefined ? _args4[2] : {};\n                _createSpan4 = createSpan(\"BlobServiceClient-renameContainer\", options), span = _createSpan4.span, updatedOptions = _createSpan4.updatedOptions;\n                _context4.prev = 2;\n                containerClient = this.getContainerClient(destinationContainerName); // Hack to access a protected member.\n                containerContext = new Container(containerClient[\"storageClientContext\"]);\n                _context4.next = 7;\n                return containerContext.rename(sourceContainerName, Object.assign(Object.assign({}, updatedOptions), {\n                  sourceLeaseId: (_a = options.sourceCondition) === null || _a === void 0 ? void 0 : _a.leaseId\n                }));\n              case 7:\n                containerRenameResponse = _context4.sent;\n                return _context4.abrupt(\"return\", {\n                  containerClient: containerClient,\n                  containerRenameResponse: containerRenameResponse\n                });\n              case 11:\n                _context4.prev = 11;\n                _context4.t0 = _context4[\"catch\"](2);\n                span.setStatus({\n                  code: SpanStatusCode.ERROR,\n                  message: _context4.t0.message\n                });\n                throw _context4.t0;\n              case 15:\n                _context4.prev = 15;\n                span.end();\n                return _context4.finish(15);\n              case 18:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[2, 11, 15, 18]]);\n      }));\n      function renameContainer(_x5, _x6) {\n        return _renameContainer.apply(this, arguments);\n      }\n      return renameContainer;\n    }()\n    /**\n     * Gets the properties of a storage account’s Blob service, including properties\n     * for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-service-properties\n     *\n     * @param options - Options to the Service Get Properties operation.\n     * @returns Response data for the Service Get Properties operation.\n     */\n  }, {\n    key: \"getProperties\",\n    value: function () {\n      var _getProperties = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var options,\n          _createSpan5,\n          span,\n          updatedOptions,\n          _args5 = arguments;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                options = _args5.length > 0 && _args5[0] !== undefined ? _args5[0] : {};\n                _createSpan5 = createSpan(\"BlobServiceClient-getProperties\", options), span = _createSpan5.span, updatedOptions = _createSpan5.updatedOptions;\n                _context5.prev = 2;\n                _context5.next = 5;\n                return this.serviceContext.getProperties(Object.assign({\n                  abortSignal: options.abortSignal\n                }, convertTracingToRequestOptionsBase(updatedOptions)));\n              case 5:\n                return _context5.abrupt(\"return\", _context5.sent);\n              case 8:\n                _context5.prev = 8;\n                _context5.t0 = _context5[\"catch\"](2);\n                span.setStatus({\n                  code: SpanStatusCode.ERROR,\n                  message: _context5.t0.message\n                });\n                throw _context5.t0;\n              case 12:\n                _context5.prev = 12;\n                span.end();\n                return _context5.finish(12);\n              case 15:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[2, 8, 12, 15]]);\n      }));\n      function getProperties() {\n        return _getProperties.apply(this, arguments);\n      }\n      return getProperties;\n    }()\n    /**\n     * Sets properties for a storage account’s Blob service endpoint, including properties\n     * for Storage Analytics, CORS (Cross-Origin Resource Sharing) rules and soft delete settings.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-service-properties\n     *\n     * @param properties -\n     * @param options - Options to the Service Set Properties operation.\n     * @returns Response data for the Service Set Properties operation.\n     */\n  }, {\n    key: \"setProperties\",\n    value: function () {\n      var _setProperties = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(properties) {\n        var options,\n          _createSpan6,\n          span,\n          updatedOptions,\n          _args6 = arguments;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                options = _args6.length > 1 && _args6[1] !== undefined ? _args6[1] : {};\n                _createSpan6 = createSpan(\"BlobServiceClient-setProperties\", options), span = _createSpan6.span, updatedOptions = _createSpan6.updatedOptions;\n                _context6.prev = 2;\n                _context6.next = 5;\n                return this.serviceContext.setProperties(properties, Object.assign({\n                  abortSignal: options.abortSignal\n                }, convertTracingToRequestOptionsBase(updatedOptions)));\n              case 5:\n                return _context6.abrupt(\"return\", _context6.sent);\n              case 8:\n                _context6.prev = 8;\n                _context6.t0 = _context6[\"catch\"](2);\n                span.setStatus({\n                  code: SpanStatusCode.ERROR,\n                  message: _context6.t0.message\n                });\n                throw _context6.t0;\n              case 12:\n                _context6.prev = 12;\n                span.end();\n                return _context6.finish(12);\n              case 15:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[2, 8, 12, 15]]);\n      }));\n      function setProperties(_x7) {\n        return _setProperties.apply(this, arguments);\n      }\n      return setProperties;\n    }()\n    /**\n     * Retrieves statistics related to replication for the Blob service. It is only\n     * available on the secondary location endpoint when read-access geo-redundant\n     * replication is enabled for the storage account.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-service-stats\n     *\n     * @param options - Options to the Service Get Statistics operation.\n     * @returns Response data for the Service Get Statistics operation.\n     */\n  }, {\n    key: \"getStatistics\",\n    value: function () {\n      var _getStatistics = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        var options,\n          _createSpan7,\n          span,\n          updatedOptions,\n          _args7 = arguments;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                options = _args7.length > 0 && _args7[0] !== undefined ? _args7[0] : {};\n                _createSpan7 = createSpan(\"BlobServiceClient-getStatistics\", options), span = _createSpan7.span, updatedOptions = _createSpan7.updatedOptions;\n                _context7.prev = 2;\n                _context7.next = 5;\n                return this.serviceContext.getStatistics(Object.assign({\n                  abortSignal: options.abortSignal\n                }, convertTracingToRequestOptionsBase(updatedOptions)));\n              case 5:\n                return _context7.abrupt(\"return\", _context7.sent);\n              case 8:\n                _context7.prev = 8;\n                _context7.t0 = _context7[\"catch\"](2);\n                span.setStatus({\n                  code: SpanStatusCode.ERROR,\n                  message: _context7.t0.message\n                });\n                throw _context7.t0;\n              case 12:\n                _context7.prev = 12;\n                span.end();\n                return _context7.finish(12);\n              case 15:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this, [[2, 8, 12, 15]]);\n      }));\n      function getStatistics() {\n        return _getStatistics.apply(this, arguments);\n      }\n      return getStatistics;\n    }()\n    /**\n     * The Get Account Information operation returns the sku name and account kind\n     * for the specified account.\n     * The Get Account Information operation is available on service versions beginning\n     * with version 2018-03-28.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-account-information\n     *\n     * @param options - Options to the Service Get Account Info operation.\n     * @returns Response data for the Service Get Account Info operation.\n     */\n  }, {\n    key: \"getAccountInfo\",\n    value: function () {\n      var _getAccountInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        var options,\n          _createSpan8,\n          span,\n          updatedOptions,\n          _args8 = arguments;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                options = _args8.length > 0 && _args8[0] !== undefined ? _args8[0] : {};\n                _createSpan8 = createSpan(\"BlobServiceClient-getAccountInfo\", options), span = _createSpan8.span, updatedOptions = _createSpan8.updatedOptions;\n                _context8.prev = 2;\n                _context8.next = 5;\n                return this.serviceContext.getAccountInfo(Object.assign({\n                  abortSignal: options.abortSignal\n                }, convertTracingToRequestOptionsBase(updatedOptions)));\n              case 5:\n                return _context8.abrupt(\"return\", _context8.sent);\n              case 8:\n                _context8.prev = 8;\n                _context8.t0 = _context8[\"catch\"](2);\n                span.setStatus({\n                  code: SpanStatusCode.ERROR,\n                  message: _context8.t0.message\n                });\n                throw _context8.t0;\n              case 12:\n                _context8.prev = 12;\n                span.end();\n                return _context8.finish(12);\n              case 15:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this, [[2, 8, 12, 15]]);\n      }));\n      function getAccountInfo() {\n        return _getAccountInfo.apply(this, arguments);\n      }\n      return getAccountInfo;\n    }()\n    /**\n     * Returns a list of the containers under the specified account.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/list-containers2\n     *\n     * @param marker - A string value that identifies the portion of\n     *                        the list of containers to be returned with the next listing operation. The\n     *                        operation returns the continuationToken value within the response body if the\n     *                        listing operation did not return all containers remaining to be listed\n     *                        with the current page. The continuationToken value can be used as the value for\n     *                        the marker parameter in a subsequent call to request the next page of list\n     *                        items. The marker value is opaque to the client.\n     * @param options - Options to the Service List Container Segment operation.\n     * @returns Response data for the Service List Container Segment operation.\n     */\n  }, {\n    key: \"listContainersSegment\",\n    value: function () {\n      var _listContainersSegment = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(marker) {\n        var options,\n          _createSpan9,\n          span,\n          updatedOptions,\n          _args9 = arguments;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                options = _args9.length > 1 && _args9[1] !== undefined ? _args9[1] : {};\n                _createSpan9 = createSpan(\"BlobServiceClient-listContainersSegment\", options), span = _createSpan9.span, updatedOptions = _createSpan9.updatedOptions;\n                _context9.prev = 2;\n                _context9.next = 5;\n                return this.serviceContext.listContainersSegment(Object.assign(Object.assign(Object.assign({\n                  abortSignal: options.abortSignal,\n                  marker: marker\n                }, options), {\n                  include: typeof options.include === \"string\" ? [options.include] : options.include\n                }), convertTracingToRequestOptionsBase(updatedOptions)));\n              case 5:\n                return _context9.abrupt(\"return\", _context9.sent);\n              case 8:\n                _context9.prev = 8;\n                _context9.t0 = _context9[\"catch\"](2);\n                span.setStatus({\n                  code: SpanStatusCode.ERROR,\n                  message: _context9.t0.message\n                });\n                throw _context9.t0;\n              case 12:\n                _context9.prev = 12;\n                span.end();\n                return _context9.finish(12);\n              case 15:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this, [[2, 8, 12, 15]]);\n      }));\n      function listContainersSegment(_x8) {\n        return _listContainersSegment.apply(this, arguments);\n      }\n      return listContainersSegment;\n    }()\n    /**\n     * The Filter Blobs operation enables callers to list blobs across all containers whose tags\n     * match a given search expression. Filter blobs searches across all containers within a\n     * storage account but can be scoped within the expression to a single container.\n     *\n     * @param tagFilterSqlExpression - The where parameter enables the caller to query blobs whose tags match a given expression.\n     *                                        The given expression must evaluate to true for a blob to be returned in the results.\n     *                                        The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;\n     *                                        however, only a subset of the OData filter syntax is supported in the Blob service.\n     * @param marker - A string value that identifies the portion of\n     *                          the list of blobs to be returned with the next listing operation. The\n     *                          operation returns the continuationToken value within the response body if the\n     *                          listing operation did not return all blobs remaining to be listed\n     *                          with the current page. The continuationToken value can be used as the value for\n     *                          the marker parameter in a subsequent call to request the next page of list\n     *                          items. The marker value is opaque to the client.\n     * @param options - Options to find blobs by tags.\n     */\n  }, {\n    key: \"findBlobsByTagsSegment\",\n    value: function () {\n      var _findBlobsByTagsSegment = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(tagFilterSqlExpression, marker) {\n        var options,\n          _createSpan10,\n          span,\n          updatedOptions,\n          response,\n          wrappedResponse,\n          _args10 = arguments;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                options = _args10.length > 2 && _args10[2] !== undefined ? _args10[2] : {};\n                _createSpan10 = createSpan(\"BlobServiceClient-findBlobsByTagsSegment\", options), span = _createSpan10.span, updatedOptions = _createSpan10.updatedOptions;\n                _context10.prev = 2;\n                _context10.next = 5;\n                return this.serviceContext.filterBlobs(Object.assign({\n                  abortSignal: options.abortSignal,\n                  where: tagFilterSqlExpression,\n                  marker: marker,\n                  maxPageSize: options.maxPageSize\n                }, convertTracingToRequestOptionsBase(updatedOptions)));\n              case 5:\n                response = _context10.sent;\n                wrappedResponse = Object.assign(Object.assign({}, response), {\n                  _response: response._response,\n                  blobs: response.blobs.map(function (blob) {\n                    var _a;\n                    var tagValue = \"\";\n                    if (((_a = blob.tags) === null || _a === void 0 ? void 0 : _a.blobTagSet.length) === 1) {\n                      tagValue = blob.tags.blobTagSet[0].value;\n                    }\n                    return Object.assign(Object.assign({}, blob), {\n                      tags: toTags(blob.tags),\n                      tagValue: tagValue\n                    });\n                  })\n                });\n                return _context10.abrupt(\"return\", wrappedResponse);\n              case 10:\n                _context10.prev = 10;\n                _context10.t0 = _context10[\"catch\"](2);\n                span.setStatus({\n                  code: SpanStatusCode.ERROR,\n                  message: _context10.t0.message\n                });\n                throw _context10.t0;\n              case 14:\n                _context10.prev = 14;\n                span.end();\n                return _context10.finish(14);\n              case 17:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this, [[2, 10, 14, 17]]);\n      }));\n      function findBlobsByTagsSegment(_x9, _x10) {\n        return _findBlobsByTagsSegment.apply(this, arguments);\n      }\n      return findBlobsByTagsSegment;\n    }()\n    /**\n     * Returns an AsyncIterableIterator for ServiceFindBlobsByTagsSegmentResponse.\n     *\n     * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.\n     *                                         The given expression must evaluate to true for a blob to be returned in the results.\n     *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;\n     *                                         however, only a subset of the OData filter syntax is supported in the Blob service.\n     * @param marker - A string value that identifies the portion of\n     *                          the list of blobs to be returned with the next listing operation. The\n     *                          operation returns the continuationToken value within the response body if the\n     *                          listing operation did not return all blobs remaining to be listed\n     *                          with the current page. The continuationToken value can be used as the value for\n     *                          the marker parameter in a subsequent call to request the next page of list\n     *                          items. The marker value is opaque to the client.\n     * @param options - Options to find blobs by tags.\n     */\n  }, {\n    key: \"findBlobsByTagsSegments\",\n    value: function findBlobsByTagsSegments(tagFilterSqlExpression, marker) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return __asyncGenerator(this, arguments, /*#__PURE__*/_regeneratorRuntime().mark(function findBlobsByTagsSegments_1() {\n        var response;\n        return _regeneratorRuntime().wrap(function findBlobsByTagsSegments_1$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                if (!(!!marker || marker === undefined)) {\n                  _context11.next = 11;\n                  break;\n                }\n              case 1:\n                _context11.next = 3;\n                return __await(this.findBlobsByTagsSegment(tagFilterSqlExpression, marker, options));\n              case 3:\n                response = _context11.sent;\n                response.blobs = response.blobs || [];\n                marker = response.continuationToken;\n                _context11.next = 8;\n                return __await(response);\n              case 8:\n                _context11.next = 10;\n                return _context11.sent;\n              case 10:\n                if (marker) {\n                  _context11.next = 1;\n                  break;\n                }\n              case 11:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, findBlobsByTagsSegments_1, this);\n      }));\n    }\n    /**\n     * Returns an AsyncIterableIterator for blobs.\n     *\n     * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.\n     *                                         The given expression must evaluate to true for a blob to be returned in the results.\n     *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;\n     *                                         however, only a subset of the OData filter syntax is supported in the Blob service.\n     * @param options - Options to findBlobsByTagsItems.\n     */\n  }, {\n    key: \"findBlobsByTagsItems\",\n    value: function findBlobsByTagsItems(tagFilterSqlExpression) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __asyncGenerator(this, arguments, /*#__PURE__*/_regeneratorRuntime().mark(function findBlobsByTagsItems_1() {\n        var e_1, _a, marker, _b, _c, segment;\n        return _regeneratorRuntime().wrap(function findBlobsByTagsItems_1$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                _context12.prev = 0;\n                _b = __asyncValues(this.findBlobsByTagsSegments(tagFilterSqlExpression, marker, options));\n              case 2:\n                _context12.next = 4;\n                return __await(_b.next());\n              case 4:\n                _c = _context12.sent;\n                if (_c.done) {\n                  _context12.next = 14;\n                  break;\n                }\n                segment = _c.value;\n                _context12.t0 = __await;\n                return _context12.delegateYield(__asyncDelegator(__asyncValues(segment.blobs)), \"t1\", 9);\n              case 9:\n                _context12.t2 = _context12.t1;\n                _context12.next = 12;\n                return (0, _context12.t0)(_context12.t2);\n              case 12:\n                _context12.next = 2;\n                break;\n              case 14:\n                _context12.next = 19;\n                break;\n              case 16:\n                _context12.prev = 16;\n                _context12.t3 = _context12[\"catch\"](0);\n                e_1 = {\n                  error: _context12.t3\n                };\n              case 19:\n                _context12.prev = 19;\n                _context12.prev = 20;\n                if (!(_c && !_c.done && (_a = _b.return))) {\n                  _context12.next = 24;\n                  break;\n                }\n                _context12.next = 24;\n                return __await(_a.call(_b));\n              case 24:\n                _context12.prev = 24;\n                if (!e_1) {\n                  _context12.next = 27;\n                  break;\n                }\n                throw e_1.error;\n              case 27:\n                return _context12.finish(24);\n              case 28:\n                return _context12.finish(19);\n              case 29:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, findBlobsByTagsItems_1, this, [[0, 16, 19, 29], [20,, 24, 28]]);\n      }));\n    }\n    /**\n     * Returns an async iterable iterator to find all blobs with specified tag\n     * under the specified account.\n     *\n     * .byPage() returns an async iterable iterator to list the blobs in pages.\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-service-properties\n     *\n     * Example using `for await` syntax:\n     *\n     * ```js\n     * let i = 1;\n     * for await (const blob of blobServiceClient.findBlobsByTags(\"tagkey='tagvalue'\")) {\n     *   console.log(`Blob ${i++}: ${container.name}`);\n     * }\n     * ```\n     *\n     * Example using `iter.next()`:\n     *\n     * ```js\n     * let i = 1;\n     * const iter = blobServiceClient.findBlobsByTags(\"tagkey='tagvalue'\");\n     * let blobItem = await iter.next();\n     * while (!blobItem.done) {\n     *   console.log(`Blob ${i++}: ${blobItem.value.name}`);\n     *   blobItem = await iter.next();\n     * }\n     * ```\n     *\n     * Example using `byPage()`:\n     *\n     * ```js\n     * // passing optional maxPageSize in the page settings\n     * let i = 1;\n     * for await (const response of blobServiceClient.findBlobsByTags(\"tagkey='tagvalue'\").byPage({ maxPageSize: 20 })) {\n     *   if (response.blobs) {\n     *     for (const blob of response.blobs) {\n     *       console.log(`Blob ${i++}: ${blob.name}`);\n     *     }\n     *   }\n     * }\n     * ```\n     *\n     * Example using paging with a marker:\n     *\n     * ```js\n     * let i = 1;\n     * let iterator = blobServiceClient.findBlobsByTags(\"tagkey='tagvalue'\").byPage({ maxPageSize: 2 });\n     * let response = (await iterator.next()).value;\n     *\n     * // Prints 2 blob names\n     * if (response.blobs) {\n     *   for (const blob of response.blobs) {\n     *     console.log(`Blob ${i++}: ${blob.name}`);\n     *   }\n     * }\n     *\n     * // Gets next marker\n     * let marker = response.continuationToken;\n     * // Passing next marker as continuationToken\n     * iterator = blobServiceClient\n     *   .findBlobsByTags(\"tagkey='tagvalue'\")\n     *   .byPage({ continuationToken: marker, maxPageSize: 10 });\n     * response = (await iterator.next()).value;\n     *\n     * // Prints blob names\n     * if (response.blobs) {\n     *   for (const blob of response.blobs) {\n     *      console.log(`Blob ${i++}: ${blob.name}`);\n     *   }\n     * }\n     * ```\n     *\n     * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.\n     *                                         The given expression must evaluate to true for a blob to be returned in the results.\n     *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;\n     *                                         however, only a subset of the OData filter syntax is supported in the Blob service.\n     * @param options - Options to find blobs by tags.\n     */\n  }, {\n    key: \"findBlobsByTags\",\n    value: function findBlobsByTags(tagFilterSqlExpression) {\n      var _this2 = this,\n        _ref;\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      // AsyncIterableIterator to iterate over blobs\n      var listSegmentOptions = Object.assign({}, options);\n      var iter = this.findBlobsByTagsItems(tagFilterSqlExpression, listSegmentOptions);\n      return _ref = {\n        /**\n         * The next method, part of the iteration protocol\n         */\n        next: function next() {\n          return iter.next();\n        }\n      }, _defineProperty(_ref, Symbol.asyncIterator, function () {\n        return this;\n      }), _defineProperty(_ref, \"byPage\", function byPage() {\n        var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return _this2.findBlobsByTagsSegments(tagFilterSqlExpression, settings.continuationToken, Object.assign({\n          maxPageSize: settings.maxPageSize\n        }, listSegmentOptions));\n      }), _ref;\n    }\n    /**\n     * Returns an AsyncIterableIterator for ServiceListContainersSegmentResponses\n     *\n     * @param marker - A string value that identifies the portion of\n     *                        the list of containers to be returned with the next listing operation. The\n     *                        operation returns the continuationToken value within the response body if the\n     *                        listing operation did not return all containers remaining to be listed\n     *                        with the current page. The continuationToken value can be used as the value for\n     *                        the marker parameter in a subsequent call to request the next page of list\n     *                        items. The marker value is opaque to the client.\n     * @param options - Options to list containers operation.\n     */\n  }, {\n    key: \"listSegments\",\n    value: function listSegments(marker) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __asyncGenerator(this, arguments, /*#__PURE__*/_regeneratorRuntime().mark(function listSegments_1() {\n        var listContainersSegmentResponse;\n        return _regeneratorRuntime().wrap(function listSegments_1$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                if (!(!!marker || marker === undefined)) {\n                  _context13.next = 15;\n                  break;\n                }\n              case 1:\n                _context13.next = 3;\n                return __await(this.listContainersSegment(marker, options));\n              case 3:\n                listContainersSegmentResponse = _context13.sent;\n                listContainersSegmentResponse.containerItems = listContainersSegmentResponse.containerItems || [];\n                marker = listContainersSegmentResponse.continuationToken;\n                _context13.t0 = __await;\n                _context13.next = 9;\n                return __await(listContainersSegmentResponse);\n              case 9:\n                _context13.t1 = _context13.sent;\n                _context13.next = 12;\n                return (0, _context13.t0)(_context13.t1);\n              case 12:\n                _context13.next = 14;\n                return _context13.sent;\n              case 14:\n                if (marker) {\n                  _context13.next = 1;\n                  break;\n                }\n              case 15:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, listSegments_1, this);\n      }));\n    }\n    /**\n     * Returns an AsyncIterableIterator for Container Items\n     *\n     * @param options - Options to list containers operation.\n     */\n  }, {\n    key: \"listItems\",\n    value: function listItems() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return __asyncGenerator(this, arguments, /*#__PURE__*/_regeneratorRuntime().mark(function listItems_1() {\n        var e_2, _a, marker, _b, _c, segment;\n        return _regeneratorRuntime().wrap(function listItems_1$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                _context14.prev = 0;\n                _b = __asyncValues(this.listSegments(marker, options));\n              case 2:\n                _context14.next = 4;\n                return __await(_b.next());\n              case 4:\n                _c = _context14.sent;\n                if (_c.done) {\n                  _context14.next = 14;\n                  break;\n                }\n                segment = _c.value;\n                _context14.t0 = __await;\n                return _context14.delegateYield(__asyncDelegator(__asyncValues(segment.containerItems)), \"t1\", 9);\n              case 9:\n                _context14.t2 = _context14.t1;\n                _context14.next = 12;\n                return (0, _context14.t0)(_context14.t2);\n              case 12:\n                _context14.next = 2;\n                break;\n              case 14:\n                _context14.next = 19;\n                break;\n              case 16:\n                _context14.prev = 16;\n                _context14.t3 = _context14[\"catch\"](0);\n                e_2 = {\n                  error: _context14.t3\n                };\n              case 19:\n                _context14.prev = 19;\n                _context14.prev = 20;\n                if (!(_c && !_c.done && (_a = _b.return))) {\n                  _context14.next = 24;\n                  break;\n                }\n                _context14.next = 24;\n                return __await(_a.call(_b));\n              case 24:\n                _context14.prev = 24;\n                if (!e_2) {\n                  _context14.next = 27;\n                  break;\n                }\n                throw e_2.error;\n              case 27:\n                return _context14.finish(24);\n              case 28:\n                return _context14.finish(19);\n              case 29:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, listItems_1, this, [[0, 16, 19, 29], [20,, 24, 28]]);\n      }));\n    }\n    /**\n     * Returns an async iterable iterator to list all the containers\n     * under the specified account.\n     *\n     * .byPage() returns an async iterable iterator to list the containers in pages.\n     *\n     * Example using `for await` syntax:\n     *\n     * ```js\n     * let i = 1;\n     * for await (const container of blobServiceClient.listContainers()) {\n     *   console.log(`Container ${i++}: ${container.name}`);\n     * }\n     * ```\n     *\n     * Example using `iter.next()`:\n     *\n     * ```js\n     * let i = 1;\n     * const iter = blobServiceClient.listContainers();\n     * let containerItem = await iter.next();\n     * while (!containerItem.done) {\n     *   console.log(`Container ${i++}: ${containerItem.value.name}`);\n     *   containerItem = await iter.next();\n     * }\n     * ```\n     *\n     * Example using `byPage()`:\n     *\n     * ```js\n     * // passing optional maxPageSize in the page settings\n     * let i = 1;\n     * for await (const response of blobServiceClient.listContainers().byPage({ maxPageSize: 20 })) {\n     *   if (response.containerItems) {\n     *     for (const container of response.containerItems) {\n     *       console.log(`Container ${i++}: ${container.name}`);\n     *     }\n     *   }\n     * }\n     * ```\n     *\n     * Example using paging with a marker:\n     *\n     * ```js\n     * let i = 1;\n     * let iterator = blobServiceClient.listContainers().byPage({ maxPageSize: 2 });\n     * let response = (await iterator.next()).value;\n     *\n     * // Prints 2 container names\n     * if (response.containerItems) {\n     *   for (const container of response.containerItems) {\n     *     console.log(`Container ${i++}: ${container.name}`);\n     *   }\n     * }\n     *\n     * // Gets next marker\n     * let marker = response.continuationToken;\n     * // Passing next marker as continuationToken\n     * iterator = blobServiceClient\n     *   .listContainers()\n     *   .byPage({ continuationToken: marker, maxPageSize: 10 });\n     * response = (await iterator.next()).value;\n     *\n     * // Prints 10 container names\n     * if (response.containerItems) {\n     *   for (const container of response.containerItems) {\n     *      console.log(`Container ${i++}: ${container.name}`);\n     *   }\n     * }\n     * ```\n     *\n     * @param options - Options to list containers.\n     * @returns An asyncIterableIterator that supports paging.\n     */\n  }, {\n    key: \"listContainers\",\n    value: function listContainers() {\n      var _this3 = this,\n        _ref2;\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      if (options.prefix === \"\") {\n        options.prefix = undefined;\n      }\n      var include = [];\n      if (options.includeDeleted) {\n        include.push(\"deleted\");\n      }\n      if (options.includeMetadata) {\n        include.push(\"metadata\");\n      }\n      if (options.includeSystem) {\n        include.push(\"system\");\n      }\n      // AsyncIterableIterator to iterate over containers\n      var listSegmentOptions = Object.assign(Object.assign({}, options), include.length > 0 ? {\n        include: include\n      } : {});\n      var iter = this.listItems(listSegmentOptions);\n      return _ref2 = {\n        /**\n         * The next method, part of the iteration protocol\n         */\n        next: function next() {\n          return iter.next();\n        }\n      }, _defineProperty(_ref2, Symbol.asyncIterator, function () {\n        return this;\n      }), _defineProperty(_ref2, \"byPage\", function byPage() {\n        var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return _this3.listSegments(settings.continuationToken, Object.assign({\n          maxPageSize: settings.maxPageSize\n        }, listSegmentOptions));\n      }), _ref2;\n    }\n    /**\n     * ONLY AVAILABLE WHEN USING BEARER TOKEN AUTHENTICATION (TokenCredential).\n     *\n     * Retrieves a user delegation key for the Blob service. This is only a valid operation when using\n     * bearer token authentication.\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-user-delegation-key\n     *\n     * @param startsOn -      The start time for the user delegation SAS. Must be within 7 days of the current time\n     * @param expiresOn -     The end time for the user delegation SAS. Must be within 7 days of the current time\n     */\n  }, {\n    key: \"getUserDelegationKey\",\n    value: function () {\n      var _getUserDelegationKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(startsOn, expiresOn) {\n        var options,\n          _createSpan11,\n          span,\n          updatedOptions,\n          response,\n          userDelegationKey,\n          res,\n          _args15 = arguments;\n        return _regeneratorRuntime().wrap(function _callee11$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                options = _args15.length > 2 && _args15[2] !== undefined ? _args15[2] : {};\n                _createSpan11 = createSpan(\"BlobServiceClient-getUserDelegationKey\", options), span = _createSpan11.span, updatedOptions = _createSpan11.updatedOptions;\n                _context15.prev = 2;\n                _context15.next = 5;\n                return this.serviceContext.getUserDelegationKey({\n                  startsOn: truncatedISO8061Date(startsOn, false),\n                  expiresOn: truncatedISO8061Date(expiresOn, false)\n                }, Object.assign({\n                  abortSignal: options.abortSignal\n                }, convertTracingToRequestOptionsBase(updatedOptions)));\n              case 5:\n                response = _context15.sent;\n                userDelegationKey = {\n                  signedObjectId: response.signedObjectId,\n                  signedTenantId: response.signedTenantId,\n                  signedStartsOn: new Date(response.signedStartsOn),\n                  signedExpiresOn: new Date(response.signedExpiresOn),\n                  signedService: response.signedService,\n                  signedVersion: response.signedVersion,\n                  value: response.value\n                };\n                res = Object.assign({\n                  _response: response._response,\n                  requestId: response.requestId,\n                  clientRequestId: response.clientRequestId,\n                  version: response.version,\n                  date: response.date,\n                  errorCode: response.errorCode\n                }, userDelegationKey);\n                return _context15.abrupt(\"return\", res);\n              case 11:\n                _context15.prev = 11;\n                _context15.t0 = _context15[\"catch\"](2);\n                span.setStatus({\n                  code: SpanStatusCode.ERROR,\n                  message: _context15.t0.message\n                });\n                throw _context15.t0;\n              case 15:\n                _context15.prev = 15;\n                span.end();\n                return _context15.finish(15);\n              case 18:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee11, this, [[2, 11, 15, 18]]);\n      }));\n      function getUserDelegationKey(_x11, _x12) {\n        return _getUserDelegationKey.apply(this, arguments);\n      }\n      return getUserDelegationKey;\n    }()\n    /**\n     * Creates a BlobBatchClient object to conduct batch operations.\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch\n     *\n     * @returns A new BlobBatchClient object for this service.\n     */\n  }, {\n    key: \"getBlobBatchClient\",\n    value: function getBlobBatchClient() {\n      return new BlobBatchClient(this.url, this.pipeline);\n    }\n    /**\n     * Only available for BlobServiceClient constructed with a shared key credential.\n     *\n     * Generates a Blob account Shared Access Signature (SAS) URI based on the client properties\n     * and parameters passed in. The SAS is signed by the shared key credential of the client.\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-account-sas\n     *\n     * @param expiresOn - Optional. The time at which the shared access signature becomes invalid. Default to an hour later if not provided.\n     * @param permissions - Specifies the list of permissions to be associated with the SAS.\n     * @param resourceTypes - Specifies the resource types associated with the shared access signature.\n     * @param options - Optional parameters.\n     * @returns An account SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.\n     */\n  }, {\n    key: \"generateAccountSasUrl\",\n    value: function generateAccountSasUrl(expiresOn) {\n      var permissions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : AccountSASPermissions.parse(\"r\");\n      var resourceTypes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"sco\";\n      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      if (!(this.credential instanceof StorageSharedKeyCredential)) {\n        throw RangeError(\"Can only generate the account SAS when the client is initialized with a shared key credential\");\n      }\n      if (expiresOn === undefined) {\n        var now = new Date();\n        expiresOn = new Date(now.getTime() + 3600 * 1000);\n      }\n      var sas = generateAccountSASQueryParameters(Object.assign({\n        permissions: permissions,\n        expiresOn: expiresOn,\n        resourceTypes: resourceTypes,\n        services: AccountSASServices.parse(\"b\").toString()\n      }, options), this.credential).toString();\n      return appendToURLQuery(this.url, sas);\n    }\n  }], [{\n    key: \"fromConnectionString\",\n    value: function fromConnectionString(connectionString,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options) {\n      options = options || {};\n      var extractedCreds = extractConnectionStringParts(connectionString);\n      if (extractedCreds.kind === \"AccountConnString\") {\n        if (isNode) {\n          var sharedKeyCredential = new StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);\n          if (!options.proxyOptions) {\n            options.proxyOptions = getDefaultProxySettings(extractedCreds.proxyUri);\n          }\n          var pipeline = newPipeline(sharedKeyCredential, options);\n          return new BlobServiceClient(extractedCreds.url, pipeline);\n        } else {\n          throw new Error(\"Account connection string is only supported in Node.js environment\");\n        }\n      } else if (extractedCreds.kind === \"SASConnString\") {\n        var _pipeline = newPipeline(new AnonymousCredential(), options);\n        return new BlobServiceClient(extractedCreds.url + \"?\" + extractedCreds.accountSas, _pipeline);\n      } else {\n        throw new Error(\"Connection string must be either an Account connection string or a SAS connection string\");\n      }\n    }\n  }]);\n  return BlobServiceClient;\n}(StorageClient);","map":{"version":3,"mappings":"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","names":["isTokenCredential","isNode","getDefaultProxySettings","SpanStatusCode","Container","Service","newPipeline","isPipelineLike","ContainerClient","appendToURLPath","appendToURLQuery","extractConnectionStringParts","toTags","StorageSharedKeyCredential","AnonymousCredential","truncatedISO8061Date","convertTracingToRequestOptionsBase","createSpan","BlobBatchClient","StorageClient","AccountSASPermissions","generateAccountSASQueryParameters","AccountSASServices","BlobServiceClient","url","credentialOrPipeline","options","pipeline","serviceContext","storageClientContext","containerName","encodeURIComponent","span","updatedOptions","containerClient","getContainerClient","create","containerCreateResponse","setStatus","code","ERROR","message","end","delete","deletedContainerName","deletedContainerVersion","destinationContainerName","containerContext","restore","containerUndeleteResponse","sourceContainerName","rename","sourceLeaseId","sourceCondition","leaseId","containerRenameResponse","getProperties","abortSignal","properties","setProperties","getStatistics","getAccountInfo","marker","listContainersSegment","include","tagFilterSqlExpression","filterBlobs","where","maxPageSize","response","wrappedResponse","_response","blobs","map","blob","tagValue","tags","blobTagSet","length","value","undefined","findBlobsByTagsSegment","continuationToken","_b","findBlobsByTagsSegments","_c","segment","__await","__asyncDelegator","listSegmentOptions","iter","findBlobsByTagsItems","next","Symbol","asyncIterator","settings","listContainersSegmentResponse","containerItems","listSegments","prefix","includeDeleted","push","includeMetadata","includeSystem","listItems","startsOn","expiresOn","getUserDelegationKey","userDelegationKey","signedObjectId","signedTenantId","signedStartsOn","Date","signedExpiresOn","signedService","signedVersion","res","requestId","clientRequestId","version","date","errorCode","permissions","parse","resourceTypes","credential","RangeError","now","getTime","sas","services","toString","connectionString","extractedCreds","kind","sharedKeyCredential","accountName","accountKey","proxyOptions","proxyUri","Error","accountSas"],"sourceRoot":"","sources":["../../../src/BlobServiceClient.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport {\n  TokenCredential,\n  isTokenCredential,\n  isNode,\n  HttpResponse,\n  getDefaultProxySettings,\n} from \"@azure/core-http\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport {\n  ServiceGetUserDelegationKeyHeaders,\n  ContainerCreateResponse,\n  ContainerDeleteResponse,\n  ServiceGetPropertiesResponse,\n  BlobServiceProperties,\n  ServiceSetPropertiesResponse,\n  ServiceGetStatisticsResponse,\n  ServiceGetAccountInfoResponse,\n  ServiceListContainersSegmentResponse,\n  ContainerItem,\n  UserDelegationKeyModel,\n  ContainerUndeleteResponse,\n  FilterBlobSegmentModel,\n  ServiceFilterBlobsHeaders,\n  ContainerRenameResponse,\n  LeaseAccessConditions,\n  FilterBlobSegment,\n  FilterBlobItem,\n} from \"./generatedModels\";\nimport { Container, Service } from \"./generated/src/operations\";\nimport { newPipeline, StoragePipelineOptions, PipelineLike, isPipelineLike } from \"./Pipeline\";\nimport {\n  ContainerClient,\n  ContainerCreateOptions,\n  ContainerDeleteMethodOptions,\n} from \"./ContainerClient\";\nimport {\n  appendToURLPath,\n  appendToURLQuery,\n  extractConnectionStringParts,\n  toTags,\n} from \"./utils/utils.common\";\nimport { StorageSharedKeyCredential } from \"./credentials/StorageSharedKeyCredential\";\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\nimport \"@azure/core-paging\";\nimport { PageSettings, PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport { truncatedISO8061Date } from \"./utils/utils.common\";\nimport { convertTracingToRequestOptionsBase, createSpan } from \"./utils/tracing\";\nimport { BlobBatchClient } from \"./BlobBatchClient\";\nimport { CommonOptions, StorageClient } from \"./StorageClient\";\nimport { AccountSASPermissions } from \"./sas/AccountSASPermissions\";\nimport { SASProtocol } from \"./sas/SASQueryParameters\";\nimport { SasIPRange } from \"./sas/SasIPRange\";\nimport { generateAccountSASQueryParameters } from \"./sas/AccountSASSignatureValues\";\nimport { AccountSASServices } from \"./sas/AccountSASServices\";\nimport { ListContainersIncludeType } from \"./generated/src\";\n\n/**\n * Options to configure the {@link BlobServiceClient.getProperties} operation.\n */\nexport interface ServiceGetPropertiesOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Options to configure the {@link BlobServiceClient.setProperties} operation.\n */\nexport interface ServiceSetPropertiesOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Options to configure the {@link BlobServiceClient.getAccountInfo} operation.\n */\nexport interface ServiceGetAccountInfoOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Options to configure the {@link BlobServiceClient.getStatistics} operation.\n */\nexport interface ServiceGetStatisticsOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Options to configure the Service - Get User Delegation Key.\n */\nexport interface ServiceGetUserDelegationKeyOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Options to configure the {@link BlobServiceClient.listContainerSegment} operation.\n */\ninterface ServiceListContainersSegmentOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Filters the results to return only containers\n   * whose name begins with the specified prefix.\n   */\n  prefix?: string;\n  /**\n   * Specifies the maximum number of containers\n   * to return. If the request does not specify maxPageSize, or specifies a\n   * value greater than 5000, the server will return up to 5000 items. Note\n   * that if the listing operation crosses a partition boundary, then the\n   * service will return a continuation token for retrieving the remainder of\n   * the results. For this reason, it is possible that the service will return\n   * fewer results than specified by maxPageSize, or than the default of 5000.\n   */\n  maxPageSize?: number;\n  /**\n   * Include this parameter to\n   * specify that the container's metadata be returned as part of the response\n   * body. Possible values include: 'metadata'\n   */\n  include?: ListContainersIncludeType | ListContainersIncludeType[];\n}\n\n/**\n * Options to configure the {@link BlobServiceClient.listContainers} operation.\n */\nexport interface ServiceListContainersOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Filters the results to return only containers\n   * whose name begins with the specified prefix.\n   */\n  prefix?: string;\n  /**\n   * Specifies whether the container's metadata\n   *                                   should be returned as part of the response body.\n   */\n  includeMetadata?: boolean;\n\n  /**\n   * Specifies whether soft deleted containers should be included in the response.\n   */\n  includeDeleted?: boolean;\n  /**\n   * Specifies whether system containers should be included in the response.\n   */\n  includeSystem?: boolean;\n}\n\n/**\n * Options to configure the {@link BlobServiceClient.findBlobsByTagsSegment} operation.\n */\ninterface ServiceFindBlobsByTagsSegmentOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Specifies the maximum number of blobs\n   * to return. If the request does not specify maxPageSize, or specifies a\n   * value greater than 5000, the server will return up to 5000 items. Note\n   * that if the listing operation crosses a partition boundary, then the\n   * service will return a continuation token for retrieving the remainder of\n   * the results. For this reason, it is possible that the service will return\n   * fewer results than specified by maxPageSize, or than the default of 5000.\n   */\n  maxPageSize?: number;\n}\n\n/**\n * Options to configure the {@link BlobServiceClient.findBlobsByTags} operation.\n */\nexport interface ServiceFindBlobByTagsOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * The response of {@link BlobServiceClient.findBlobsByTags} operation.\n */\nexport type ServiceFindBlobsByTagsSegmentResponse = FilterBlobSegment &\n  ServiceFilterBlobsHeaders & {\n    /**\n     * The underlying HTTP response.\n     */\n    _response: HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: ServiceFilterBlobsHeaders;\n\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: FilterBlobSegmentModel;\n    };\n  };\n\n/**\n * A user delegation key.\n */\nexport interface UserDelegationKey {\n  /**\n   * The Azure Active Directory object ID in GUID format.\n   */\n  signedObjectId: string;\n  /**\n   * The Azure Active Directory tenant ID in GUID format.\n   */\n  signedTenantId: string;\n  /**\n   * The date-time the key is active.\n   */\n  signedStartsOn: Date;\n  /**\n   * The date-time the key expires.\n   */\n  signedExpiresOn: Date;\n  /**\n   * Abbreviation of the Azure Storage service that accepts the key.\n   */\n  signedService: string;\n  /**\n   * The service version that created the key.\n   */\n  signedVersion: string;\n  /**\n   * The key as a base64 string.\n   */\n  value: string;\n}\n\n/**\n * Contains response data for the {@link getUserDelegationKey} operation.\n */\nexport declare type ServiceGetUserDelegationKeyResponse = UserDelegationKey &\n  ServiceGetUserDelegationKeyHeaders & {\n    /**\n     * The underlying HTTP response.\n     */\n    _response: HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: ServiceGetUserDelegationKeyHeaders;\n\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: UserDelegationKeyModel;\n    };\n  };\n\n/**\n * Options to configure {@link BlobServiceClient.undeleteContainer} operation.\n */\nexport interface ServiceUndeleteContainerOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Optional. Specifies the new name of the restored container.\n   * Will use its original name if this is not specified.\n   * @deprecated Restore container to a different name is not supported by service anymore.\n   */\n  destinationContainerName?: string;\n}\n\n/**\n * Options to configure {@link BlobServiceClient.renameContainer} operation.\n */\nexport interface ServiceRenameContainerOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n\n  /**\n   * Condition to meet for the source container.\n   */\n  sourceCondition?: LeaseAccessConditions;\n}\n\n/**\n * Options to configure {@link BlobServiceClient.generateAccountSasUrl} operation.\n */\nexport interface ServiceGenerateAccountSasUrlOptions {\n  /**\n   * The version of the service this SAS will target. If not specified, it will default to the version targeted by the\n   * library.\n   */\n  version?: string;\n\n  /**\n   * Optional. SAS protocols allowed.\n   */\n  protocol?: SASProtocol;\n\n  /**\n   * Optional. When the SAS will take effect.\n   */\n  startsOn?: Date;\n  /**\n   * Optional. IP range allowed.\n   */\n  ipRange?: SasIPRange;\n  /**\n   * Optional. Encryption scope to use when sending requests authorized with this SAS URI.\n   */\n  encryptionScope?: string;\n}\n\n/**\n * A BlobServiceClient represents a Client to the Azure Storage Blob service allowing you\n * to manipulate blob containers.\n */\nexport class BlobServiceClient extends StorageClient {\n  /**\n   * serviceContext provided by protocol layer.\n   */\n  private serviceContext: Service;\n\n  /**\n   *\n   * Creates an instance of BlobServiceClient from connection string.\n   *\n   * @param connectionString - Account connection string or a SAS connection string of an Azure storage account.\n   *                                  [ Note - Account connection string can only be used in NODE.JS runtime. ]\n   *                                  Account connection string example -\n   *                                  `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`\n   *                                  SAS connection string example -\n   *                                  `BlobEndpoint=https://myaccount.blob.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   */\n  public static fromConnectionString(\n    connectionString: string,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: StoragePipelineOptions\n  ): BlobServiceClient {\n    options = options || {};\n    const extractedCreds = extractConnectionStringParts(connectionString);\n    if (extractedCreds.kind === \"AccountConnString\") {\n      if (isNode) {\n        const sharedKeyCredential = new StorageSharedKeyCredential(\n          extractedCreds.accountName!,\n          extractedCreds.accountKey\n        );\n\n        if (!options.proxyOptions) {\n          options.proxyOptions = getDefaultProxySettings(extractedCreds.proxyUri);\n        }\n\n        const pipeline = newPipeline(sharedKeyCredential, options);\n        return new BlobServiceClient(extractedCreds.url, pipeline);\n      } else {\n        throw new Error(\"Account connection string is only supported in Node.js environment\");\n      }\n    } else if (extractedCreds.kind === \"SASConnString\") {\n      const pipeline = newPipeline(new AnonymousCredential(), options);\n      return new BlobServiceClient(extractedCreds.url + \"?\" + extractedCreds.accountSas, pipeline);\n    } else {\n      throw new Error(\n        \"Connection string must be either an Account connection string or a SAS connection string\"\n      );\n    }\n  }\n\n  /**\n   * Creates an instance of BlobServiceClient.\n   *\n   * @param url - A Client string pointing to Azure Storage blob service, such as\n   *                     \"https://myaccount.blob.core.windows.net\". You can append a SAS\n   *                     if using AnonymousCredential, such as \"https://myaccount.blob.core.windows.net?sasString\".\n   * @param credential -  Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   *\n   * Example using DefaultAzureCredential from `@azure/identity`:\n   *\n   * ```js\n   * const account = \"<storage account name>\";\n   *\n   * const defaultAzureCredential = new DefaultAzureCredential();\n   *\n   * const blobServiceClient = new BlobServiceClient(\n   *   `https://${account}.blob.core.windows.net`,\n   *   defaultAzureCredential\n   * );\n   * ```\n   *\n   * Example using an account name/key:\n   *\n   * ```js\n   * const account = \"<storage account name>\"\n   * const sharedKeyCredential = new StorageSharedKeyCredential(account, \"<account key>\");\n   *\n   * const blobServiceClient = new BlobServiceClient(\n   *   `https://${account}.blob.core.windows.net`,\n   *   sharedKeyCredential\n   * );\n   * ```\n   */\n  constructor(\n    url: string,\n    credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: StoragePipelineOptions\n  );\n  /**\n   * Creates an instance of BlobServiceClient.\n   *\n   * @param url - A Client string pointing to Azure Storage blob service, such as\n   *                     \"https://myaccount.blob.core.windows.net\". You can append a SAS\n   *                     if using AnonymousCredential, such as \"https://myaccount.blob.core.windows.net?sasString\".\n   * @param pipeline - Call newPipeline() to create a default\n   *                            pipeline, or provide a customized pipeline.\n   */\n  constructor(url: string, pipeline: PipelineLike);\n  constructor(\n    url: string,\n    credentialOrPipeline?:\n      | StorageSharedKeyCredential\n      | AnonymousCredential\n      | TokenCredential\n      | PipelineLike,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: StoragePipelineOptions\n  ) {\n    let pipeline: PipelineLike;\n    if (isPipelineLike(credentialOrPipeline)) {\n      pipeline = credentialOrPipeline;\n    } else if (\n      (isNode && credentialOrPipeline instanceof StorageSharedKeyCredential) ||\n      credentialOrPipeline instanceof AnonymousCredential ||\n      isTokenCredential(credentialOrPipeline)\n    ) {\n      pipeline = newPipeline(credentialOrPipeline, options);\n    } else {\n      // The second parameter is undefined. Use anonymous credential\n      pipeline = newPipeline(new AnonymousCredential(), options);\n    }\n    super(url, pipeline);\n    this.serviceContext = new Service(this.storageClientContext);\n  }\n\n  /**\n   * Creates a {@link ContainerClient} object\n   *\n   * @param containerName - A container name\n   * @returns A new ContainerClient object for the given container name.\n   *\n   * Example usage:\n   *\n   * ```js\n   * const containerClient = blobServiceClient.getContainerClient(\"<container name>\");\n   * ```\n   */\n  public getContainerClient(containerName: string): ContainerClient {\n    return new ContainerClient(\n      appendToURLPath(this.url, encodeURIComponent(containerName)),\n      this.pipeline\n    );\n  }\n\n  /**\n   * Create a Blob container.\n   *\n   * @param containerName - Name of the container to create.\n   * @param options - Options to configure Container Create operation.\n   * @returns Container creation response and the corresponding container client.\n   */\n  public async createContainer(\n    containerName: string,\n    options: ContainerCreateOptions = {}\n  ): Promise<{\n    containerClient: ContainerClient;\n    containerCreateResponse: ContainerCreateResponse;\n  }> {\n    const { span, updatedOptions } = createSpan(\"BlobServiceClient-createContainer\", options);\n    try {\n      const containerClient = this.getContainerClient(containerName);\n      const containerCreateResponse = await containerClient.create(updatedOptions);\n      return {\n        containerClient,\n        containerCreateResponse,\n      };\n    } catch (e: any) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Deletes a Blob container.\n   *\n   * @param containerName - Name of the container to delete.\n   * @param options - Options to configure Container Delete operation.\n   * @returns Container deletion response.\n   */\n  public async deleteContainer(\n    containerName: string,\n    options: ContainerDeleteMethodOptions = {}\n  ): Promise<ContainerDeleteResponse> {\n    const { span, updatedOptions } = createSpan(\"BlobServiceClient-deleteContainer\", options);\n    try {\n      const containerClient = this.getContainerClient(containerName);\n      return await containerClient.delete(updatedOptions);\n    } catch (e: any) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Restore a previously deleted Blob container.\n   * This API is only functional if Container Soft Delete is enabled for the storage account associated with the container.\n   *\n   * @param deletedContainerName - Name of the previously deleted container.\n   * @param deletedContainerVersion - Version of the previously deleted container, used to uniquely identify the deleted container.\n   * @param options - Options to configure Container Restore operation.\n   * @returns Container deletion response.\n   */\n  public async undeleteContainer(\n    deletedContainerName: string,\n    deletedContainerVersion: string,\n    options: ServiceUndeleteContainerOptions = {}\n  ): Promise<{\n    containerClient: ContainerClient;\n    containerUndeleteResponse: ContainerUndeleteResponse;\n  }> {\n    const { span, updatedOptions } = createSpan(\"BlobServiceClient-undeleteContainer\", options);\n    try {\n      const containerClient = this.getContainerClient(\n        options.destinationContainerName || deletedContainerName\n      );\n      // Hack to access a protected member.\n      const containerContext = new Container(containerClient[\"storageClientContext\"]);\n      const containerUndeleteResponse = await containerContext.restore({\n        deletedContainerName,\n        deletedContainerVersion,\n        ...updatedOptions,\n      });\n      return { containerClient, containerUndeleteResponse };\n    } catch (e: any) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Rename an existing Blob Container.\n   *\n   * @param sourceContainerName - The name of the source container.\n   * @param destinationContainerName - The new name of the container.\n   * @param options - Options to configure Container Rename operation.\n   */\n  /* eslint-disable-next-line @typescript-eslint/ban-ts-comment */\n  // @ts-ignore Need to hide this interface for now. Make it public and turn on the live tests for it when the service is ready.\n  private async renameContainer(\n    sourceContainerName: string,\n    destinationContainerName: string,\n    options: ServiceRenameContainerOptions = {}\n  ): Promise<{\n    containerClient: ContainerClient;\n    containerRenameResponse: ContainerRenameResponse;\n  }> {\n    const { span, updatedOptions } = createSpan(\"BlobServiceClient-renameContainer\", options);\n    try {\n      const containerClient = this.getContainerClient(destinationContainerName);\n      // Hack to access a protected member.\n      const containerContext = new Container(containerClient[\"storageClientContext\"]);\n      const containerRenameResponse = await containerContext.rename(sourceContainerName, {\n        ...updatedOptions,\n        sourceLeaseId: options.sourceCondition?.leaseId,\n      });\n      return { containerClient, containerRenameResponse };\n    } catch (e: any) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Gets the properties of a storage account’s Blob service, including properties\n   * for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-service-properties\n   *\n   * @param options - Options to the Service Get Properties operation.\n   * @returns Response data for the Service Get Properties operation.\n   */\n  public async getProperties(\n    options: ServiceGetPropertiesOptions = {}\n  ): Promise<ServiceGetPropertiesResponse> {\n    const { span, updatedOptions } = createSpan(\"BlobServiceClient-getProperties\", options);\n    try {\n      return await this.serviceContext.getProperties({\n        abortSignal: options.abortSignal,\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n    } catch (e: any) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Sets properties for a storage account’s Blob service endpoint, including properties\n   * for Storage Analytics, CORS (Cross-Origin Resource Sharing) rules and soft delete settings.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-service-properties\n   *\n   * @param properties -\n   * @param options - Options to the Service Set Properties operation.\n   * @returns Response data for the Service Set Properties operation.\n   */\n  public async setProperties(\n    properties: BlobServiceProperties,\n    options: ServiceSetPropertiesOptions = {}\n  ): Promise<ServiceSetPropertiesResponse> {\n    const { span, updatedOptions } = createSpan(\"BlobServiceClient-setProperties\", options);\n    try {\n      return await this.serviceContext.setProperties(properties, {\n        abortSignal: options.abortSignal,\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n    } catch (e: any) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Retrieves statistics related to replication for the Blob service. It is only\n   * available on the secondary location endpoint when read-access geo-redundant\n   * replication is enabled for the storage account.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-service-stats\n   *\n   * @param options - Options to the Service Get Statistics operation.\n   * @returns Response data for the Service Get Statistics operation.\n   */\n  public async getStatistics(\n    options: ServiceGetStatisticsOptions = {}\n  ): Promise<ServiceGetStatisticsResponse> {\n    const { span, updatedOptions } = createSpan(\"BlobServiceClient-getStatistics\", options);\n    try {\n      return await this.serviceContext.getStatistics({\n        abortSignal: options.abortSignal,\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n    } catch (e: any) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * The Get Account Information operation returns the sku name and account kind\n   * for the specified account.\n   * The Get Account Information operation is available on service versions beginning\n   * with version 2018-03-28.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-account-information\n   *\n   * @param options - Options to the Service Get Account Info operation.\n   * @returns Response data for the Service Get Account Info operation.\n   */\n  public async getAccountInfo(\n    options: ServiceGetAccountInfoOptions = {}\n  ): Promise<ServiceGetAccountInfoResponse> {\n    const { span, updatedOptions } = createSpan(\"BlobServiceClient-getAccountInfo\", options);\n    try {\n      return await this.serviceContext.getAccountInfo({\n        abortSignal: options.abortSignal,\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n    } catch (e: any) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Returns a list of the containers under the specified account.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/list-containers2\n   *\n   * @param marker - A string value that identifies the portion of\n   *                        the list of containers to be returned with the next listing operation. The\n   *                        operation returns the continuationToken value within the response body if the\n   *                        listing operation did not return all containers remaining to be listed\n   *                        with the current page. The continuationToken value can be used as the value for\n   *                        the marker parameter in a subsequent call to request the next page of list\n   *                        items. The marker value is opaque to the client.\n   * @param options - Options to the Service List Container Segment operation.\n   * @returns Response data for the Service List Container Segment operation.\n   */\n  private async listContainersSegment(\n    marker?: string,\n    options: ServiceListContainersSegmentOptions = {}\n  ): Promise<ServiceListContainersSegmentResponse> {\n    const { span, updatedOptions } = createSpan(\"BlobServiceClient-listContainersSegment\", options);\n\n    try {\n      return await this.serviceContext.listContainersSegment({\n        abortSignal: options.abortSignal,\n        marker,\n        ...options,\n        include: typeof options.include === \"string\" ? [options.include] : options.include,\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n    } catch (e: any) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * The Filter Blobs operation enables callers to list blobs across all containers whose tags\n   * match a given search expression. Filter blobs searches across all containers within a\n   * storage account but can be scoped within the expression to a single container.\n   *\n   * @param tagFilterSqlExpression - The where parameter enables the caller to query blobs whose tags match a given expression.\n   *                                        The given expression must evaluate to true for a blob to be returned in the results.\n   *                                        The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;\n   *                                        however, only a subset of the OData filter syntax is supported in the Blob service.\n   * @param marker - A string value that identifies the portion of\n   *                          the list of blobs to be returned with the next listing operation. The\n   *                          operation returns the continuationToken value within the response body if the\n   *                          listing operation did not return all blobs remaining to be listed\n   *                          with the current page. The continuationToken value can be used as the value for\n   *                          the marker parameter in a subsequent call to request the next page of list\n   *                          items. The marker value is opaque to the client.\n   * @param options - Options to find blobs by tags.\n   */\n  private async findBlobsByTagsSegment(\n    tagFilterSqlExpression: string,\n    marker?: string,\n    options: ServiceFindBlobsByTagsSegmentOptions = {}\n  ): Promise<ServiceFindBlobsByTagsSegmentResponse> {\n    const { span, updatedOptions } = createSpan(\n      \"BlobServiceClient-findBlobsByTagsSegment\",\n      options\n    );\n\n    try {\n      const response = await this.serviceContext.filterBlobs({\n        abortSignal: options.abortSignal,\n        where: tagFilterSqlExpression,\n        marker,\n        maxPageSize: options.maxPageSize,\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n\n      const wrappedResponse: ServiceFindBlobsByTagsSegmentResponse = {\n        ...response,\n        _response: response._response, // _response is made non-enumerable\n        blobs: response.blobs.map((blob) => {\n          let tagValue = \"\";\n          if (blob.tags?.blobTagSet.length === 1) {\n            tagValue = blob.tags.blobTagSet[0].value;\n          }\n          return { ...blob, tags: toTags(blob.tags), tagValue };\n        }),\n      };\n      return wrappedResponse;\n    } catch (e: any) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Returns an AsyncIterableIterator for ServiceFindBlobsByTagsSegmentResponse.\n   *\n   * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.\n   *                                         The given expression must evaluate to true for a blob to be returned in the results.\n   *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;\n   *                                         however, only a subset of the OData filter syntax is supported in the Blob service.\n   * @param marker - A string value that identifies the portion of\n   *                          the list of blobs to be returned with the next listing operation. The\n   *                          operation returns the continuationToken value within the response body if the\n   *                          listing operation did not return all blobs remaining to be listed\n   *                          with the current page. The continuationToken value can be used as the value for\n   *                          the marker parameter in a subsequent call to request the next page of list\n   *                          items. The marker value is opaque to the client.\n   * @param options - Options to find blobs by tags.\n   */\n  private async *findBlobsByTagsSegments(\n    tagFilterSqlExpression: string,\n    marker?: string,\n    options: ServiceFindBlobsByTagsSegmentOptions = {}\n  ): AsyncIterableIterator<ServiceFindBlobsByTagsSegmentResponse> {\n    let response;\n    if (!!marker || marker === undefined) {\n      do {\n        response = await this.findBlobsByTagsSegment(tagFilterSqlExpression, marker, options);\n        response.blobs = response.blobs || [];\n        marker = response.continuationToken;\n        yield response;\n      } while (marker);\n    }\n  }\n\n  /**\n   * Returns an AsyncIterableIterator for blobs.\n   *\n   * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.\n   *                                         The given expression must evaluate to true for a blob to be returned in the results.\n   *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;\n   *                                         however, only a subset of the OData filter syntax is supported in the Blob service.\n   * @param options - Options to findBlobsByTagsItems.\n   */\n  private async *findBlobsByTagsItems(\n    tagFilterSqlExpression: string,\n    options: ServiceFindBlobsByTagsSegmentOptions = {}\n  ): AsyncIterableIterator<FilterBlobItem> {\n    let marker: string | undefined;\n    for await (const segment of this.findBlobsByTagsSegments(\n      tagFilterSqlExpression,\n      marker,\n      options\n    )) {\n      yield* segment.blobs;\n    }\n  }\n\n  /**\n   * Returns an async iterable iterator to find all blobs with specified tag\n   * under the specified account.\n   *\n   * .byPage() returns an async iterable iterator to list the blobs in pages.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-service-properties\n   *\n   * Example using `for await` syntax:\n   *\n   * ```js\n   * let i = 1;\n   * for await (const blob of blobServiceClient.findBlobsByTags(\"tagkey='tagvalue'\")) {\n   *   console.log(`Blob ${i++}: ${container.name}`);\n   * }\n   * ```\n   *\n   * Example using `iter.next()`:\n   *\n   * ```js\n   * let i = 1;\n   * const iter = blobServiceClient.findBlobsByTags(\"tagkey='tagvalue'\");\n   * let blobItem = await iter.next();\n   * while (!blobItem.done) {\n   *   console.log(`Blob ${i++}: ${blobItem.value.name}`);\n   *   blobItem = await iter.next();\n   * }\n   * ```\n   *\n   * Example using `byPage()`:\n   *\n   * ```js\n   * // passing optional maxPageSize in the page settings\n   * let i = 1;\n   * for await (const response of blobServiceClient.findBlobsByTags(\"tagkey='tagvalue'\").byPage({ maxPageSize: 20 })) {\n   *   if (response.blobs) {\n   *     for (const blob of response.blobs) {\n   *       console.log(`Blob ${i++}: ${blob.name}`);\n   *     }\n   *   }\n   * }\n   * ```\n   *\n   * Example using paging with a marker:\n   *\n   * ```js\n   * let i = 1;\n   * let iterator = blobServiceClient.findBlobsByTags(\"tagkey='tagvalue'\").byPage({ maxPageSize: 2 });\n   * let response = (await iterator.next()).value;\n   *\n   * // Prints 2 blob names\n   * if (response.blobs) {\n   *   for (const blob of response.blobs) {\n   *     console.log(`Blob ${i++}: ${blob.name}`);\n   *   }\n   * }\n   *\n   * // Gets next marker\n   * let marker = response.continuationToken;\n   * // Passing next marker as continuationToken\n   * iterator = blobServiceClient\n   *   .findBlobsByTags(\"tagkey='tagvalue'\")\n   *   .byPage({ continuationToken: marker, maxPageSize: 10 });\n   * response = (await iterator.next()).value;\n   *\n   * // Prints blob names\n   * if (response.blobs) {\n   *   for (const blob of response.blobs) {\n   *      console.log(`Blob ${i++}: ${blob.name}`);\n   *   }\n   * }\n   * ```\n   *\n   * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.\n   *                                         The given expression must evaluate to true for a blob to be returned in the results.\n   *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;\n   *                                         however, only a subset of the OData filter syntax is supported in the Blob service.\n   * @param options - Options to find blobs by tags.\n   */\n  public findBlobsByTags(\n    tagFilterSqlExpression: string,\n    options: ServiceFindBlobByTagsOptions = {}\n  ): PagedAsyncIterableIterator<FilterBlobItem, ServiceFindBlobsByTagsSegmentResponse> {\n    // AsyncIterableIterator to iterate over blobs\n    const listSegmentOptions: ServiceFindBlobsByTagsSegmentOptions = {\n      ...options,\n    };\n\n    const iter = this.findBlobsByTagsItems(tagFilterSqlExpression, listSegmentOptions);\n    return {\n      /**\n       * The next method, part of the iteration protocol\n       */\n      next() {\n        return iter.next();\n      },\n      /**\n       * The connection to the async iterator, part of the iteration protocol\n       */\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      /**\n       * Return an AsyncIterableIterator that works a page at a time\n       */\n      byPage: (settings: PageSettings = {}) => {\n        return this.findBlobsByTagsSegments(tagFilterSqlExpression, settings.continuationToken, {\n          maxPageSize: settings.maxPageSize,\n          ...listSegmentOptions,\n        });\n      },\n    };\n  }\n\n  /**\n   * Returns an AsyncIterableIterator for ServiceListContainersSegmentResponses\n   *\n   * @param marker - A string value that identifies the portion of\n   *                        the list of containers to be returned with the next listing operation. The\n   *                        operation returns the continuationToken value within the response body if the\n   *                        listing operation did not return all containers remaining to be listed\n   *                        with the current page. The continuationToken value can be used as the value for\n   *                        the marker parameter in a subsequent call to request the next page of list\n   *                        items. The marker value is opaque to the client.\n   * @param options - Options to list containers operation.\n   */\n  private async *listSegments(\n    marker?: string,\n    options: ServiceListContainersSegmentOptions = {}\n  ): AsyncIterableIterator<ServiceListContainersSegmentResponse> {\n    let listContainersSegmentResponse;\n    if (!!marker || marker === undefined) {\n      do {\n        listContainersSegmentResponse = await this.listContainersSegment(marker, options);\n        listContainersSegmentResponse.containerItems =\n          listContainersSegmentResponse.containerItems || [];\n        marker = listContainersSegmentResponse.continuationToken;\n        yield await listContainersSegmentResponse;\n      } while (marker);\n    }\n  }\n\n  /**\n   * Returns an AsyncIterableIterator for Container Items\n   *\n   * @param options - Options to list containers operation.\n   */\n  private async *listItems(\n    options: ServiceListContainersSegmentOptions = {}\n  ): AsyncIterableIterator<ContainerItem> {\n    let marker: string | undefined;\n    for await (const segment of this.listSegments(marker, options)) {\n      yield* segment.containerItems;\n    }\n  }\n\n  /**\n   * Returns an async iterable iterator to list all the containers\n   * under the specified account.\n   *\n   * .byPage() returns an async iterable iterator to list the containers in pages.\n   *\n   * Example using `for await` syntax:\n   *\n   * ```js\n   * let i = 1;\n   * for await (const container of blobServiceClient.listContainers()) {\n   *   console.log(`Container ${i++}: ${container.name}`);\n   * }\n   * ```\n   *\n   * Example using `iter.next()`:\n   *\n   * ```js\n   * let i = 1;\n   * const iter = blobServiceClient.listContainers();\n   * let containerItem = await iter.next();\n   * while (!containerItem.done) {\n   *   console.log(`Container ${i++}: ${containerItem.value.name}`);\n   *   containerItem = await iter.next();\n   * }\n   * ```\n   *\n   * Example using `byPage()`:\n   *\n   * ```js\n   * // passing optional maxPageSize in the page settings\n   * let i = 1;\n   * for await (const response of blobServiceClient.listContainers().byPage({ maxPageSize: 20 })) {\n   *   if (response.containerItems) {\n   *     for (const container of response.containerItems) {\n   *       console.log(`Container ${i++}: ${container.name}`);\n   *     }\n   *   }\n   * }\n   * ```\n   *\n   * Example using paging with a marker:\n   *\n   * ```js\n   * let i = 1;\n   * let iterator = blobServiceClient.listContainers().byPage({ maxPageSize: 2 });\n   * let response = (await iterator.next()).value;\n   *\n   * // Prints 2 container names\n   * if (response.containerItems) {\n   *   for (const container of response.containerItems) {\n   *     console.log(`Container ${i++}: ${container.name}`);\n   *   }\n   * }\n   *\n   * // Gets next marker\n   * let marker = response.continuationToken;\n   * // Passing next marker as continuationToken\n   * iterator = blobServiceClient\n   *   .listContainers()\n   *   .byPage({ continuationToken: marker, maxPageSize: 10 });\n   * response = (await iterator.next()).value;\n   *\n   * // Prints 10 container names\n   * if (response.containerItems) {\n   *   for (const container of response.containerItems) {\n   *      console.log(`Container ${i++}: ${container.name}`);\n   *   }\n   * }\n   * ```\n   *\n   * @param options - Options to list containers.\n   * @returns An asyncIterableIterator that supports paging.\n   */\n  public listContainers(\n    options: ServiceListContainersOptions = {}\n  ): PagedAsyncIterableIterator<ContainerItem, ServiceListContainersSegmentResponse> {\n    if (options.prefix === \"\") {\n      options.prefix = undefined;\n    }\n\n    const include: ListContainersIncludeType[] = [];\n    if (options.includeDeleted) {\n      include.push(\"deleted\");\n    }\n    if (options.includeMetadata) {\n      include.push(\"metadata\");\n    }\n    if (options.includeSystem) {\n      include.push(\"system\");\n    }\n\n    // AsyncIterableIterator to iterate over containers\n    const listSegmentOptions: ServiceListContainersSegmentOptions = {\n      ...options,\n      ...(include.length > 0 ? { include } : {}),\n    };\n\n    const iter = this.listItems(listSegmentOptions);\n    return {\n      /**\n       * The next method, part of the iteration protocol\n       */\n      next() {\n        return iter.next();\n      },\n      /**\n       * The connection to the async iterator, part of the iteration protocol\n       */\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      /**\n       * Return an AsyncIterableIterator that works a page at a time\n       */\n      byPage: (settings: PageSettings = {}) => {\n        return this.listSegments(settings.continuationToken, {\n          maxPageSize: settings.maxPageSize,\n          ...listSegmentOptions,\n        });\n      },\n    };\n  }\n\n  /**\n   * ONLY AVAILABLE WHEN USING BEARER TOKEN AUTHENTICATION (TokenCredential).\n   *\n   * Retrieves a user delegation key for the Blob service. This is only a valid operation when using\n   * bearer token authentication.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-user-delegation-key\n   *\n   * @param startsOn -      The start time for the user delegation SAS. Must be within 7 days of the current time\n   * @param expiresOn -     The end time for the user delegation SAS. Must be within 7 days of the current time\n   */\n  public async getUserDelegationKey(\n    startsOn: Date,\n    expiresOn: Date,\n    options: ServiceGetUserDelegationKeyOptions = {}\n  ): Promise<ServiceGetUserDelegationKeyResponse> {\n    const { span, updatedOptions } = createSpan(\"BlobServiceClient-getUserDelegationKey\", options);\n    try {\n      const response = await this.serviceContext.getUserDelegationKey(\n        {\n          startsOn: truncatedISO8061Date(startsOn, false),\n          expiresOn: truncatedISO8061Date(expiresOn, false),\n        },\n        {\n          abortSignal: options.abortSignal,\n          ...convertTracingToRequestOptionsBase(updatedOptions),\n        }\n      );\n\n      const userDelegationKey = {\n        signedObjectId: response.signedObjectId,\n        signedTenantId: response.signedTenantId,\n        signedStartsOn: new Date(response.signedStartsOn),\n        signedExpiresOn: new Date(response.signedExpiresOn),\n        signedService: response.signedService,\n        signedVersion: response.signedVersion,\n        value: response.value,\n      };\n\n      const res: ServiceGetUserDelegationKeyResponse = {\n        _response: response._response,\n        requestId: response.requestId,\n        clientRequestId: response.clientRequestId,\n        version: response.version,\n        date: response.date,\n        errorCode: response.errorCode,\n        ...userDelegationKey,\n      };\n\n      return res;\n    } catch (e: any) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a BlobBatchClient object to conduct batch operations.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch\n   *\n   * @returns A new BlobBatchClient object for this service.\n   */\n  public getBlobBatchClient(): BlobBatchClient {\n    return new BlobBatchClient(this.url, this.pipeline);\n  }\n\n  /**\n   * Only available for BlobServiceClient constructed with a shared key credential.\n   *\n   * Generates a Blob account Shared Access Signature (SAS) URI based on the client properties\n   * and parameters passed in. The SAS is signed by the shared key credential of the client.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-account-sas\n   *\n   * @param expiresOn - Optional. The time at which the shared access signature becomes invalid. Default to an hour later if not provided.\n   * @param permissions - Specifies the list of permissions to be associated with the SAS.\n   * @param resourceTypes - Specifies the resource types associated with the shared access signature.\n   * @param options - Optional parameters.\n   * @returns An account SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.\n   */\n  public generateAccountSasUrl(\n    expiresOn?: Date,\n    permissions: AccountSASPermissions = AccountSASPermissions.parse(\"r\"),\n    resourceTypes: string = \"sco\",\n    options: ServiceGenerateAccountSasUrlOptions = {}\n  ): string {\n    if (!(this.credential instanceof StorageSharedKeyCredential)) {\n      throw RangeError(\n        \"Can only generate the account SAS when the client is initialized with a shared key credential\"\n      );\n    }\n\n    if (expiresOn === undefined) {\n      const now = new Date();\n      expiresOn = new Date(now.getTime() + 3600 * 1000);\n    }\n\n    const sas = generateAccountSASQueryParameters(\n      {\n        permissions,\n        expiresOn,\n        resourceTypes,\n        services: AccountSASServices.parse(\"b\").toString(),\n        ...options,\n      },\n      this.credential\n    ).toString();\n\n    return appendToURLQuery(this.url, sas);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { __extends } from \"tslib\";\nimport { TELEMETRY_BLOB_EVENT_NAMES } from \"./TelemetryConstants\";\nimport TelemetryEvent from \"./TelemetryEvent\";\nimport { prependEventNamePrefix } from \"./TelemetryUtils\";\nvar DefaultEvent = /** @class */function (_super) {\n  __extends(DefaultEvent, _super);\n  // TODO Platform Type\n  function DefaultEvent(platform, correlationId, clientId, eventCount) {\n    var _this = _super.call(this, prependEventNamePrefix(\"default_event\"), correlationId, \"DefaultEvent\") || this;\n    _this.event[prependEventNamePrefix(\"client_id\")] = clientId;\n    _this.event[prependEventNamePrefix(\"sdk_plaform\")] = platform.sdk;\n    _this.event[prependEventNamePrefix(\"sdk_version\")] = platform.sdkVersion;\n    _this.event[prependEventNamePrefix(\"application_name\")] = platform.applicationName;\n    _this.event[prependEventNamePrefix(\"application_version\")] = platform.applicationVersion;\n    _this.event[prependEventNamePrefix(\"effective_connection_speed\")] = platform.networkInformation && platform.networkInformation.connectionSpeed;\n    _this.event[\"\" + TELEMETRY_BLOB_EVENT_NAMES.UiEventCountTelemetryBatchKey] = _this.getEventCount(prependEventNamePrefix(\"ui_event\"), eventCount);\n    _this.event[\"\" + TELEMETRY_BLOB_EVENT_NAMES.HttpEventCountTelemetryBatchKey] = _this.getEventCount(prependEventNamePrefix(\"http_event\"), eventCount);\n    _this.event[\"\" + TELEMETRY_BLOB_EVENT_NAMES.CacheEventCountConstStrKey] = _this.getEventCount(prependEventNamePrefix(\"cache_event\"), eventCount);\n    return _this;\n    // / Device id?\n  }\n\n  DefaultEvent.prototype.getEventCount = function (eventName, eventCount) {\n    if (!eventCount[eventName]) {\n      return 0;\n    }\n    return eventCount[eventName];\n  };\n  return DefaultEvent;\n}(TelemetryEvent);\nexport default DefaultEvent;","map":{"version":3,"mappings":"AAAA;;;;;AAKA,SAASA,0BAA0B,QAAQ,sBAAsB;AACjE,OAAOC,cAAc,MAAM,kBAAkB;AAE7C,SAASC,sBAAsB,QAAQ,kBAAkB;AAEzD;EAA0CC;EACtC;EACA,sBAAYC,QAA2B,EAAEC,aAAqB,EAAEC,QAAgB,EAAEC,UAAsB;IAAxG,YACIC,kBAAMN,sBAAsB,CAAC,eAAe,CAAC,EAAEG,aAAa,EAAE,cAAc,CAAC;IAC7EI,KAAI,CAACC,KAAK,CAACR,sBAAsB,CAAC,WAAW,CAAC,CAAC,GAAGI,QAAQ;IAC1DG,KAAI,CAACC,KAAK,CAACR,sBAAsB,CAAC,aAAa,CAAC,CAAC,GAAGE,QAAQ,CAACO,GAAG;IAChEF,KAAI,CAACC,KAAK,CAACR,sBAAsB,CAAC,aAAa,CAAC,CAAC,GAAGE,QAAQ,CAACQ,UAAU;IACvEH,KAAI,CAACC,KAAK,CAACR,sBAAsB,CAAC,kBAAkB,CAAC,CAAC,GAAGE,QAAQ,CAACS,eAAe;IACjFJ,KAAI,CAACC,KAAK,CAACR,sBAAsB,CAAC,qBAAqB,CAAC,CAAC,GAAGE,QAAQ,CAACU,kBAAkB;IACvFL,KAAI,CAACC,KAAK,CAACR,sBAAsB,CAAC,4BAA4B,CAAC,CAAC,GAAGE,QAAQ,CAACW,kBAAkB,IAAIX,QAAQ,CAACW,kBAAkB,CAACC,eAAe;IAC7IP,KAAI,CAACC,KAAK,CAAC,KAAGV,0BAA0B,CAACiB,6BAA+B,CAAC,GAAGR,KAAI,CAACS,aAAa,CAAChB,sBAAsB,CAAC,UAAU,CAAC,EAAEK,UAAU,CAAC;IAC9IE,KAAI,CAACC,KAAK,CAAC,KAAGV,0BAA0B,CAACmB,+BAAiC,CAAC,GAAGV,KAAI,CAACS,aAAa,CAAChB,sBAAsB,CAAC,YAAY,CAAC,EAAEK,UAAU,CAAC;IAClJE,KAAI,CAACC,KAAK,CAAC,KAAGV,0BAA0B,CAACoB,0BAA4B,CAAC,GAAGX,KAAI,CAACS,aAAa,CAAChB,sBAAsB,CAAC,aAAa,CAAC,EAAEK,UAAU,CAAC;;IAC9I;EACJ;;EAEQc,oCAAa,GAArB,UAAsBC,SAAiB,EAAEf,UAAsB;IAC3D,IAAI,CAACA,UAAU,CAACe,SAAS,CAAC,EAAE;MACxB,OAAO,CAAC;;IAEZ,OAAOf,UAAU,CAACe,SAAS,CAAC;EAChC,CAAC;EACL,mBAAC;AAAD,CAAC,CAtByCrB,cAAc","names":["TELEMETRY_BLOB_EVENT_NAMES","TelemetryEvent","prependEventNamePrefix","__extends","platform","correlationId","clientId","eventCount","_super","_this","event","sdk","sdkVersion","applicationName","applicationVersion","networkInformation","connectionSpeed","UiEventCountTelemetryBatchKey","getEventCount","HttpEventCountTelemetryBatchKey","CacheEventCountConstStrKey","DefaultEvent","eventName"],"sourceRoot":"","sources":["../../src/telemetry/DefaultEvent.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}
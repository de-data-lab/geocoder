{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/tbeckett/Documents/TI - Project Info/JavaScript_end_to_end_client_file_upload_to_Azure_Storage_Blobs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _createClass from \"/Users/tbeckett/Documents/TI - Project Info/JavaScript_end_to_end_client_file_upload_to_Azure_Storage_Blobs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/Users/tbeckett/Documents/TI - Project Info/JavaScript_end_to_end_client_file_upload_to_Azure_Storage_Blobs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { StorageClientContext } from \"./generated/src/storageClientContext\";\nimport { escapeURLPath, getURLScheme, iEqual, getAccountNameFromUrl } from \"./utils/utils.common\";\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\nimport { StorageSharedKeyCredential } from \"./credentials/StorageSharedKeyCredential\";\nimport { isTokenCredential, isNode } from \"@azure/core-http\";\n/**\n * A StorageClient represents a based URL class for {@link BlobServiceClient}, {@link ContainerClient}\n * and etc.\n */\nexport var StorageClient = /*#__PURE__*/_createClass(\n/**\n * Creates an instance of StorageClient.\n * @param url - url to resource\n * @param pipeline - request policy pipeline.\n */\nfunction StorageClient(url, pipeline) {\n  _classCallCheck(this, StorageClient);\n  // URL should be encoded and only once, protocol layer shouldn't encode URL again\n  this.url = escapeURLPath(url);\n  this.accountName = getAccountNameFromUrl(url);\n  this.pipeline = pipeline;\n  this.storageClientContext = new StorageClientContext(this.url, pipeline.toServiceClientOptions());\n  this.isHttps = iEqual(getURLScheme(this.url) || \"\", \"https\");\n  this.credential = new AnonymousCredential();\n  var _iterator = _createForOfIteratorHelper(this.pipeline.factories),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var factory = _step.value;\n      if (isNode && factory instanceof StorageSharedKeyCredential || factory instanceof AnonymousCredential) {\n        this.credential = factory;\n      } else if (isTokenCredential(factory.credential)) {\n        // Only works if the factory has been attached a \"credential\" property.\n        // We do that in newPipeline() when using TokenCredential.\n        this.credential = factory.credential;\n      }\n    }\n    // Override protocol layer's default content-type\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  var storageClientContext = this.storageClientContext;\n  storageClientContext.requestContentType = undefined;\n});","map":{"version":3,"mappings":";;;AAAA;AACA;AAEA,SAASA,oBAAoB,QAAQ,sCAAsC;AAE3E,SAASC,aAAa,EAAEC,YAAY,EAAEC,MAAM,EAAEC,qBAAqB,QAAQ,sBAAsB;AACjG,SAASC,mBAAmB,QAAQ,mCAAmC;AACvE,SAASC,0BAA0B,QAAQ,0CAA0C;AACrF,SAA0BC,iBAAiB,EAAEC,MAAM,QAAQ,kBAAkB;AAa7E;;;;AAIA,WAAsBC,aAAa;AAyBjC;;;;;AAKA,uBAAsBC,GAAW,EAAEC,QAAsB;EAAA;EACvD;EACA,IAAI,CAACD,GAAG,GAAGT,aAAa,CAACS,GAAG,CAAC;EAC7B,IAAI,CAACE,WAAW,GAAGR,qBAAqB,CAACM,GAAG,CAAC;EAC7C,IAAI,CAACC,QAAQ,GAAGA,QAAQ;EACxB,IAAI,CAACE,oBAAoB,GAAG,IAAIb,oBAAoB,CAClD,IAAI,CAACU,GAAG,EACRC,QAAQ,CAACG,sBAAsB,EAAE,CAClC;EAED,IAAI,CAACC,OAAO,GAAGZ,MAAM,CAACD,YAAY,CAAC,IAAI,CAACQ,GAAG,CAAC,IAAI,EAAE,EAAE,OAAO,CAAC;EAE5D,IAAI,CAACM,UAAU,GAAG,IAAIX,mBAAmB,EAAE;EAAC,2CACtB,IAAI,CAACM,QAAQ,CAACM,SAAS;IAAA;EAAA;IAA7C,oDAA+C;MAAA,IAApCC,OAAO;MAChB,IACGV,MAAM,IAAIU,OAAO,YAAYZ,0BAA0B,IACxDY,OAAO,YAAYb,mBAAmB,EACtC;QACA,IAAI,CAACW,UAAU,GAAGE,OAAO;OAC1B,MAAM,IAAIX,iBAAiB,CAAEW,OAAe,CAACF,UAAU,CAAC,EAAE;QACzD;QACA;QACA,IAAI,CAACA,UAAU,GAAIE,OAAe,CAACF,UAAU;;;IAIjD;EAAA;IAAA;EAAA;IAAA;EAAA;EACA,IAAMH,oBAAoB,GAAG,IAAI,CAACA,oBAA2B;EAC7DA,oBAAoB,CAACM,kBAAkB,GAAGC,SAAS;AACrD,CAAC","names":["StorageClientContext","escapeURLPath","getURLScheme","iEqual","getAccountNameFromUrl","AnonymousCredential","StorageSharedKeyCredential","isTokenCredential","isNode","StorageClient","url","pipeline","accountName","storageClientContext","toServiceClientOptions","isHttps","credential","factories","factory","requestContentType","undefined"],"sourceRoot":"","sources":["../../../src/StorageClient.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { StorageClientContext } from \"./generated/src/storageClientContext\";\nimport { PipelineLike } from \"./Pipeline\";\nimport { escapeURLPath, getURLScheme, iEqual, getAccountNameFromUrl } from \"./utils/utils.common\";\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\nimport { StorageSharedKeyCredential } from \"./credentials/StorageSharedKeyCredential\";\nimport { TokenCredential, isTokenCredential, isNode } from \"@azure/core-http\";\nimport { OperationTracingOptions } from \"@azure/core-tracing\";\n\n/**\n * An interface for options common to every remote operation.\n */\nexport interface CommonOptions {\n  /**\n   * Options to configure spans created when tracing is enabled.\n   */\n  tracingOptions?: OperationTracingOptions;\n}\n\n/**\n * A StorageClient represents a based URL class for {@link BlobServiceClient}, {@link ContainerClient}\n * and etc.\n */\nexport abstract class StorageClient {\n  /**\n   * Encoded URL string value.\n   */\n  public readonly url: string;\n  public readonly accountName: string;\n  /**\n   * Request policy pipeline.\n   *\n   * @internal\n   */\n  protected readonly pipeline: PipelineLike;\n  /**\n   * Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n   */\n  public readonly credential: StorageSharedKeyCredential | AnonymousCredential | TokenCredential;\n  /**\n   * StorageClient is a reference to protocol layer operations entry, which is\n   * generated by AutoRest generator.\n   */\n  protected readonly storageClientContext: StorageClientContext;\n  /**\n   */\n  protected readonly isHttps: boolean;\n\n  /**\n   * Creates an instance of StorageClient.\n   * @param url - url to resource\n   * @param pipeline - request policy pipeline.\n   */\n  protected constructor(url: string, pipeline: PipelineLike) {\n    // URL should be encoded and only once, protocol layer shouldn't encode URL again\n    this.url = escapeURLPath(url);\n    this.accountName = getAccountNameFromUrl(url);\n    this.pipeline = pipeline;\n    this.storageClientContext = new StorageClientContext(\n      this.url,\n      pipeline.toServiceClientOptions()\n    );\n\n    this.isHttps = iEqual(getURLScheme(this.url) || \"\", \"https\");\n\n    this.credential = new AnonymousCredential();\n    for (const factory of this.pipeline.factories) {\n      if (\n        (isNode && factory instanceof StorageSharedKeyCredential) ||\n        factory instanceof AnonymousCredential\n      ) {\n        this.credential = factory;\n      } else if (isTokenCredential((factory as any).credential)) {\n        // Only works if the factory has been attached a \"credential\" property.\n        // We do that in newPipeline() when using TokenCredential.\n        this.credential = (factory as any).credential;\n      }\n    }\n\n    // Override protocol layer's default content-type\n    const storageClientContext = this.storageClientContext as any;\n    storageClientContext.requestContentType = undefined;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/tbeckett/Documents/Azure dev/Azure Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _createClass from \"/Users/tbeckett/Documents/Azure dev/Azure Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/Users/tbeckett/Documents/Azure dev/Azure Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _inherits from \"/Users/tbeckett/Documents/Azure dev/Azure Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/tbeckett/Documents/Azure dev/Azure Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _wrapNativeSuper from \"/Users/tbeckett/Documents/Azure dev/Azure Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { AbortSignal, abortSignal } from \"./AbortSignal\";\n/**\n * This error is thrown when an asynchronous operation has been aborted.\n * Check for this error by testing the `name` that the name property of the\n * error matches `\"AbortError\"`.\n *\n * @example\n * ```ts\n * const controller = new AbortController();\n * controller.abort();\n * try {\n *   doAsyncWork(controller.signal)\n * } catch (e) {\n *   if (e.name === 'AbortError') {\n *     // handle abort error here.\n *   }\n * }\n * ```\n */\nexport var AbortError = /*#__PURE__*/function (_Error) {\n  _inherits(AbortError, _Error);\n  var _super = _createSuper(AbortError);\n  function AbortError(message) {\n    var _this;\n    _classCallCheck(this, AbortError);\n    _this = _super.call(this, message);\n    _this.name = \"AbortError\";\n    return _this;\n  }\n  return _createClass(AbortError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n/**\n * An AbortController provides an AbortSignal and the associated controls to signal\n * that an asynchronous operation should be aborted.\n *\n * @example\n * Abort an operation when another event fires\n * ```ts\n * const controller = new AbortController();\n * const signal = controller.signal;\n * doAsyncWork(signal);\n * button.addEventListener('click', () => controller.abort());\n * ```\n *\n * @example\n * Share aborter cross multiple operations in 30s\n * ```ts\n * // Upload the same data to 2 different data centers at the same time,\n * // abort another when any of them is finished\n * const controller = AbortController.withTimeout(30 * 1000);\n * doAsyncWork(controller.signal).then(controller.abort);\n * doAsyncWork(controller.signal).then(controller.abort);\n *```\n *\n * @example\n * Cascaded aborting\n * ```ts\n * // All operations can't take more than 30 seconds\n * const aborter = Aborter.timeout(30 * 1000);\n *\n * // Following 2 operations can't take more than 25 seconds\n * await doAsyncWork(aborter.withTimeout(25 * 1000));\n * await doAsyncWork(aborter.withTimeout(25 * 1000));\n * ```\n */\nexport var AbortController = /*#__PURE__*/function () {\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  function AbortController(parentSignals) {\n    var _this2 = this;\n    _classCallCheck(this, AbortController);\n    this._signal = new AbortSignal();\n    if (!parentSignals) {\n      return;\n    }\n    // coerce parentSignals into an array\n    if (!Array.isArray(parentSignals)) {\n      // eslint-disable-next-line prefer-rest-params\n      parentSignals = arguments;\n    }\n    var _iterator = _createForOfIteratorHelper(parentSignals),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var parentSignal = _step.value;\n        // if the parent signal has already had abort() called,\n        // then call abort on this signal as well.\n        if (parentSignal.aborted) {\n          this.abort();\n        } else {\n          // when the parent signal aborts, this signal should as well.\n          parentSignal.addEventListener(\"abort\", function () {\n            _this2.abort();\n          });\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  /**\n   * The AbortSignal associated with this controller that will signal aborted\n   * when the abort method is called on this controller.\n   *\n   * @readonly\n   */\n  _createClass(AbortController, [{\n    key: \"signal\",\n    get: function get() {\n      return this._signal;\n    }\n    /**\n     * Signal that any operations passed this controller's associated abort signal\n     * to cancel any remaining work and throw an `AbortError`.\n     */\n  }, {\n    key: \"abort\",\n    value: function abort() {\n      abortSignal(this._signal);\n    }\n    /**\n     * Creates a new AbortSignal instance that will abort after the provided ms.\n     * @param ms - Elapsed time in milliseconds to trigger an abort.\n     */\n  }], [{\n    key: \"timeout\",\n    value: function timeout(ms) {\n      var signal = new AbortSignal();\n      var timer = setTimeout(abortSignal, ms, signal);\n      // Prevent the active Timer from keeping the Node.js event loop active.\n      if (typeof timer.unref === \"function\") {\n        timer.unref();\n      }\n      return signal;\n    }\n  }]);\n  return AbortController;\n}();","map":{"version":3,"mappings":";;;;;;AAAA;AACA;AAEA,SAASA,WAAW,EAAmBC,WAAW,QAAQ,eAAe;AAEzE;;;;;;;;;;;;;;;;;;AAkBA,WAAaC,UAAW;EAAA;EAAA;EACtB,oBAAYC,OAAgB;IAAA;IAAA;IAC1B,0BAAMA,OAAO;IACb,MAAKC,IAAI,GAAG,YAAY;IAAC;EAC3B;EAAC;AAAA,iCAJ6BC,KAAK;AAOrC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA,WAAaC,eAAe;EAW1B;EACA,yBAAYC,aAAmB;IAAA;IAAA;IAC7B,IAAI,CAACC,OAAO,GAAG,IAAIR,WAAW,EAAE;IAEhC,IAAI,CAACO,aAAa,EAAE;MAClB;;IAEF;IACA,IAAI,CAACE,KAAK,CAACC,OAAO,CAACH,aAAa,CAAC,EAAE;MACjC;MACAA,aAAa,GAAGI,SAAS;;IAC1B,2CAC0BJ,aAAa;MAAA;IAAA;MAAxC,oDAA0C;QAAA,IAA/BK,YAAY;QACrB;QACA;QACA,IAAIA,YAAY,CAACC,OAAO,EAAE;UACxB,IAAI,CAACC,KAAK,EAAE;SACb,MAAM;UACL;UACAF,YAAY,CAACG,gBAAgB,CAAC,OAAO,EAAE,YAAK;YAC1C,MAAI,CAACD,KAAK,EAAE;UACd,CAAC,CAAC;;;IAEL;MAAA;IAAA;MAAA;IAAA;EACH;EAEA;;;;;;EAAA;IAAA;IAAA,KAMA,eAAiB;MACf,OAAO,IAAI,CAACN,OAAO;IACrB;IAEA;;;;EAAA;IAAA;IAAA,OAIA,iBAAK;MACHP,WAAW,CAAC,IAAI,CAACO,OAAO,CAAC;IAC3B;IAEA;;;;EAAA;IAAA;IAAA,OAIO,iBAAeQ,EAAU;MAC9B,IAAMC,MAAM,GAAG,IAAIjB,WAAW,EAAE;MAChC,IAAMkB,KAAK,GAAGC,UAAU,CAAClB,WAAW,EAAEe,EAAE,EAAEC,MAAM,CAAC;MACjD;MACA,IAAI,OAAOC,KAAK,CAACE,KAAK,KAAK,UAAU,EAAE;QACrCF,KAAK,CAACE,KAAK,EAAE;;MAEf,OAAOH,MAAM;IACf;EAAC;EAAA;AAAA","names":["AbortSignal","abortSignal","AbortError","message","name","Error","AbortController","parentSignals","_signal","Array","isArray","arguments","parentSignal","aborted","abort","addEventListener","ms","signal","timer","setTimeout","unref"],"sourceRoot":"","sources":["../../src/AbortController.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AbortSignal, AbortSignalLike, abortSignal } from \"./AbortSignal\";\n\n/**\n * This error is thrown when an asynchronous operation has been aborted.\n * Check for this error by testing the `name` that the name property of the\n * error matches `\"AbortError\"`.\n *\n * @example\n * ```ts\n * const controller = new AbortController();\n * controller.abort();\n * try {\n *   doAsyncWork(controller.signal)\n * } catch (e) {\n *   if (e.name === 'AbortError') {\n *     // handle abort error here.\n *   }\n * }\n * ```\n */\nexport class AbortError extends Error {\n  constructor(message?: string) {\n    super(message);\n    this.name = \"AbortError\";\n  }\n}\n\n/**\n * An AbortController provides an AbortSignal and the associated controls to signal\n * that an asynchronous operation should be aborted.\n *\n * @example\n * Abort an operation when another event fires\n * ```ts\n * const controller = new AbortController();\n * const signal = controller.signal;\n * doAsyncWork(signal);\n * button.addEventListener('click', () => controller.abort());\n * ```\n *\n * @example\n * Share aborter cross multiple operations in 30s\n * ```ts\n * // Upload the same data to 2 different data centers at the same time,\n * // abort another when any of them is finished\n * const controller = AbortController.withTimeout(30 * 1000);\n * doAsyncWork(controller.signal).then(controller.abort);\n * doAsyncWork(controller.signal).then(controller.abort);\n *```\n *\n * @example\n * Cascaded aborting\n * ```ts\n * // All operations can't take more than 30 seconds\n * const aborter = Aborter.timeout(30 * 1000);\n *\n * // Following 2 operations can't take more than 25 seconds\n * await doAsyncWork(aborter.withTimeout(25 * 1000));\n * await doAsyncWork(aborter.withTimeout(25 * 1000));\n * ```\n */\nexport class AbortController {\n  private _signal: AbortSignal;\n\n  /**\n   * @param parentSignals - The AbortSignals that will signal aborted on the AbortSignal associated with this controller.\n   */\n  constructor(parentSignals?: AbortSignalLike[]);\n  /**\n   * @param parentSignals - The AbortSignals that will signal aborted on the AbortSignal associated with this controller.\n   */\n  constructor(...parentSignals: AbortSignalLike[]);\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  constructor(parentSignals?: any) {\n    this._signal = new AbortSignal();\n\n    if (!parentSignals) {\n      return;\n    }\n    // coerce parentSignals into an array\n    if (!Array.isArray(parentSignals)) {\n      // eslint-disable-next-line prefer-rest-params\n      parentSignals = arguments;\n    }\n    for (const parentSignal of parentSignals) {\n      // if the parent signal has already had abort() called,\n      // then call abort on this signal as well.\n      if (parentSignal.aborted) {\n        this.abort();\n      } else {\n        // when the parent signal aborts, this signal should as well.\n        parentSignal.addEventListener(\"abort\", () => {\n          this.abort();\n        });\n      }\n    }\n  }\n\n  /**\n   * The AbortSignal associated with this controller that will signal aborted\n   * when the abort method is called on this controller.\n   *\n   * @readonly\n   */\n  public get signal(): AbortSignal {\n    return this._signal;\n  }\n\n  /**\n   * Signal that any operations passed this controller's associated abort signal\n   * to cancel any remaining work and throw an `AbortError`.\n   */\n  abort(): void {\n    abortSignal(this._signal);\n  }\n\n  /**\n   * Creates a new AbortSignal instance that will abort after the provided ms.\n   * @param ms - Elapsed time in milliseconds to trigger an abort.\n   */\n  public static timeout(ms: number): AbortSignal {\n    const signal = new AbortSignal();\n    const timer = setTimeout(abortSignal, ms, signal);\n    // Prevent the active Timer from keeping the Node.js event loop active.\n    if (typeof timer.unref === \"function\") {\n      timer.unref();\n    }\n    return signal;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
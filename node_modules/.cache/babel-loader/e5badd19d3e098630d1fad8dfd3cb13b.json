{"ast":null,"code":"import _classCallCheck from \"/Users/tbeckett/Documents/geo-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tbeckett/Documents/geo-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\n/** Class representing a Container. */\nexport var Container = /*#__PURE__*/function () {\n  /**\n   * Initialize a new instance of the class Container class.\n   * @param client Reference to the service client\n   */\n  function Container(client) {\n    _classCallCheck(this, Container);\n    this.client = client;\n  }\n  /**\n   * creates a new container under the specified account. If the container with the same name already\n   * exists, the operation fails\n   * @param options The options parameters.\n   */\n  _createClass(Container, [{\n    key: \"create\",\n    value: function create(options) {\n      var operationArguments = {\n        options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n      };\n      return this.client.sendOperationRequest(operationArguments, createOperationSpec);\n    }\n    /**\n     * returns all user-defined metadata and system properties for the specified container. The data\n     * returned does not include the container's list of blobs\n     * @param options The options parameters.\n     */\n  }, {\n    key: \"getProperties\",\n    value: function getProperties(options) {\n      var operationArguments = {\n        options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n      };\n      return this.client.sendOperationRequest(operationArguments, getPropertiesOperationSpec);\n    }\n    /**\n     * operation marks the specified container for deletion. The container and any blobs contained within\n     * it are later deleted during garbage collection\n     * @param options The options parameters.\n     */\n  }, {\n    key: \"delete\",\n    value: function _delete(options) {\n      var operationArguments = {\n        options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n      };\n      return this.client.sendOperationRequest(operationArguments, deleteOperationSpec);\n    }\n    /**\n     * operation sets one or more user-defined name-value pairs for the specified container.\n     * @param options The options parameters.\n     */\n  }, {\n    key: \"setMetadata\",\n    value: function setMetadata(options) {\n      var operationArguments = {\n        options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n      };\n      return this.client.sendOperationRequest(operationArguments, setMetadataOperationSpec);\n    }\n    /**\n     * gets the permissions for the specified container. The permissions indicate whether container data\n     * may be accessed publicly.\n     * @param options The options parameters.\n     */\n  }, {\n    key: \"getAccessPolicy\",\n    value: function getAccessPolicy(options) {\n      var operationArguments = {\n        options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n      };\n      return this.client.sendOperationRequest(operationArguments, getAccessPolicyOperationSpec);\n    }\n    /**\n     * sets the permissions for the specified container. The permissions indicate whether blobs in a\n     * container may be accessed publicly.\n     * @param options The options parameters.\n     */\n  }, {\n    key: \"setAccessPolicy\",\n    value: function setAccessPolicy(options) {\n      var operationArguments = {\n        options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n      };\n      return this.client.sendOperationRequest(operationArguments, setAccessPolicyOperationSpec);\n    }\n    /**\n     * Restores a previously-deleted container.\n     * @param options The options parameters.\n     */\n  }, {\n    key: \"restore\",\n    value: function restore(options) {\n      var operationArguments = {\n        options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n      };\n      return this.client.sendOperationRequest(operationArguments, restoreOperationSpec);\n    }\n    /**\n     * Renames an existing container.\n     * @param sourceContainerName Required.  Specifies the name of the container to rename.\n     * @param options The options parameters.\n     */\n  }, {\n    key: \"rename\",\n    value: function rename(sourceContainerName, options) {\n      var operationArguments = {\n        sourceContainerName: sourceContainerName,\n        options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n      };\n      return this.client.sendOperationRequest(operationArguments, renameOperationSpec);\n    }\n    /**\n     * The Batch operation allows multiple API calls to be embedded into a single HTTP request.\n     * @param contentLength The length of the request.\n     * @param multipartContentType Required. The value of this header must be multipart/mixed with a batch\n     *                             boundary. Example header value: multipart/mixed; boundary=batch_<GUID>\n     * @param body Initial data\n     * @param options The options parameters.\n     */\n  }, {\n    key: \"submitBatch\",\n    value: function submitBatch(contentLength, multipartContentType, body, options) {\n      var operationArguments = {\n        contentLength: contentLength,\n        multipartContentType: multipartContentType,\n        body: body,\n        options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n      };\n      return this.client.sendOperationRequest(operationArguments, submitBatchOperationSpec);\n    }\n    /**\n     * The Filter Blobs operation enables callers to list blobs in a container whose tags match a given\n     * search expression.  Filter blobs searches within the given container.\n     * @param options The options parameters.\n     */\n  }, {\n    key: \"filterBlobs\",\n    value: function filterBlobs(options) {\n      var operationArguments = {\n        options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n      };\n      return this.client.sendOperationRequest(operationArguments, filterBlobsOperationSpec);\n    }\n    /**\n     * [Update] establishes and manages a lock on a container for delete operations. The lock duration can\n     * be 15 to 60 seconds, or can be infinite\n     * @param options The options parameters.\n     */\n  }, {\n    key: \"acquireLease\",\n    value: function acquireLease(options) {\n      var operationArguments = {\n        options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n      };\n      return this.client.sendOperationRequest(operationArguments, acquireLeaseOperationSpec);\n    }\n    /**\n     * [Update] establishes and manages a lock on a container for delete operations. The lock duration can\n     * be 15 to 60 seconds, or can be infinite\n     * @param leaseId Specifies the current lease ID on the resource.\n     * @param options The options parameters.\n     */\n  }, {\n    key: \"releaseLease\",\n    value: function releaseLease(leaseId, options) {\n      var operationArguments = {\n        leaseId: leaseId,\n        options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n      };\n      return this.client.sendOperationRequest(operationArguments, releaseLeaseOperationSpec);\n    }\n    /**\n     * [Update] establishes and manages a lock on a container for delete operations. The lock duration can\n     * be 15 to 60 seconds, or can be infinite\n     * @param leaseId Specifies the current lease ID on the resource.\n     * @param options The options parameters.\n     */\n  }, {\n    key: \"renewLease\",\n    value: function renewLease(leaseId, options) {\n      var operationArguments = {\n        leaseId: leaseId,\n        options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n      };\n      return this.client.sendOperationRequest(operationArguments, renewLeaseOperationSpec);\n    }\n    /**\n     * [Update] establishes and manages a lock on a container for delete operations. The lock duration can\n     * be 15 to 60 seconds, or can be infinite\n     * @param options The options parameters.\n     */\n  }, {\n    key: \"breakLease\",\n    value: function breakLease(options) {\n      var operationArguments = {\n        options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n      };\n      return this.client.sendOperationRequest(operationArguments, breakLeaseOperationSpec);\n    }\n    /**\n     * [Update] establishes and manages a lock on a container for delete operations. The lock duration can\n     * be 15 to 60 seconds, or can be infinite\n     * @param leaseId Specifies the current lease ID on the resource.\n     * @param proposedLeaseId Proposed lease ID, in a GUID string format. The Blob service returns 400\n     *                        (Invalid request) if the proposed lease ID is not in the correct format. See Guid Constructor\n     *                        (String) for a list of valid GUID string formats.\n     * @param options The options parameters.\n     */\n  }, {\n    key: \"changeLease\",\n    value: function changeLease(leaseId, proposedLeaseId, options) {\n      var operationArguments = {\n        leaseId: leaseId,\n        proposedLeaseId: proposedLeaseId,\n        options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n      };\n      return this.client.sendOperationRequest(operationArguments, changeLeaseOperationSpec);\n    }\n    /**\n     * [Update] The List Blobs operation returns a list of the blobs under the specified container\n     * @param options The options parameters.\n     */\n  }, {\n    key: \"listBlobFlatSegment\",\n    value: function listBlobFlatSegment(options) {\n      var operationArguments = {\n        options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n      };\n      return this.client.sendOperationRequest(operationArguments, listBlobFlatSegmentOperationSpec);\n    }\n    /**\n     * [Update] The List Blobs operation returns a list of the blobs under the specified container\n     * @param delimiter When the request includes this parameter, the operation returns a BlobPrefix\n     *                  element in the response body that acts as a placeholder for all blobs whose names begin with the\n     *                  same substring up to the appearance of the delimiter character. The delimiter may be a single\n     *                  character or a string.\n     * @param options The options parameters.\n     */\n  }, {\n    key: \"listBlobHierarchySegment\",\n    value: function listBlobHierarchySegment(delimiter, options) {\n      var operationArguments = {\n        delimiter: delimiter,\n        options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n      };\n      return this.client.sendOperationRequest(operationArguments, listBlobHierarchySegmentOperationSpec);\n    }\n    /**\n     * Returns the sku name and account kind\n     * @param options The options parameters.\n     */\n  }, {\n    key: \"getAccountInfo\",\n    value: function getAccountInfo(options) {\n      var operationArguments = {\n        options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n      };\n      return this.client.sendOperationRequest(operationArguments, getAccountInfoOperationSpec);\n    }\n  }]);\n  return Container;\n}();\n// Operation Specifications\nvar xmlSerializer = new coreHttp.Serializer(Mappers, /* isXml */true);\nvar createOperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.ContainerCreateHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerCreateExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.metadata, Parameters.access, Parameters.defaultEncryptionScope, Parameters.preventEncryptionScopeOverride],\n  isXML: true,\n  serializer: xmlSerializer\n};\nvar getPropertiesOperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerGetPropertiesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerGetPropertiesExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId],\n  isXML: true,\n  serializer: xmlSerializer\n};\nvar deleteOperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    202: {\n      headersMapper: Mappers.ContainerDeleteHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerDeleteExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince],\n  isXML: true,\n  serializer: xmlSerializer\n};\nvar setMetadataOperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerSetMetadataHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerSetMetadataExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2, Parameters.comp6],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.metadata, Parameters.leaseId, Parameters.ifModifiedSince],\n  isXML: true,\n  serializer: xmlSerializer\n};\nvar getAccessPolicyOperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SignedIdentifier\"\n            }\n          }\n        },\n        serializedName: \"SignedIdentifiers\",\n        xmlName: \"SignedIdentifiers\",\n        xmlIsWrapped: true,\n        xmlElementName: \"SignedIdentifier\"\n      },\n      headersMapper: Mappers.ContainerGetAccessPolicyHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerGetAccessPolicyExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2, Parameters.comp7],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId],\n  isXML: true,\n  serializer: xmlSerializer\n};\nvar setAccessPolicyOperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerSetAccessPolicyHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerSetAccessPolicyExceptionHeaders\n    }\n  },\n  requestBody: Parameters.containerAcl,\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2, Parameters.comp7],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.contentType, Parameters.accept, Parameters.version, Parameters.requestId, Parameters.access, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince],\n  isXML: true,\n  contentType: \"application/xml; charset=utf-8\",\n  mediaType: \"xml\",\n  serializer: xmlSerializer\n};\nvar restoreOperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.ContainerRestoreHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerRestoreExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2, Parameters.comp8],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.deletedContainerName, Parameters.deletedContainerVersion],\n  isXML: true,\n  serializer: xmlSerializer\n};\nvar renameOperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerRenameHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerRenameExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2, Parameters.comp9],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.sourceContainerName, Parameters.sourceLeaseId],\n  isXML: true,\n  serializer: xmlSerializer\n};\nvar submitBatchOperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {\n      bodyMapper: {\n        type: {\n          name: \"Stream\"\n        },\n        serializedName: \"parsedResponse\"\n      },\n      headersMapper: Mappers.ContainerSubmitBatchHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerSubmitBatchExceptionHeaders\n    }\n  },\n  requestBody: Parameters.body,\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp4, Parameters.restype2],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.contentType, Parameters.accept, Parameters.version, Parameters.requestId, Parameters.contentLength, Parameters.multipartContentType],\n  isXML: true,\n  contentType: \"application/xml; charset=utf-8\",\n  mediaType: \"xml\",\n  serializer: xmlSerializer\n};\nvar filterBlobsOperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.FilterBlobSegment,\n      headersMapper: Mappers.ContainerFilterBlobsHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerFilterBlobsExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.marker, Parameters.maxPageSize, Parameters.comp5, Parameters.where, Parameters.restype2],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1],\n  isXML: true,\n  serializer: xmlSerializer\n};\nvar acquireLeaseOperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.ContainerAcquireLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerAcquireLeaseExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2, Parameters.comp10],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.action, Parameters.duration, Parameters.proposedLeaseId],\n  isXML: true,\n  serializer: xmlSerializer\n};\nvar releaseLeaseOperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerReleaseLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerReleaseLeaseExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2, Parameters.comp10],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.action1, Parameters.leaseId1],\n  isXML: true,\n  serializer: xmlSerializer\n};\nvar renewLeaseOperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerRenewLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerRenewLeaseExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2, Parameters.comp10],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.leaseId1, Parameters.action2],\n  isXML: true,\n  serializer: xmlSerializer\n};\nvar breakLeaseOperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    202: {\n      headersMapper: Mappers.ContainerBreakLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerBreakLeaseExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2, Parameters.comp10],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.action3, Parameters.breakPeriod],\n  isXML: true,\n  serializer: xmlSerializer\n};\nvar changeLeaseOperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerChangeLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerChangeLeaseExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2, Parameters.comp10],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.leaseId1, Parameters.action4, Parameters.proposedLeaseId1],\n  isXML: true,\n  serializer: xmlSerializer\n};\nvar listBlobFlatSegmentOperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListBlobsFlatSegmentResponse,\n      headersMapper: Mappers.ContainerListBlobFlatSegmentHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerListBlobFlatSegmentExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp2, Parameters.prefix, Parameters.marker, Parameters.maxPageSize, Parameters.restype2, Parameters.include1],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1],\n  isXML: true,\n  serializer: xmlSerializer\n};\nvar listBlobHierarchySegmentOperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListBlobsHierarchySegmentResponse,\n      headersMapper: Mappers.ContainerListBlobHierarchySegmentHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerListBlobHierarchySegmentExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp2, Parameters.prefix, Parameters.marker, Parameters.maxPageSize, Parameters.restype2, Parameters.include1, Parameters.delimiter],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1],\n  isXML: true,\n  serializer: xmlSerializer\n};\nvar getAccountInfoOperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerGetAccountInfoHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerGetAccountInfoExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.comp, Parameters.restype1],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.accept1],\n  isXML: true,\n  serializer: xmlSerializer\n};","map":{"version":3,"mappings":"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","names":["coreHttp","Mappers","Parameters","Container","client","options","operationArguments","operationOptionsToRequestOptionsBase","sendOperationRequest","createOperationSpec","getPropertiesOperationSpec","deleteOperationSpec","setMetadataOperationSpec","getAccessPolicyOperationSpec","setAccessPolicyOperationSpec","restoreOperationSpec","sourceContainerName","renameOperationSpec","contentLength","multipartContentType","body","submitBatchOperationSpec","filterBlobsOperationSpec","acquireLeaseOperationSpec","leaseId","releaseLeaseOperationSpec","renewLeaseOperationSpec","breakLeaseOperationSpec","proposedLeaseId","changeLeaseOperationSpec","listBlobFlatSegmentOperationSpec","delimiter","listBlobHierarchySegmentOperationSpec","getAccountInfoOperationSpec","xmlSerializer","Serializer","path","httpMethod","responses","headersMapper","ContainerCreateHeaders","default","bodyMapper","StorageError","ContainerCreateExceptionHeaders","queryParameters","timeoutInSeconds","restype2","urlParameters","url","headerParameters","version","requestId","accept1","metadata","access","defaultEncryptionScope","preventEncryptionScopeOverride","isXML","serializer","ContainerGetPropertiesHeaders","ContainerGetPropertiesExceptionHeaders","ContainerDeleteHeaders","ContainerDeleteExceptionHeaders","ifModifiedSince","ifUnmodifiedSince","ContainerSetMetadataHeaders","ContainerSetMetadataExceptionHeaders","comp6","type","name","element","className","serializedName","xmlName","xmlIsWrapped","xmlElementName","ContainerGetAccessPolicyHeaders","ContainerGetAccessPolicyExceptionHeaders","comp7","ContainerSetAccessPolicyHeaders","ContainerSetAccessPolicyExceptionHeaders","requestBody","containerAcl","contentType","accept","mediaType","ContainerRestoreHeaders","ContainerRestoreExceptionHeaders","comp8","deletedContainerName","deletedContainerVersion","ContainerRenameHeaders","ContainerRenameExceptionHeaders","comp9","sourceLeaseId","ContainerSubmitBatchHeaders","ContainerSubmitBatchExceptionHeaders","comp4","FilterBlobSegment","ContainerFilterBlobsHeaders","ContainerFilterBlobsExceptionHeaders","marker","maxPageSize","comp5","where","ContainerAcquireLeaseHeaders","ContainerAcquireLeaseExceptionHeaders","comp10","action","duration","ContainerReleaseLeaseHeaders","ContainerReleaseLeaseExceptionHeaders","action1","leaseId1","ContainerRenewLeaseHeaders","ContainerRenewLeaseExceptionHeaders","action2","ContainerBreakLeaseHeaders","ContainerBreakLeaseExceptionHeaders","action3","breakPeriod","ContainerChangeLeaseHeaders","ContainerChangeLeaseExceptionHeaders","action4","proposedLeaseId1","ListBlobsFlatSegmentResponse","ContainerListBlobFlatSegmentHeaders","ContainerListBlobFlatSegmentExceptionHeaders","comp2","prefix","include1","ListBlobsHierarchySegmentResponse","ContainerListBlobHierarchySegmentHeaders","ContainerListBlobHierarchySegmentExceptionHeaders","ContainerGetAccountInfoHeaders","ContainerGetAccountInfoExceptionHeaders","comp","restype1"],"sourceRoot":"","sources":["../../../../../../src/generated/src/operations/container.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { StorageClientContext } from \"../storageClientContext\";\nimport {\n  ContainerCreateOptionalParams,\n  ContainerCreateResponse,\n  ContainerGetPropertiesOptionalParams,\n  ContainerGetPropertiesResponse,\n  ContainerDeleteOptionalParams,\n  ContainerDeleteResponse,\n  ContainerSetMetadataOptionalParams,\n  ContainerSetMetadataResponse,\n  ContainerGetAccessPolicyOptionalParams,\n  ContainerGetAccessPolicyResponse,\n  ContainerSetAccessPolicyOptionalParams,\n  ContainerSetAccessPolicyResponse,\n  ContainerRestoreOptionalParams,\n  ContainerRestoreResponse,\n  ContainerRenameOptionalParams,\n  ContainerRenameResponse,\n  ContainerSubmitBatchOptionalParams,\n  ContainerSubmitBatchResponse,\n  ContainerFilterBlobsOptionalParams,\n  ContainerFilterBlobsResponse,\n  ContainerAcquireLeaseOptionalParams,\n  ContainerAcquireLeaseResponse,\n  ContainerReleaseLeaseOptionalParams,\n  ContainerReleaseLeaseResponse,\n  ContainerRenewLeaseOptionalParams,\n  ContainerRenewLeaseResponse,\n  ContainerBreakLeaseOptionalParams,\n  ContainerBreakLeaseResponse,\n  ContainerChangeLeaseOptionalParams,\n  ContainerChangeLeaseResponse,\n  ContainerListBlobFlatSegmentOptionalParams,\n  ContainerListBlobFlatSegmentResponse,\n  ContainerListBlobHierarchySegmentOptionalParams,\n  ContainerListBlobHierarchySegmentResponse,\n  ContainerGetAccountInfoResponse\n} from \"../models\";\n\n/** Class representing a Container. */\nexport class Container {\n  private readonly client: StorageClientContext;\n\n  /**\n   * Initialize a new instance of the class Container class.\n   * @param client Reference to the service client\n   */\n  constructor(client: StorageClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * creates a new container under the specified account. If the container with the same name already\n   * exists, the operation fails\n   * @param options The options parameters.\n   */\n  create(\n    options?: ContainerCreateOptionalParams\n  ): Promise<ContainerCreateResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      createOperationSpec\n    ) as Promise<ContainerCreateResponse>;\n  }\n\n  /**\n   * returns all user-defined metadata and system properties for the specified container. The data\n   * returned does not include the container's list of blobs\n   * @param options The options parameters.\n   */\n  getProperties(\n    options?: ContainerGetPropertiesOptionalParams\n  ): Promise<ContainerGetPropertiesResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      getPropertiesOperationSpec\n    ) as Promise<ContainerGetPropertiesResponse>;\n  }\n\n  /**\n   * operation marks the specified container for deletion. The container and any blobs contained within\n   * it are later deleted during garbage collection\n   * @param options The options parameters.\n   */\n  delete(\n    options?: ContainerDeleteOptionalParams\n  ): Promise<ContainerDeleteResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      deleteOperationSpec\n    ) as Promise<ContainerDeleteResponse>;\n  }\n\n  /**\n   * operation sets one or more user-defined name-value pairs for the specified container.\n   * @param options The options parameters.\n   */\n  setMetadata(\n    options?: ContainerSetMetadataOptionalParams\n  ): Promise<ContainerSetMetadataResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      setMetadataOperationSpec\n    ) as Promise<ContainerSetMetadataResponse>;\n  }\n\n  /**\n   * gets the permissions for the specified container. The permissions indicate whether container data\n   * may be accessed publicly.\n   * @param options The options parameters.\n   */\n  getAccessPolicy(\n    options?: ContainerGetAccessPolicyOptionalParams\n  ): Promise<ContainerGetAccessPolicyResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      getAccessPolicyOperationSpec\n    ) as Promise<ContainerGetAccessPolicyResponse>;\n  }\n\n  /**\n   * sets the permissions for the specified container. The permissions indicate whether blobs in a\n   * container may be accessed publicly.\n   * @param options The options parameters.\n   */\n  setAccessPolicy(\n    options?: ContainerSetAccessPolicyOptionalParams\n  ): Promise<ContainerSetAccessPolicyResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      setAccessPolicyOperationSpec\n    ) as Promise<ContainerSetAccessPolicyResponse>;\n  }\n\n  /**\n   * Restores a previously-deleted container.\n   * @param options The options parameters.\n   */\n  restore(\n    options?: ContainerRestoreOptionalParams\n  ): Promise<ContainerRestoreResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      restoreOperationSpec\n    ) as Promise<ContainerRestoreResponse>;\n  }\n\n  /**\n   * Renames an existing container.\n   * @param sourceContainerName Required.  Specifies the name of the container to rename.\n   * @param options The options parameters.\n   */\n  rename(\n    sourceContainerName: string,\n    options?: ContainerRenameOptionalParams\n  ): Promise<ContainerRenameResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      sourceContainerName,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      renameOperationSpec\n    ) as Promise<ContainerRenameResponse>;\n  }\n\n  /**\n   * The Batch operation allows multiple API calls to be embedded into a single HTTP request.\n   * @param contentLength The length of the request.\n   * @param multipartContentType Required. The value of this header must be multipart/mixed with a batch\n   *                             boundary. Example header value: multipart/mixed; boundary=batch_<GUID>\n   * @param body Initial data\n   * @param options The options parameters.\n   */\n  submitBatch(\n    contentLength: number,\n    multipartContentType: string,\n    body: coreHttp.HttpRequestBody,\n    options?: ContainerSubmitBatchOptionalParams\n  ): Promise<ContainerSubmitBatchResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      contentLength,\n      multipartContentType,\n      body,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      submitBatchOperationSpec\n    ) as Promise<ContainerSubmitBatchResponse>;\n  }\n\n  /**\n   * The Filter Blobs operation enables callers to list blobs in a container whose tags match a given\n   * search expression.  Filter blobs searches within the given container.\n   * @param options The options parameters.\n   */\n  filterBlobs(\n    options?: ContainerFilterBlobsOptionalParams\n  ): Promise<ContainerFilterBlobsResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      filterBlobsOperationSpec\n    ) as Promise<ContainerFilterBlobsResponse>;\n  }\n\n  /**\n   * [Update] establishes and manages a lock on a container for delete operations. The lock duration can\n   * be 15 to 60 seconds, or can be infinite\n   * @param options The options parameters.\n   */\n  acquireLease(\n    options?: ContainerAcquireLeaseOptionalParams\n  ): Promise<ContainerAcquireLeaseResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      acquireLeaseOperationSpec\n    ) as Promise<ContainerAcquireLeaseResponse>;\n  }\n\n  /**\n   * [Update] establishes and manages a lock on a container for delete operations. The lock duration can\n   * be 15 to 60 seconds, or can be infinite\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param options The options parameters.\n   */\n  releaseLease(\n    leaseId: string,\n    options?: ContainerReleaseLeaseOptionalParams\n  ): Promise<ContainerReleaseLeaseResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      leaseId,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      releaseLeaseOperationSpec\n    ) as Promise<ContainerReleaseLeaseResponse>;\n  }\n\n  /**\n   * [Update] establishes and manages a lock on a container for delete operations. The lock duration can\n   * be 15 to 60 seconds, or can be infinite\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param options The options parameters.\n   */\n  renewLease(\n    leaseId: string,\n    options?: ContainerRenewLeaseOptionalParams\n  ): Promise<ContainerRenewLeaseResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      leaseId,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      renewLeaseOperationSpec\n    ) as Promise<ContainerRenewLeaseResponse>;\n  }\n\n  /**\n   * [Update] establishes and manages a lock on a container for delete operations. The lock duration can\n   * be 15 to 60 seconds, or can be infinite\n   * @param options The options parameters.\n   */\n  breakLease(\n    options?: ContainerBreakLeaseOptionalParams\n  ): Promise<ContainerBreakLeaseResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      breakLeaseOperationSpec\n    ) as Promise<ContainerBreakLeaseResponse>;\n  }\n\n  /**\n   * [Update] establishes and manages a lock on a container for delete operations. The lock duration can\n   * be 15 to 60 seconds, or can be infinite\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param proposedLeaseId Proposed lease ID, in a GUID string format. The Blob service returns 400\n   *                        (Invalid request) if the proposed lease ID is not in the correct format. See Guid Constructor\n   *                        (String) for a list of valid GUID string formats.\n   * @param options The options parameters.\n   */\n  changeLease(\n    leaseId: string,\n    proposedLeaseId: string,\n    options?: ContainerChangeLeaseOptionalParams\n  ): Promise<ContainerChangeLeaseResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      leaseId,\n      proposedLeaseId,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      changeLeaseOperationSpec\n    ) as Promise<ContainerChangeLeaseResponse>;\n  }\n\n  /**\n   * [Update] The List Blobs operation returns a list of the blobs under the specified container\n   * @param options The options parameters.\n   */\n  listBlobFlatSegment(\n    options?: ContainerListBlobFlatSegmentOptionalParams\n  ): Promise<ContainerListBlobFlatSegmentResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      listBlobFlatSegmentOperationSpec\n    ) as Promise<ContainerListBlobFlatSegmentResponse>;\n  }\n\n  /**\n   * [Update] The List Blobs operation returns a list of the blobs under the specified container\n   * @param delimiter When the request includes this parameter, the operation returns a BlobPrefix\n   *                  element in the response body that acts as a placeholder for all blobs whose names begin with the\n   *                  same substring up to the appearance of the delimiter character. The delimiter may be a single\n   *                  character or a string.\n   * @param options The options parameters.\n   */\n  listBlobHierarchySegment(\n    delimiter: string,\n    options?: ContainerListBlobHierarchySegmentOptionalParams\n  ): Promise<ContainerListBlobHierarchySegmentResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      delimiter,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      listBlobHierarchySegmentOperationSpec\n    ) as Promise<ContainerListBlobHierarchySegmentResponse>;\n  }\n\n  /**\n   * Returns the sku name and account kind\n   * @param options The options parameters.\n   */\n  getAccountInfo(\n    options?: coreHttp.OperationOptions\n  ): Promise<ContainerGetAccountInfoResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      getAccountInfoOperationSpec\n    ) as Promise<ContainerGetAccountInfoResponse>;\n  }\n}\n// Operation Specifications\nconst xmlSerializer = new coreHttp.Serializer(Mappers, /* isXml */ true);\n\nconst createOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.ContainerCreateHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerCreateExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.metadata,\n    Parameters.access,\n    Parameters.defaultEncryptionScope,\n    Parameters.preventEncryptionScopeOverride\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst getPropertiesOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerGetPropertiesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerGetPropertiesExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.leaseId\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst deleteOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    202: {\n      headersMapper: Mappers.ContainerDeleteHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerDeleteExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst setMetadataOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerSetMetadataHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerSetMetadataExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.restype2,\n    Parameters.comp6\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.metadata,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst getAccessPolicyOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: { name: \"Composite\", className: \"SignedIdentifier\" }\n          }\n        },\n        serializedName: \"SignedIdentifiers\",\n        xmlName: \"SignedIdentifiers\",\n        xmlIsWrapped: true,\n        xmlElementName: \"SignedIdentifier\"\n      },\n      headersMapper: Mappers.ContainerGetAccessPolicyHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerGetAccessPolicyExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.restype2,\n    Parameters.comp7\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.leaseId\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst setAccessPolicyOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerSetAccessPolicyHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerSetAccessPolicyExceptionHeaders\n    }\n  },\n  requestBody: Parameters.containerAcl,\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.restype2,\n    Parameters.comp7\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.contentType,\n    Parameters.accept,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.access,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince\n  ],\n  isXML: true,\n  contentType: \"application/xml; charset=utf-8\",\n  mediaType: \"xml\",\n  serializer: xmlSerializer\n};\nconst restoreOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.ContainerRestoreHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerRestoreExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.restype2,\n    Parameters.comp8\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.deletedContainerName,\n    Parameters.deletedContainerVersion\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst renameOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerRenameHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerRenameExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.restype2,\n    Parameters.comp9\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.sourceContainerName,\n    Parameters.sourceLeaseId\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst submitBatchOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {\n      bodyMapper: {\n        type: { name: \"Stream\" },\n        serializedName: \"parsedResponse\"\n      },\n      headersMapper: Mappers.ContainerSubmitBatchHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerSubmitBatchExceptionHeaders\n    }\n  },\n  requestBody: Parameters.body,\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.comp4,\n    Parameters.restype2\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.contentType,\n    Parameters.accept,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.contentLength,\n    Parameters.multipartContentType\n  ],\n  isXML: true,\n  contentType: \"application/xml; charset=utf-8\",\n  mediaType: \"xml\",\n  serializer: xmlSerializer\n};\nconst filterBlobsOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.FilterBlobSegment,\n      headersMapper: Mappers.ContainerFilterBlobsHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerFilterBlobsExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.marker,\n    Parameters.maxPageSize,\n    Parameters.comp5,\n    Parameters.where,\n    Parameters.restype2\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst acquireLeaseOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.ContainerAcquireLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerAcquireLeaseExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.restype2,\n    Parameters.comp10\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.action,\n    Parameters.duration,\n    Parameters.proposedLeaseId\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst releaseLeaseOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerReleaseLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerReleaseLeaseExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.restype2,\n    Parameters.comp10\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.action1,\n    Parameters.leaseId1\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst renewLeaseOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerRenewLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerRenewLeaseExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.restype2,\n    Parameters.comp10\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.leaseId1,\n    Parameters.action2\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst breakLeaseOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    202: {\n      headersMapper: Mappers.ContainerBreakLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerBreakLeaseExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.restype2,\n    Parameters.comp10\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.action3,\n    Parameters.breakPeriod\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst changeLeaseOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerChangeLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerChangeLeaseExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.restype2,\n    Parameters.comp10\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.leaseId1,\n    Parameters.action4,\n    Parameters.proposedLeaseId1\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst listBlobFlatSegmentOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListBlobsFlatSegmentResponse,\n      headersMapper: Mappers.ContainerListBlobFlatSegmentHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerListBlobFlatSegmentExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.comp2,\n    Parameters.prefix,\n    Parameters.marker,\n    Parameters.maxPageSize,\n    Parameters.restype2,\n    Parameters.include1\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst listBlobHierarchySegmentOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListBlobsHierarchySegmentResponse,\n      headersMapper: Mappers.ContainerListBlobHierarchySegmentHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerListBlobHierarchySegmentExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.comp2,\n    Parameters.prefix,\n    Parameters.marker,\n    Parameters.maxPageSize,\n    Parameters.restype2,\n    Parameters.include1,\n    Parameters.delimiter\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst getAccountInfoOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerGetAccountInfoHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerGetAccountInfoExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.comp, Parameters.restype1],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.accept1],\n  isXML: true,\n  serializer: xmlSerializer\n};\n"]},"metadata":{},"sourceType":"module"}
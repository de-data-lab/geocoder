{"ast":null,"code":"/*! @azure/msal-common v9.0.1 2022-12-07 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { Authority } from './Authority.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar AuthorityFactory = /** @class */function () {\n  function AuthorityFactory() {}\n  /**\r\n   * Create an authority object of the correct type based on the url\r\n   * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)\r\n   *\r\n   * Also performs endpoint discovery.\r\n   *\r\n   * @param authorityUri\r\n   * @param networkClient\r\n   * @param protocolMode\r\n   */\n  AuthorityFactory.createDiscoveredInstance = function (authorityUri, networkClient, cacheManager, authorityOptions, logger, proxyUrl) {\n    return __awaiter(this, void 0, void 0, function () {\n      var acquireTokenAuthority, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            acquireTokenAuthority = AuthorityFactory.createInstance(authorityUri, networkClient, cacheManager, authorityOptions, logger, proxyUrl);\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, acquireTokenAuthority.resolveEndpointsAsync()];\n          case 2:\n            _a.sent();\n            return [2 /*return*/, acquireTokenAuthority];\n          case 3:\n            e_1 = _a.sent();\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(e_1);\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\r\n   * Create an authority object of the correct type based on the url\r\n   * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)\r\n   *\r\n   * Does not perform endpoint discovery.\r\n   *\r\n   * @param authorityUrl\r\n   * @param networkInterface\r\n   * @param protocolMode\r\n   */\n  AuthorityFactory.createInstance = function (authorityUrl, networkInterface, cacheManager, authorityOptions, logger, proxyUrl) {\n    // Throw error if authority url is empty\n    if (StringUtils.isEmpty(authorityUrl)) {\n      throw ClientConfigurationError.createUrlEmptyError();\n    }\n    return new Authority(authorityUrl, networkInterface, cacheManager, authorityOptions, logger, proxyUrl);\n  };\n  return AuthorityFactory;\n}();\nexport { AuthorityFactory };","map":{"version":3,"mappings":";;;;;;;;;AAAA;;;AAGG;AAWH;EAAA;EAEI;;;;;;;;;AASG;EACUA,yCAAwB,GAArC,UACIC,YAAoB,EACpBC,aAA6B,EAC7BC,YAA2B,EAC3BC,gBAAkC,EAClCC,MAAc,EACdC,QAAiB;;;;;;YAGXC,qBAAqB,GAAcP,gBAAgB,CAACQ,cAAc,CACpEP,YAAY,EACZC,aAAa,EACbC,YAAY,EACZC,gBAAgB,EAChBC,MAAM,EACNC,QAAQ,CACX;;;;YAGG,qBAAMC,qBAAqB,CAACE,qBAAqB,EAAE;;YAAnDC,SAAmD;YACnD,sBAAOH,qBAAqB,CAAC;;;YAE7B,MAAMI,eAAe,CAACC,sCAAsC,CAACC,GAAC,CAAC;;;;;;EAEtE;EAED;;;;;;;;;AASG;EACIb,+BAAc,GAArB,UACIc,YAAoB,EACpBC,gBAAgC,EAChCZ,YAA2B,EAC3BC,gBAAkC,EAClCC,MAAc,EACdC,QAAiB;;IAGjB,IAAIU,WAAW,CAACC,OAAO,CAACH,YAAY,CAAC,EAAE;MACnC,MAAMI,wBAAwB,CAACC,mBAAmB,EAAE;IACvD;IAED,OAAO,IAAIC,SAAS,CAACN,YAAY,EAAEC,gBAAgB,EAAEZ,YAAY,EAAEC,gBAAgB,EAAEC,MAAM,EAAEC,QAAQ,CAAC;GACzG;EACL,OAACN;AAAD,CAAC","names":["AuthorityFactory","authorityUri","networkClient","cacheManager","authorityOptions","logger","proxyUrl","acquireTokenAuthority","createInstance","resolveEndpointsAsync","_a","ClientAuthError","createEndpointDiscoveryIncompleteError","e_1","authorityUrl","networkInterface","StringUtils","isEmpty","ClientConfigurationError","createUrlEmptyError","Authority"],"sources":["../../src/authority/AuthorityFactory.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { Authority } from \"./Authority\";\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\nimport { INetworkModule } from \"../network/INetworkModule\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { ICacheManager } from \"../cache/interface/ICacheManager\";\nimport { AuthorityOptions } from \"./AuthorityOptions\";\nimport { Logger } from \"../logger/Logger\";\n\nexport class AuthorityFactory {\n\n    /**\n     * Create an authority object of the correct type based on the url\n     * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)\n     *\n     * Also performs endpoint discovery.\n     *\n     * @param authorityUri\n     * @param networkClient\n     * @param protocolMode\n     */\n    static async createDiscoveredInstance(\n        authorityUri: string,\n        networkClient: INetworkModule,\n        cacheManager: ICacheManager,\n        authorityOptions: AuthorityOptions,\n        logger: Logger,\n        proxyUrl?: string\n    ): Promise<Authority> {\n        // Initialize authority and perform discovery endpoint check.\n        const acquireTokenAuthority: Authority = AuthorityFactory.createInstance(\n            authorityUri,\n            networkClient,\n            cacheManager,\n            authorityOptions,\n            logger,\n            proxyUrl\n        );\n\n        try {\n            await acquireTokenAuthority.resolveEndpointsAsync();\n            return acquireTokenAuthority;\n        } catch (e) {\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(e);\n        }\n    }\n\n    /**\n     * Create an authority object of the correct type based on the url\n     * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)\n     *\n     * Does not perform endpoint discovery.\n     *\n     * @param authorityUrl\n     * @param networkInterface\n     * @param protocolMode\n     */\n    static createInstance(\n        authorityUrl: string,\n        networkInterface: INetworkModule,\n        cacheManager: ICacheManager,\n        authorityOptions: AuthorityOptions,\n        logger: Logger,\n        proxyUrl?: string\n    ): Authority {\n        // Throw error if authority url is empty\n        if (StringUtils.isEmpty(authorityUrl)) {\n            throw ClientConfigurationError.createUrlEmptyError();\n        }\n\n        return new Authority(authorityUrl, networkInterface, cacheManager, authorityOptions, logger, proxyUrl);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
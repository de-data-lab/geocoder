{"ast":null,"code":"import _classCallCheck from \"/Users/tbeckett/Documents/TI - Project Info/JavaScript_end_to_end_client_file_upload_to_Azure_Storage_Blobs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tbeckett/Documents/TI - Project Info/JavaScript_end_to_end_client_file_upload_to_Azure_Storage_Blobs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/// <reference path=\"../shims-public.d.ts\" />\nvar listenersMap = new WeakMap();\nvar abortedMap = new WeakMap();\n/**\n * An aborter instance implements AbortSignal interface, can abort HTTP requests.\n *\n * - Call AbortSignal.none to create a new AbortSignal instance that cannot be cancelled.\n * Use `AbortSignal.none` when you are required to pass a cancellation token but the operation\n * cannot or will not ever be cancelled.\n *\n * @example\n * Abort without timeout\n * ```ts\n * await doAsyncWork(AbortSignal.none);\n * ```\n */\nexport var AbortSignal = /*#__PURE__*/function () {\n  function AbortSignal() {\n    _classCallCheck(this, AbortSignal);\n    /**\n     * onabort event listener.\n     */\n    this.onabort = null;\n    listenersMap.set(this, []);\n    abortedMap.set(this, false);\n  }\n  /**\n   * Status of whether aborted or not.\n   *\n   * @readonly\n   */\n  _createClass(AbortSignal, [{\n    key: \"aborted\",\n    get: function get() {\n      if (!abortedMap.has(this)) {\n        throw new TypeError(\"Expected `this` to be an instance of AbortSignal.\");\n      }\n      return abortedMap.get(this);\n    }\n    /**\n     * Creates a new AbortSignal instance that will never be aborted.\n     *\n     * @readonly\n     */\n  }, {\n    key: \"addEventListener\",\n    value:\n    /**\n     * Added new \"abort\" event listener, only support \"abort\" event.\n     *\n     * @param _type - Only support \"abort\" event\n     * @param listener - The listener to be added\n     */\n    function addEventListener(\n    // tslint:disable-next-line:variable-name\n    _type, listener) {\n      if (!listenersMap.has(this)) {\n        throw new TypeError(\"Expected `this` to be an instance of AbortSignal.\");\n      }\n      var listeners = listenersMap.get(this);\n      listeners.push(listener);\n    }\n    /**\n     * Remove \"abort\" event listener, only support \"abort\" event.\n     *\n     * @param _type - Only support \"abort\" event\n     * @param listener - The listener to be removed\n     */\n  }, {\n    key: \"removeEventListener\",\n    value: function removeEventListener(\n    // tslint:disable-next-line:variable-name\n    _type, listener) {\n      if (!listenersMap.has(this)) {\n        throw new TypeError(\"Expected `this` to be an instance of AbortSignal.\");\n      }\n      var listeners = listenersMap.get(this);\n      var index = listeners.indexOf(listener);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    }\n    /**\n     * Dispatches a synthetic event to the AbortSignal.\n     */\n  }, {\n    key: \"dispatchEvent\",\n    value: function dispatchEvent(_event) {\n      throw new Error(\"This is a stub dispatchEvent implementation that should not be used.  It only exists for type-checking purposes.\");\n    }\n  }], [{\n    key: \"none\",\n    get: function get() {\n      return new AbortSignal();\n    }\n  }]);\n  return AbortSignal;\n}();\n/**\n * Helper to trigger an abort event immediately, the onabort and all abort event listeners will be triggered.\n * Will try to trigger abort event for all linked AbortSignal nodes.\n *\n * - If there is a timeout, the timer will be cancelled.\n * - If aborted is true, nothing will happen.\n *\n * @internal\n */\n// eslint-disable-next-line @azure/azure-sdk/ts-use-interface-parameters\nexport function abortSignal(signal) {\n  if (signal.aborted) {\n    return;\n  }\n  if (signal.onabort) {\n    signal.onabort.call(signal);\n  }\n  var listeners = listenersMap.get(signal);\n  if (listeners) {\n    // Create a copy of listeners so mutations to the array\n    // (e.g. via removeListener calls) don't affect the listeners\n    // we invoke.\n    listeners.slice().forEach(function (listener) {\n      listener.call(signal, {\n        type: \"abort\"\n      });\n    });\n  }\n  abortedMap.set(signal, true);\n}","map":{"version":3,"mappings":";;AAAA;AACA;AAGA;AAIA,IAAMA,YAAY,GAAG,IAAIC,OAAO,EAAqC;AACrE,IAAMC,UAAU,GAAG,IAAID,OAAO,EAAwB;AA6BtD;;;;;;;;;;;;;AAaA,WAAaE,WAAW;EACtB;IAAA;IA2BA;;;IAGO,YAAO,GAAiC,IAAI;IA7BjDH,YAAY,CAACI,GAAG,CAAC,IAAI,EAAE,EAAE,CAAC;IAC1BF,UAAU,CAACE,GAAG,CAAC,IAAI,EAAE,KAAK,CAAC;EAC7B;EAEA;;;;;EAAA;IAAA;IAAA,KAKA,eAAkB;MAChB,IAAI,CAACF,UAAU,CAACG,GAAG,CAAC,IAAI,CAAC,EAAE;QACzB,MAAM,IAAIC,SAAS,CAAC,mDAAmD,CAAC;;MAG1E,OAAOJ,UAAU,CAACK,GAAG,CAAC,IAAI,CAAE;IAC9B;IAEA;;;;;EAAA;IAAA;IAAA;IAcA;;;;;;IAMO;IACL;IACAC,KAAc,EACdC,QAAiD;MAEjD,IAAI,CAACT,YAAY,CAACK,GAAG,CAAC,IAAI,CAAC,EAAE;QAC3B,MAAM,IAAIC,SAAS,CAAC,mDAAmD,CAAC;;MAG1E,IAAMI,SAAS,GAAGV,YAAY,CAACO,GAAG,CAAC,IAAI,CAAE;MACzCG,SAAS,CAACC,IAAI,CAACF,QAAQ,CAAC;IAC1B;IAEA;;;;;;EAAA;IAAA;IAAA,OAMO;IACL;IACAD,KAAc,EACdC,QAAiD;MAEjD,IAAI,CAACT,YAAY,CAACK,GAAG,CAAC,IAAI,CAAC,EAAE;QAC3B,MAAM,IAAIC,SAAS,CAAC,mDAAmD,CAAC;;MAG1E,IAAMI,SAAS,GAAGV,YAAY,CAACO,GAAG,CAAC,IAAI,CAAE;MAEzC,IAAMK,KAAK,GAAGF,SAAS,CAACG,OAAO,CAACJ,QAAQ,CAAC;MACzC,IAAIG,KAAK,GAAG,CAAC,CAAC,EAAE;QACdF,SAAS,CAACI,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;;IAE9B;IAEA;;;EAAA;IAAA;IAAA,OAGA,uBAAcG,MAAa;MACzB,MAAM,IAAIC,KAAK,CACb,kHAAkH,CACnH;IACH;EAAC;IAAA;IAAA,KA1DM,eAAe;MACpB,OAAO,IAAIb,WAAW,EAAE;IAC1B;EAAC;EAAA;AAAA;AA2DH;;;;;;;;;AASA;AACA,OAAM,SAAUc,WAAW,CAACC,MAAmB;EAC7C,IAAIA,MAAM,CAACC,OAAO,EAAE;IAClB;;EAGF,IAAID,MAAM,CAACE,OAAO,EAAE;IAClBF,MAAM,CAACE,OAAO,CAACC,IAAI,CAACH,MAAM,CAAC;;EAG7B,IAAMR,SAAS,GAAGV,YAAY,CAACO,GAAG,CAACW,MAAM,CAAE;EAC3C,IAAIR,SAAS,EAAE;IACb;IACA;IACA;IACAA,SAAS,CAACY,KAAK,EAAE,CAACC,OAAO,CAAC,UAACd,QAAQ,EAAI;MACrCA,QAAQ,CAACY,IAAI,CAACH,MAAM,EAAE;QAAEM,IAAI,EAAE;MAAO,CAAE,CAAC;IAC1C,CAAC,CAAC;;EAGJtB,UAAU,CAACE,GAAG,CAACc,MAAM,EAAE,IAAI,CAAC;AAC9B","names":["listenersMap","WeakMap","abortedMap","AbortSignal","set","has","TypeError","get","_type","listener","listeners","push","index","indexOf","splice","_event","Error","abortSignal","signal","aborted","onabort","call","slice","forEach","type"],"sourceRoot":"","sources":["../../src/AbortSignal.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n// eslint-disable-next-line @typescript-eslint/triple-slash-reference\n/// <reference path=\"../shims-public.d.ts\" />\n\ntype AbortEventListener = (this: AbortSignalLike, ev?: any) => any;\n\nconst listenersMap = new WeakMap<AbortSignal, AbortEventListener[]>();\nconst abortedMap = new WeakMap<AbortSignal, boolean>();\n\n/**\n * Allows the request to be aborted upon firing of the \"abort\" event.\n * Compatible with the browser built-in AbortSignal and common polyfills.\n */\nexport interface AbortSignalLike {\n  /**\n   * Indicates if the signal has already been aborted.\n   */\n  readonly aborted: boolean;\n  /**\n   * Add new \"abort\" event listener, only support \"abort\" event.\n   */\n  addEventListener(\n    type: \"abort\",\n    listener: (this: AbortSignalLike, ev: any) => any,\n    options?: any\n  ): void;\n  /**\n   * Remove \"abort\" event listener, only support \"abort\" event.\n   */\n  removeEventListener(\n    type: \"abort\",\n    listener: (this: AbortSignalLike, ev: any) => any,\n    options?: any\n  ): void;\n}\n\n/**\n * An aborter instance implements AbortSignal interface, can abort HTTP requests.\n *\n * - Call AbortSignal.none to create a new AbortSignal instance that cannot be cancelled.\n * Use `AbortSignal.none` when you are required to pass a cancellation token but the operation\n * cannot or will not ever be cancelled.\n *\n * @example\n * Abort without timeout\n * ```ts\n * await doAsyncWork(AbortSignal.none);\n * ```\n */\nexport class AbortSignal implements AbortSignalLike {\n  constructor() {\n    listenersMap.set(this, []);\n    abortedMap.set(this, false);\n  }\n\n  /**\n   * Status of whether aborted or not.\n   *\n   * @readonly\n   */\n  public get aborted(): boolean {\n    if (!abortedMap.has(this)) {\n      throw new TypeError(\"Expected `this` to be an instance of AbortSignal.\");\n    }\n\n    return abortedMap.get(this)!;\n  }\n\n  /**\n   * Creates a new AbortSignal instance that will never be aborted.\n   *\n   * @readonly\n   */\n  public static get none(): AbortSignal {\n    return new AbortSignal();\n  }\n\n  /**\n   * onabort event listener.\n   */\n  public onabort: ((ev?: Event) => any) | null = null;\n\n  /**\n   * Added new \"abort\" event listener, only support \"abort\" event.\n   *\n   * @param _type - Only support \"abort\" event\n   * @param listener - The listener to be added\n   */\n  public addEventListener(\n    // tslint:disable-next-line:variable-name\n    _type: \"abort\",\n    listener: (this: AbortSignalLike, ev: any) => any\n  ): void {\n    if (!listenersMap.has(this)) {\n      throw new TypeError(\"Expected `this` to be an instance of AbortSignal.\");\n    }\n\n    const listeners = listenersMap.get(this)!;\n    listeners.push(listener);\n  }\n\n  /**\n   * Remove \"abort\" event listener, only support \"abort\" event.\n   *\n   * @param _type - Only support \"abort\" event\n   * @param listener - The listener to be removed\n   */\n  public removeEventListener(\n    // tslint:disable-next-line:variable-name\n    _type: \"abort\",\n    listener: (this: AbortSignalLike, ev: any) => any\n  ): void {\n    if (!listenersMap.has(this)) {\n      throw new TypeError(\"Expected `this` to be an instance of AbortSignal.\");\n    }\n\n    const listeners = listenersMap.get(this)!;\n\n    const index = listeners.indexOf(listener);\n    if (index > -1) {\n      listeners.splice(index, 1);\n    }\n  }\n\n  /**\n   * Dispatches a synthetic event to the AbortSignal.\n   */\n  dispatchEvent(_event: Event): boolean {\n    throw new Error(\n      \"This is a stub dispatchEvent implementation that should not be used.  It only exists for type-checking purposes.\"\n    );\n  }\n}\n\n/**\n * Helper to trigger an abort event immediately, the onabort and all abort event listeners will be triggered.\n * Will try to trigger abort event for all linked AbortSignal nodes.\n *\n * - If there is a timeout, the timer will be cancelled.\n * - If aborted is true, nothing will happen.\n *\n * @internal\n */\n// eslint-disable-next-line @azure/azure-sdk/ts-use-interface-parameters\nexport function abortSignal(signal: AbortSignal): void {\n  if (signal.aborted) {\n    return;\n  }\n\n  if (signal.onabort) {\n    signal.onabort.call(signal);\n  }\n\n  const listeners = listenersMap.get(signal)!;\n  if (listeners) {\n    // Create a copy of listeners so mutations to the array\n    // (e.g. via removeListener calls) don't affect the listeners\n    // we invoke.\n    listeners.slice().forEach((listener) => {\n      listener.call(signal, { type: \"abort\" });\n    });\n  }\n\n  abortedMap.set(signal, true);\n}\n"]},"metadata":{},"sourceType":"module"}
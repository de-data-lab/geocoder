{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/tbeckett/Documents/TI - Project Info/JavaScript_end_to_end_client_file_upload_to_Azure_Storage_Blobs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"/Users/tbeckett/Documents/TI - Project Info/JavaScript_end_to_end_client_file_upload_to_Azure_Storage_Blobs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tbeckett/Documents/TI - Project Info/JavaScript_end_to_end_client_file_upload_to_Azure_Storage_Blobs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { URLBuilder, URLQuery } from \"../url\";\nimport { isObject } from \"./utils\";\nvar RedactedString = \"REDACTED\";\nvar defaultAllowedHeaderNames = [\"x-ms-client-request-id\", \"x-ms-return-client-request-id\", \"x-ms-useragent\", \"x-ms-correlation-request-id\", \"x-ms-request-id\", \"client-request-id\", \"ms-cv\", \"return-client-request-id\", \"traceparent\", \"Access-Control-Allow-Credentials\", \"Access-Control-Allow-Headers\", \"Access-Control-Allow-Methods\", \"Access-Control-Allow-Origin\", \"Access-Control-Expose-Headers\", \"Access-Control-Max-Age\", \"Access-Control-Request-Headers\", \"Access-Control-Request-Method\", \"Origin\", \"Accept\", \"Accept-Encoding\", \"Cache-Control\", \"Connection\", \"Content-Length\", \"Content-Type\", \"Date\", \"ETag\", \"Expires\", \"If-Match\", \"If-Modified-Since\", \"If-None-Match\", \"If-Unmodified-Since\", \"Last-Modified\", \"Pragma\", \"Request-Id\", \"Retry-After\", \"Server\", \"Transfer-Encoding\", \"User-Agent\", \"WWW-Authenticate\"];\nvar defaultAllowedQueryParameters = [\"api-version\"];\nexport var Sanitizer = /*#__PURE__*/function () {\n  function Sanitizer() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$allowedHeaderNam = _ref.allowedHeaderNames,\n      allowedHeaderNames = _ref$allowedHeaderNam === void 0 ? [] : _ref$allowedHeaderNam,\n      _ref$allowedQueryPara = _ref.allowedQueryParameters,\n      allowedQueryParameters = _ref$allowedQueryPara === void 0 ? [] : _ref$allowedQueryPara;\n    _classCallCheck(this, Sanitizer);\n    allowedHeaderNames = Array.isArray(allowedHeaderNames) ? defaultAllowedHeaderNames.concat(allowedHeaderNames) : defaultAllowedHeaderNames;\n    allowedQueryParameters = Array.isArray(allowedQueryParameters) ? defaultAllowedQueryParameters.concat(allowedQueryParameters) : defaultAllowedQueryParameters;\n    this.allowedHeaderNames = new Set(allowedHeaderNames.map(function (n) {\n      return n.toLowerCase();\n    }));\n    this.allowedQueryParameters = new Set(allowedQueryParameters.map(function (p) {\n      return p.toLowerCase();\n    }));\n  }\n  _createClass(Sanitizer, [{\n    key: \"sanitize\",\n    value: function sanitize(obj) {\n      var _this = this;\n      var seen = new Set();\n      return JSON.stringify(obj, function (key, value) {\n        // Ensure Errors include their interesting non-enumerable members\n        if (value instanceof Error) {\n          return Object.assign(Object.assign({}, value), {\n            name: value.name,\n            message: value.message\n          });\n        }\n        if (key === \"_headersMap\") {\n          return _this.sanitizeHeaders(value);\n        } else if (key === \"url\") {\n          return _this.sanitizeUrl(value);\n        } else if (key === \"query\") {\n          return _this.sanitizeQuery(value);\n        } else if (key === \"body\") {\n          // Don't log the request body\n          return undefined;\n        } else if (key === \"response\") {\n          // Don't log response again\n          return undefined;\n        } else if (key === \"operationSpec\") {\n          // When using sendOperationRequest, the request carries a massive\n          // field with the autorest spec. No need to log it.\n          return undefined;\n        } else if (Array.isArray(value) || isObject(value)) {\n          if (seen.has(value)) {\n            return \"[Circular]\";\n          }\n          seen.add(value);\n        }\n        return value;\n      }, 2);\n    }\n  }, {\n    key: \"sanitizeHeaders\",\n    value: function sanitizeHeaders(value) {\n      return this.sanitizeObject(value, this.allowedHeaderNames, function (v, k) {\n        return v[k].value;\n      });\n    }\n  }, {\n    key: \"sanitizeQuery\",\n    value: function sanitizeQuery(value) {\n      return this.sanitizeObject(value, this.allowedQueryParameters, function (v, k) {\n        return v[k];\n      });\n    }\n  }, {\n    key: \"sanitizeObject\",\n    value: function sanitizeObject(value, allowedKeys, accessor) {\n      if (typeof value !== \"object\" || value === null) {\n        return value;\n      }\n      var sanitized = {};\n      for (var _i = 0, _Object$keys = Object.keys(value); _i < _Object$keys.length; _i++) {\n        var k = _Object$keys[_i];\n        if (allowedKeys.has(k.toLowerCase())) {\n          sanitized[k] = accessor(value, k);\n        } else {\n          sanitized[k] = RedactedString;\n        }\n      }\n      return sanitized;\n    }\n  }, {\n    key: \"sanitizeUrl\",\n    value: function sanitizeUrl(value) {\n      if (typeof value !== \"string\" || value === null) {\n        return value;\n      }\n      var urlBuilder = URLBuilder.parse(value);\n      var queryString = urlBuilder.getQuery();\n      if (!queryString) {\n        return value;\n      }\n      var query = URLQuery.parse(queryString);\n      var _iterator = _createForOfIteratorHelper(query.keys()),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var k = _step.value;\n          if (!this.allowedQueryParameters.has(k.toLowerCase())) {\n            query.set(k, RedactedString);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      urlBuilder.setQuery(query.toString());\n      return urlBuilder.toString();\n    }\n  }]);\n  return Sanitizer;\n}();","map":{"version":3,"mappings":"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","names":["URLBuilder","URLQuery","isObject","RedactedString","defaultAllowedHeaderNames","defaultAllowedQueryParameters","Sanitizer","allowedHeaderNames","allowedQueryParameters","Array","isArray","concat","Set","map","n","toLowerCase","p","obj","seen","JSON","stringify","key","value","Error","name","message","sanitizeHeaders","sanitizeUrl","sanitizeQuery","undefined","has","add","sanitizeObject","v","k","allowedKeys","accessor","sanitized","Object","keys","urlBuilder","parse","queryString","getQuery","query","set","setQuery","toString"],"sourceRoot":"","sources":["../../../src/util/sanitizer.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { URLBuilder, URLQuery } from \"../url\";\nimport { UnknownObject, isObject } from \"./utils\";\n\nexport interface SanitizerOptions {\n  /**\n   * Header names whose values will be logged when logging is enabled. Defaults to\n   * Date, traceparent, x-ms-client-request-id, and x-ms-request id.  Any headers\n   * specified in this field will be added to that list.  Any other values will\n   * be written to logs as \"REDACTED\".\n   */\n  allowedHeaderNames?: string[];\n\n  /**\n   * Query string names whose values will be logged when logging is enabled. By default no\n   * query string values are logged.\n   */\n  allowedQueryParameters?: string[];\n}\n\nconst RedactedString = \"REDACTED\";\n\nconst defaultAllowedHeaderNames = [\n  \"x-ms-client-request-id\",\n  \"x-ms-return-client-request-id\",\n  \"x-ms-useragent\",\n  \"x-ms-correlation-request-id\",\n  \"x-ms-request-id\",\n  \"client-request-id\",\n  \"ms-cv\",\n  \"return-client-request-id\",\n  \"traceparent\",\n\n  \"Access-Control-Allow-Credentials\",\n  \"Access-Control-Allow-Headers\",\n  \"Access-Control-Allow-Methods\",\n  \"Access-Control-Allow-Origin\",\n  \"Access-Control-Expose-Headers\",\n  \"Access-Control-Max-Age\",\n  \"Access-Control-Request-Headers\",\n  \"Access-Control-Request-Method\",\n  \"Origin\",\n\n  \"Accept\",\n  \"Accept-Encoding\",\n  \"Cache-Control\",\n  \"Connection\",\n  \"Content-Length\",\n  \"Content-Type\",\n  \"Date\",\n  \"ETag\",\n  \"Expires\",\n  \"If-Match\",\n  \"If-Modified-Since\",\n  \"If-None-Match\",\n  \"If-Unmodified-Since\",\n  \"Last-Modified\",\n  \"Pragma\",\n  \"Request-Id\",\n  \"Retry-After\",\n  \"Server\",\n  \"Transfer-Encoding\",\n  \"User-Agent\",\n  \"WWW-Authenticate\",\n];\n\nconst defaultAllowedQueryParameters: string[] = [\"api-version\"];\n\nexport class Sanitizer {\n  public allowedHeaderNames: Set<string>;\n  public allowedQueryParameters: Set<string>;\n\n  constructor({ allowedHeaderNames = [], allowedQueryParameters = [] }: SanitizerOptions = {}) {\n    allowedHeaderNames = Array.isArray(allowedHeaderNames)\n      ? defaultAllowedHeaderNames.concat(allowedHeaderNames)\n      : defaultAllowedHeaderNames;\n\n    allowedQueryParameters = Array.isArray(allowedQueryParameters)\n      ? defaultAllowedQueryParameters.concat(allowedQueryParameters)\n      : defaultAllowedQueryParameters;\n\n    this.allowedHeaderNames = new Set(allowedHeaderNames.map((n) => n.toLowerCase()));\n    this.allowedQueryParameters = new Set(allowedQueryParameters.map((p) => p.toLowerCase()));\n  }\n\n  public sanitize(obj: unknown): string {\n    const seen = new Set<unknown>();\n    return JSON.stringify(\n      obj,\n      (key: string, value: unknown) => {\n        // Ensure Errors include their interesting non-enumerable members\n        if (value instanceof Error) {\n          return {\n            ...value,\n            name: value.name,\n            message: value.message,\n          };\n        }\n\n        if (key === \"_headersMap\") {\n          return this.sanitizeHeaders(value as UnknownObject);\n        } else if (key === \"url\") {\n          return this.sanitizeUrl(value as string);\n        } else if (key === \"query\") {\n          return this.sanitizeQuery(value as UnknownObject);\n        } else if (key === \"body\") {\n          // Don't log the request body\n          return undefined;\n        } else if (key === \"response\") {\n          // Don't log response again\n          return undefined;\n        } else if (key === \"operationSpec\") {\n          // When using sendOperationRequest, the request carries a massive\n          // field with the autorest spec. No need to log it.\n          return undefined;\n        } else if (Array.isArray(value) || isObject(value)) {\n          if (seen.has(value)) {\n            return \"[Circular]\";\n          }\n          seen.add(value);\n        }\n\n        return value;\n      },\n      2\n    );\n  }\n\n  private sanitizeHeaders(value: UnknownObject): UnknownObject {\n    return this.sanitizeObject(value, this.allowedHeaderNames, (v, k) => v[k].value);\n  }\n\n  private sanitizeQuery(value: UnknownObject): UnknownObject {\n    return this.sanitizeObject(value, this.allowedQueryParameters, (v, k) => v[k]);\n  }\n\n  private sanitizeObject(\n    value: UnknownObject,\n    allowedKeys: Set<string>,\n    accessor: (value: any, key: string) => any\n  ): UnknownObject {\n    if (typeof value !== \"object\" || value === null) {\n      return value;\n    }\n\n    const sanitized: UnknownObject = {};\n\n    for (const k of Object.keys(value)) {\n      if (allowedKeys.has(k.toLowerCase())) {\n        sanitized[k] = accessor(value, k);\n      } else {\n        sanitized[k] = RedactedString;\n      }\n    }\n\n    return sanitized;\n  }\n\n  private sanitizeUrl(value: string): string {\n    if (typeof value !== \"string\" || value === null) {\n      return value;\n    }\n\n    const urlBuilder = URLBuilder.parse(value);\n    const queryString = urlBuilder.getQuery();\n\n    if (!queryString) {\n      return value;\n    }\n\n    const query = URLQuery.parse(queryString);\n    for (const k of query.keys()) {\n      if (!this.allowedQueryParameters.has(k.toLowerCase())) {\n        query.set(k, RedactedString);\n      }\n    }\n\n    urlBuilder.setQuery(query.toString());\n    return urlBuilder.toString();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
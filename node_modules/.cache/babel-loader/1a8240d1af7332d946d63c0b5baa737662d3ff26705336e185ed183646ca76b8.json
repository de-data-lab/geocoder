{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * Helps the core-http token authentication policies with requesting a new token if we're not currently waiting for a new token.\n *\n * @deprecated No longer used in the bearer authorization policy.\n */\nexport class AccessTokenRefresher {\n  constructor(credential, scopes) {\n    let requiredMillisecondsBeforeNewRefresh = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 30000;\n    this.credential = credential;\n    this.scopes = scopes;\n    this.requiredMillisecondsBeforeNewRefresh = requiredMillisecondsBeforeNewRefresh;\n    this.lastCalled = 0;\n  }\n  /**\n   * Returns true if the required milliseconds(defaulted to 30000) have been passed signifying\n   * that we are ready for a new refresh.\n   */\n  isReady() {\n    // We're only ready for a new refresh if the required milliseconds have passed.\n    return !this.lastCalled || Date.now() - this.lastCalled > this.requiredMillisecondsBeforeNewRefresh;\n  }\n  /**\n   * Stores the time in which it is called,\n   * then requests a new token,\n   * then sets this.promise to undefined,\n   * then returns the token.\n   */\n  async getToken(options) {\n    this.lastCalled = Date.now();\n    const token = await this.credential.getToken(this.scopes, options);\n    this.promise = undefined;\n    return token || undefined;\n  }\n  /**\n   * Requests a new token if we're not currently waiting for a new token.\n   * Returns null if the required time between each call hasn't been reached.\n   */\n  refresh(options) {\n    if (!this.promise) {\n      this.promise = this.getToken(options);\n    }\n    return this.promise;\n  }\n}","map":{"version":3,"mappings":"AAAA;AACA;AAIA;;;;;AAKA,OAAM,MAAOA,oBAAoB;EAI/BC,YACUC,UAA2B,EAC3BC,MAAyB,EAC2B;IAAA,IAApDC,2GAA+C,KAAK;IAFpD,eAAU,GAAVF,UAAU;IACV,WAAM,GAANC,MAAM;IACN,yCAAoC,GAApCC,oCAAoC;IALtC,eAAU,GAAG,CAAC;EAMnB;EAEH;;;;EAIOC,OAAO;IACZ;IACA,OACE,CAAC,IAAI,CAACC,UAAU,IAAIC,IAAI,CAACC,GAAG,EAAE,GAAG,IAAI,CAACF,UAAU,GAAG,IAAI,CAACF,oCAAoC;EAEhG;EAEA;;;;;;EAMQ,MAAMK,QAAQ,CAACC,OAAwB;IAC7C,IAAI,CAACJ,UAAU,GAAGC,IAAI,CAACC,GAAG,EAAE;IAC5B,MAAMG,KAAK,GAAG,MAAM,IAAI,CAACT,UAAU,CAACO,QAAQ,CAAC,IAAI,CAACN,MAAM,EAAEO,OAAO,CAAC;IAClE,IAAI,CAACE,OAAO,GAAGC,SAAS;IACxB,OAAOF,KAAK,IAAIE,SAAS;EAC3B;EAEA;;;;EAIOC,OAAO,CAACJ,OAAwB;IACrC,IAAI,CAAC,IAAI,CAACE,OAAO,EAAE;MACjB,IAAI,CAACA,OAAO,GAAG,IAAI,CAACH,QAAQ,CAACC,OAAO,CAAC;;IAGvC,OAAO,IAAI,CAACE,OAAO;EACrB","names":["AccessTokenRefresher","constructor","credential","scopes","requiredMillisecondsBeforeNewRefresh","isReady","lastCalled","Date","now","getToken","options","token","promise","undefined","refresh"],"sources":["/Users/yupenglei/Documents/geo-react/node_modules/@azure/core-http/src/credentials/accessTokenRefresher.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccessToken, GetTokenOptions, TokenCredential } from \"@azure/core-auth\";\n\n/**\n * Helps the core-http token authentication policies with requesting a new token if we're not currently waiting for a new token.\n *\n * @deprecated No longer used in the bearer authorization policy.\n */\nexport class AccessTokenRefresher {\n  private promise: Promise<AccessToken | undefined> | undefined;\n  private lastCalled = 0;\n\n  constructor(\n    private credential: TokenCredential,\n    private scopes: string | string[],\n    private requiredMillisecondsBeforeNewRefresh: number = 30000\n  ) {}\n\n  /**\n   * Returns true if the required milliseconds(defaulted to 30000) have been passed signifying\n   * that we are ready for a new refresh.\n   */\n  public isReady(): boolean {\n    // We're only ready for a new refresh if the required milliseconds have passed.\n    return (\n      !this.lastCalled || Date.now() - this.lastCalled > this.requiredMillisecondsBeforeNewRefresh\n    );\n  }\n\n  /**\n   * Stores the time in which it is called,\n   * then requests a new token,\n   * then sets this.promise to undefined,\n   * then returns the token.\n   */\n  private async getToken(options: GetTokenOptions): Promise<AccessToken | undefined> {\n    this.lastCalled = Date.now();\n    const token = await this.credential.getToken(this.scopes, options);\n    this.promise = undefined;\n    return token || undefined;\n  }\n\n  /**\n   * Requests a new token if we're not currently waiting for a new token.\n   * Returns null if the required time between each call hasn't been reached.\n   */\n  public refresh(options: GetTokenOptions): Promise<AccessToken | undefined> {\n    if (!this.promise) {\n      this.promise = this.getToken(options);\n    }\n\n    return this.promise;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
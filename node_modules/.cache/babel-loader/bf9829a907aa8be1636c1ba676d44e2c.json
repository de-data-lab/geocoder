{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { __spreadArrays } from \"tslib\";\nimport { ClientConfigurationError } from \"./error/ClientConfigurationError\";\nimport { Constants } from \"./utils/Constants\";\nvar ScopeSet = /** @class */function () {\n  function ScopeSet() {}\n  /**\n   * Check if there are dup scopes in a given request\n   *\n   * @param cachedScopes\n   * @param scopes\n   */\n  // TODO: Rename this, intersecting scopes isn't a great name for duplicate checker\n  ScopeSet.isIntersectingScopes = function (cachedScopes, scopes) {\n    var convertedCachedScopes = this.trimAndConvertArrayToLowerCase(__spreadArrays(cachedScopes));\n    var requestScopes = this.trimAndConvertArrayToLowerCase(__spreadArrays(scopes));\n    for (var i = 0; i < requestScopes.length; i++) {\n      if (convertedCachedScopes.indexOf(requestScopes[i].toLowerCase()) > -1) {\n        return true;\n      }\n    }\n    return false;\n  };\n  /**\n   * Check if a given scope is present in the request\n   *\n   * @param cachedScopes\n   * @param scopes\n   */\n  ScopeSet.containsScope = function (cachedScopes, scopes) {\n    var convertedCachedScopes = this.trimAndConvertArrayToLowerCase(__spreadArrays(cachedScopes));\n    var requestScopes = this.trimAndConvertArrayToLowerCase(__spreadArrays(scopes));\n    return requestScopes.every(function (value) {\n      return convertedCachedScopes.indexOf(value.toString().toLowerCase()) >= 0;\n    });\n  };\n  /**\n   *  Trims and converts string to lower case\n   *\n   * @param scopes\n   */\n  // TODO: Rename this, too generic name for a function that only deals with scopes\n  ScopeSet.trimAndConvertToLowerCase = function (scope) {\n    return scope.trim().toLowerCase();\n  };\n  /**\n   * Performs trimAndConvertToLowerCase on string array\n   * @param scopes\n   */\n  ScopeSet.trimAndConvertArrayToLowerCase = function (scopes) {\n    var _this = this;\n    return scopes.map(function (scope) {\n      return _this.trimAndConvertToLowerCase(scope);\n    });\n  };\n  /**\n   * Trims each scope in scopes array\n   * @param scopes\n   */\n  ScopeSet.trimScopes = function (scopes) {\n    return scopes.map(function (scope) {\n      return scope.trim();\n    });\n  };\n  /**\n   * Remove one element from a scope array\n   *\n   * @param scopes\n   * @param scope\n   */\n  // TODO: Rename this, too generic name for a function that only deals with scopes\n  ScopeSet.removeElement = function (scopes, scope) {\n    var scopeVal = this.trimAndConvertToLowerCase(scope);\n    return scopes.filter(function (value) {\n      return value !== scopeVal;\n    });\n  };\n  /**\n   * Parse the scopes into a formatted scopeList\n   * @param scopes\n   */\n  ScopeSet.parseScope = function (scopes) {\n    var scopeList = \"\";\n    if (scopes) {\n      for (var i = 0; i < scopes.length; ++i) {\n        scopeList += i !== scopes.length - 1 ? scopes[i] + \" \" : scopes[i];\n      }\n    }\n    return scopeList;\n  };\n  /**\n   * @hidden\n   *\n   * Used to validate the scopes input parameter requested  by the developer.\n   * @param {Array<string>} scopes - Developer requested permissions. Not all scopes are guaranteed to be included in the access token returned.\n   * @param {boolean} scopesRequired - Boolean indicating whether the scopes array is required or not\n   * @ignore\n   */\n  ScopeSet.validateInputScope = function (scopes, scopesRequired) {\n    if (!scopes) {\n      if (scopesRequired) {\n        throw ClientConfigurationError.createScopesRequiredError(scopes);\n      } else {\n        return;\n      }\n    }\n    // Check that scopes is an array object (also throws error if scopes == null)\n    if (!Array.isArray(scopes)) {\n      throw ClientConfigurationError.createScopesNonArrayError(scopes);\n    }\n    // Check that scopes is not an empty array\n    if (scopes.length < 1 && scopesRequired) {\n      throw ClientConfigurationError.createEmptyScopesArrayError(scopes.toString());\n    }\n  };\n  /**\n   * @hidden\n   *\n   * Extracts scope value from the state sent with the authentication request.\n   * @param {string} state\n   * @returns {string} scope.\n   * @ignore\n   */\n  ScopeSet.getScopeFromState = function (state) {\n    if (state) {\n      var splitIndex = state.indexOf(Constants.resourceDelimiter);\n      if (splitIndex > -1 && splitIndex + 1 < state.length) {\n        return state.substring(splitIndex + 1);\n      }\n    }\n    return \"\";\n  };\n  /**\n   * @ignore\n   * Appends extraScopesToConsent if passed\n   * @param {@link AuthenticationParameters}\n   */\n  ScopeSet.appendScopes = function (reqScopes, reqExtraScopesToConsent) {\n    if (reqScopes) {\n      var convertedExtraScopes = reqExtraScopesToConsent ? this.trimAndConvertArrayToLowerCase(__spreadArrays(reqExtraScopesToConsent)) : null;\n      var convertedReqScopes = this.trimAndConvertArrayToLowerCase(__spreadArrays(reqScopes));\n      return convertedExtraScopes ? __spreadArrays(convertedReqScopes, convertedExtraScopes) : convertedReqScopes;\n    }\n    return null;\n  };\n  // #endregion\n  /**\n   * @ignore\n   * Returns true if the scopes array only contains openid and/or profile\n   */\n  ScopeSet.onlyContainsOidcScopes = function (scopes) {\n    var scopesCount = scopes.length;\n    var oidcScopesFound = 0;\n    if (scopes.indexOf(Constants.openidScope) > -1) {\n      oidcScopesFound += 1;\n    }\n    if (scopes.indexOf(Constants.profileScope) > -1) {\n      oidcScopesFound += 1;\n    }\n    return scopesCount > 0 && scopesCount === oidcScopesFound;\n  };\n  /**\n   * @ignore\n   * Returns true if the scopes array only contains openid and/or profile\n   */\n  ScopeSet.containsAnyOidcScopes = function (scopes) {\n    var containsOpenIdScope = scopes.indexOf(Constants.openidScope) > -1;\n    var containsProfileScope = scopes.indexOf(Constants.profileScope) > -1;\n    return containsOpenIdScope || containsProfileScope;\n  };\n  /**\n   * @ignore\n   * Returns true if the clientId is the only scope in the array\n   */\n  ScopeSet.onlyContainsClientId = function (scopes, clientId) {\n    // Double negation to force false value returned in case scopes is null\n    return !!scopes && scopes.indexOf(clientId) > -1 && scopes.length === 1;\n  };\n  /**\n   * @ignore\n   * Adds missing OIDC scopes to scopes array without duplication. Since STS requires OIDC scopes for\n   * all implicit flow requests, 'openid' and 'profile' should always be included in the final request\n   */\n  ScopeSet.appendDefaultScopes = function (scopes) {\n    var extendedScopes = scopes;\n    if (extendedScopes.indexOf(Constants.openidScope) === -1) {\n      extendedScopes.push(Constants.openidScope);\n    }\n    if (extendedScopes.indexOf(Constants.profileScope) === -1) {\n      extendedScopes.push(Constants.profileScope);\n    }\n    return extendedScopes;\n  };\n  /**\n   * @ignore\n   * Removes present OIDC scopes from scopes array.\n   */\n  ScopeSet.removeDefaultScopes = function (scopes) {\n    return scopes.filter(function (scope) {\n      return scope !== Constants.openidScope && scope !== Constants.profileScope;\n    });\n  };\n  /**\n   * @ignore\n   * Removes clientId from scopes array if included as only scope. If it's not the only scope, it is treated as a resource scope.\n   * @param scopes Array<string>: Pre-normalized scopes array\n   * @param clientId string: The application's clientId that is searched for in the scopes array\n   */\n  ScopeSet.translateClientIdIfSingleScope = function (scopes, clientId) {\n    return this.onlyContainsClientId(scopes, clientId) ? Constants.oidcScopes : scopes;\n  };\n  return ScopeSet;\n}();\nexport { ScopeSet };","map":{"version":3,"mappings":"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","names":["ClientConfigurationError","Constants","ScopeSet","cachedScopes","scopes","convertedCachedScopes","trimAndConvertArrayToLowerCase","requestScopes","i","length","indexOf","toLowerCase","every","value","toString","scope","trim","map","trimAndConvertToLowerCase","scopeVal","filter","scopeList","scopesRequired","createScopesRequiredError","Array","isArray","createScopesNonArrayError","createEmptyScopesArrayError","state","splitIndex","resourceDelimiter","substring","reqScopes","reqExtraScopesToConsent","convertedExtraScopes","convertedReqScopes","__spreadArrays","scopesCount","oidcScopesFound","openidScope","profileScope","containsOpenIdScope","containsProfileScope","clientId","extendedScopes","push","onlyContainsClientId","oidcScopes"],"sourceRoot":"","sources":["../src/ScopeSet.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { __awaiter, __generator } from \"tslib\";\nimport { ClientConfigurationErrorMessage, ClientConfigurationError } from \"../error/ClientConfigurationError\";\nimport { XhrClient } from \"../XHRClient\";\nimport { UrlUtils } from \"../utils/UrlUtils\";\nimport { TrustedAuthority } from \"./TrustedAuthority\";\nimport { NetworkRequestType, Constants, WELL_KNOWN_SUFFIX } from \"../utils/Constants\";\n/**\n * @hidden\n */\nexport var AuthorityType;\n(function (AuthorityType) {\n  AuthorityType[AuthorityType[\"Default\"] = 0] = \"Default\";\n  AuthorityType[AuthorityType[\"Adfs\"] = 1] = \"Adfs\";\n})(AuthorityType || (AuthorityType = {}));\n/**\n * @hidden\n */\nvar Authority = /** @class */function () {\n  function Authority(authority, validateAuthority, authorityMetadata) {\n    this.IsValidationEnabled = validateAuthority;\n    this.CanonicalAuthority = authority;\n    this.validateAsUri();\n    this.tenantDiscoveryResponse = authorityMetadata;\n  }\n  Authority.isAdfs = function (authorityUrl) {\n    var components = UrlUtils.GetUrlComponents(authorityUrl);\n    var pathSegments = components.PathSegments;\n    return pathSegments.length && pathSegments[0].toLowerCase() === Constants.ADFS;\n  };\n  Object.defineProperty(Authority.prototype, \"AuthorityType\", {\n    get: function () {\n      return Authority.isAdfs(this.canonicalAuthority) ? AuthorityType.Adfs : AuthorityType.Default;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"Tenant\", {\n    get: function () {\n      return this.CanonicalAuthorityUrlComponents.PathSegments[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"AuthorizationEndpoint\", {\n    get: function () {\n      this.validateResolved();\n      return this.tenantDiscoveryResponse.AuthorizationEndpoint.replace(/{tenant}|{tenantid}/g, this.Tenant);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"EndSessionEndpoint\", {\n    get: function () {\n      this.validateResolved();\n      return this.tenantDiscoveryResponse.EndSessionEndpoint.replace(/{tenant}|{tenantid}/g, this.Tenant);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"SelfSignedJwtAudience\", {\n    get: function () {\n      this.validateResolved();\n      return this.tenantDiscoveryResponse.Issuer.replace(/{tenant}|{tenantid}/g, this.Tenant);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Authority.prototype.validateResolved = function () {\n    if (!this.hasCachedMetadata()) {\n      throw \"Please call ResolveEndpointsAsync first\";\n    }\n  };\n  Object.defineProperty(Authority.prototype, \"CanonicalAuthority\", {\n    /**\n     * A URL that is the authority set by the developer\n     */\n    get: function () {\n      return this.canonicalAuthority;\n    },\n    set: function (url) {\n      this.canonicalAuthority = UrlUtils.CanonicalizeUri(url);\n      this.canonicalAuthorityUrlComponents = null;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"CanonicalAuthorityUrlComponents\", {\n    get: function () {\n      if (!this.canonicalAuthorityUrlComponents) {\n        this.canonicalAuthorityUrlComponents = UrlUtils.GetUrlComponents(this.CanonicalAuthority);\n      }\n      return this.canonicalAuthorityUrlComponents;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"DefaultOpenIdConfigurationEndpoint\", {\n    // http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata\n    get: function () {\n      return this.AuthorityType === AuthorityType.Adfs ? \"\" + this.CanonicalAuthority + WELL_KNOWN_SUFFIX : this.CanonicalAuthority + \"v2.0/\" + WELL_KNOWN_SUFFIX;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Given a string, validate that it is of the form https://domain/path\n   */\n  Authority.prototype.validateAsUri = function () {\n    var components;\n    try {\n      components = this.CanonicalAuthorityUrlComponents;\n    } catch (e) {\n      throw ClientConfigurationErrorMessage.invalidAuthorityType;\n    }\n    if (!components.Protocol || components.Protocol.toLowerCase() !== \"https:\") {\n      throw ClientConfigurationErrorMessage.authorityUriInsecure;\n    }\n    if (!components.PathSegments || components.PathSegments.length < 1) {\n      throw ClientConfigurationErrorMessage.authorityUriInvalidPath;\n    }\n  };\n  /**\n   * Calls the OIDC endpoint and returns the response\n   */\n  Authority.prototype.DiscoverEndpoints = function (openIdConfigurationEndpoint, telemetryManager, correlationId) {\n    var client = new XhrClient();\n    var httpMethod = NetworkRequestType.GET;\n    var httpEvent = telemetryManager.createAndStartHttpEvent(correlationId, httpMethod, openIdConfigurationEndpoint, \"openIdConfigurationEndpoint\");\n    return client.sendRequestAsync(openIdConfigurationEndpoint, httpMethod, /* enableCaching: */true).then(function (response) {\n      httpEvent.httpResponseStatus = response.statusCode;\n      telemetryManager.stopEvent(httpEvent);\n      return {\n        AuthorizationEndpoint: response.body[\"authorization_endpoint\"],\n        EndSessionEndpoint: response.body[\"end_session_endpoint\"],\n        Issuer: response.body[\"issuer\"]\n      };\n    }).catch(function (err) {\n      httpEvent.serverErrorCode = err;\n      telemetryManager.stopEvent(httpEvent);\n      throw err;\n    });\n  };\n  /**\n   * Returns a promise.\n   * Checks to see if the authority is in the cache\n   * Discover endpoints via openid-configuration\n   * If successful, caches the endpoint for later use in OIDC\n   */\n  Authority.prototype.resolveEndpointsAsync = function (telemetryManager, correlationId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var host, openIdConfigurationEndpointResponse, _a;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!this.IsValidationEnabled) return [3 /*break*/, 3];\n            host = this.canonicalAuthorityUrlComponents.HostNameAndPort;\n            if (!(TrustedAuthority.getTrustedHostList().length === 0)) return [3 /*break*/, 2];\n            return [4 /*yield*/, TrustedAuthority.setTrustedAuthoritiesFromNetwork(this.canonicalAuthority, telemetryManager, correlationId)];\n          case 1:\n            _b.sent();\n            _b.label = 2;\n          case 2:\n            if (!TrustedAuthority.IsInTrustedHostList(host)) {\n              throw ClientConfigurationError.createUntrustedAuthorityError(host);\n            }\n            _b.label = 3;\n          case 3:\n            openIdConfigurationEndpointResponse = this.GetOpenIdConfigurationEndpoint();\n            _a = this;\n            return [4 /*yield*/, this.DiscoverEndpoints(openIdConfigurationEndpointResponse, telemetryManager, correlationId)];\n          case 4:\n            _a.tenantDiscoveryResponse = _b.sent();\n            return [2 /*return*/, this.tenantDiscoveryResponse];\n        }\n      });\n    });\n  };\n  /**\n   * Checks if there is a cached tenant discovery response with required fields.\n   */\n  Authority.prototype.hasCachedMetadata = function () {\n    return !!(this.tenantDiscoveryResponse && this.tenantDiscoveryResponse.AuthorizationEndpoint && this.tenantDiscoveryResponse.EndSessionEndpoint && this.tenantDiscoveryResponse.Issuer);\n  };\n  /**\n   * Returns a promise which resolves to the OIDC endpoint\n   * Only responds with the endpoint\n   */\n  Authority.prototype.GetOpenIdConfigurationEndpoint = function () {\n    return this.DefaultOpenIdConfigurationEndpoint;\n  };\n  return Authority;\n}();\nexport { Authority };","map":{"version":3,"mappings":"AAAA;;;;;AAOA,SAASA,+BAA+B,EAAEC,wBAAwB,QAAQ,mCAAmC;AAC7G,SAASC,SAAS,QAAqB,cAAc;AACrD,SAASC,QAAQ,QAAQ,mBAAmB;AAG5C,SAASC,gBAAgB,QAAQ,oBAAoB;AACrD,SAASC,kBAAkB,EAAEC,SAAS,EAAEC,iBAAiB,QAAQ,oBAAoB;AAErF;;;AAGA,WAAYC,aAGX;AAHD,WAAYA,aAAa;EACrBA,uDAAO;EACPA,iDAAI;AACR,CAAC,EAHWA,aAAa,KAAbA,aAAa;AAKzB;;;AAGA;EACI,mBAAYC,SAAiB,EAAEC,iBAA0B,EAAEC,iBAA4C;IACnG,IAAI,CAACC,mBAAmB,GAAGF,iBAAiB;IAC5C,IAAI,CAACG,kBAAkB,GAAGJ,SAAS;IAEnC,IAAI,CAACK,aAAa,EAAE;IACpB,IAAI,CAACC,uBAAuB,GAAGJ,iBAAiB;EACpD;EAEcK,gBAAM,GAApB,UAAqBC,YAAoB;IACrC,IAAMC,UAAU,GAAGf,QAAQ,CAACgB,gBAAgB,CAACF,YAAY,CAAC;IAC1D,IAAMG,YAAY,GAAGF,UAAU,CAACG,YAAY;IAE5C,OAAQD,YAAY,CAACE,MAAM,IAAIF,YAAY,CAAC,CAAC,CAAC,CAACG,WAAW,EAAE,KAAKjB,SAAS,CAACkB,IAAI;EACnF,CAAC;EAEDC,sBAAWT,oCAAa;SAAxB;MACI,OAAOA,SAAS,CAACU,MAAM,CAAC,IAAI,CAACC,kBAAkB,CAAC,GAAEnB,aAAa,CAACoB,IAAI,GAAGpB,aAAa,CAACqB,OAAO;IAChG,CAAC;;;;EAIDJ,sBAAWT,6BAAM;SAAjB;MACI,OAAO,IAAI,CAACc,+BAA+B,CAACT,YAAY,CAAC,CAAC,CAAC;IAC/D,CAAC;;;;EAIDI,sBAAWT,4CAAqB;SAAhC;MACI,IAAI,CAACe,gBAAgB,EAAE;MACvB,OAAO,IAAI,CAAChB,uBAAuB,CAACiB,qBAAqB,CAACC,OAAO,CAAC,sBAAsB,EAAE,IAAI,CAACC,MAAM,CAAC;IAC1G,CAAC;;;;EAEDT,sBAAWT,yCAAkB;SAA7B;MACI,IAAI,CAACe,gBAAgB,EAAE;MACvB,OAAO,IAAI,CAAChB,uBAAuB,CAACoB,kBAAkB,CAACF,OAAO,CAAC,sBAAsB,EAAE,IAAI,CAACC,MAAM,CAAC;IACvG,CAAC;;;;EAEDT,sBAAWT,4CAAqB;SAAhC;MACI,IAAI,CAACe,gBAAgB,EAAE;MACvB,OAAO,IAAI,CAAChB,uBAAuB,CAACqB,MAAM,CAACH,OAAO,CAAC,sBAAsB,EAAE,IAAI,CAACC,MAAM,CAAC;IAC3F,CAAC;;;;EAEOlB,oCAAgB,GAAxB;IACI,IAAI,CAAC,IAAI,CAACqB,iBAAiB,EAAE,EAAE;MAC3B,MAAM,yCAAyC;;EAEvD,CAAC;EAKDZ,sBAAWT,yCAAkB;IAH7B;;;SAGA;MACI,OAAO,IAAI,CAACW,kBAAkB;IAClC,CAAC;SAED,UAA8BW,GAAW;MACrC,IAAI,CAACX,kBAAkB,GAAGxB,QAAQ,CAACoC,eAAe,CAACD,GAAG,CAAC;MACvD,IAAI,CAACE,+BAA+B,GAAG,IAAI;IAC/C,CAAC;;;;EAKDf,sBAAWT,sDAA+B;SAA1C;MACI,IAAI,CAAC,IAAI,CAACwB,+BAA+B,EAAE;QACvC,IAAI,CAACA,+BAA+B,GAAGrC,QAAQ,CAACgB,gBAAgB,CAAC,IAAI,CAACN,kBAAkB,CAAC;;MAG7F,OAAO,IAAI,CAAC2B,+BAA+B;IAC/C,CAAC;;;;EAGDf,sBAAcT,yDAAkC;IADhD;SACA;MACI,OAAQ,IAAI,CAACR,aAAa,KAAKA,aAAa,CAACoB,IAAI,GAAG,KAAG,IAAI,CAACf,kBAAkB,GAAGN,iBAAmB,GAAM,IAAI,CAACM,kBAAkB,aAAQN,iBAAmB;IAChK,CAAC;;;;EAED;;;EAGQS,iCAAa,GAArB;IACI,IAAIE,UAAU;IACd,IAAI;MACAA,UAAU,GAAG,IAAI,CAACY,+BAA+B;KACpD,CAAC,OAAOW,CAAC,EAAE;MACR,MAAMzC,+BAA+B,CAAC0C,oBAAoB;;IAG9D,IAAI,CAACxB,UAAU,CAACyB,QAAQ,IAAIzB,UAAU,CAACyB,QAAQ,CAACpB,WAAW,EAAE,KAAK,QAAQ,EAAE;MACxE,MAAMvB,+BAA+B,CAAC4C,oBAAoB;;IAG9D,IAAI,CAAC1B,UAAU,CAACG,YAAY,IAAIH,UAAU,CAACG,YAAY,CAACC,MAAM,GAAG,CAAC,EAAE;MAChE,MAAMtB,+BAA+B,CAAC6C,uBAAuB;;EAErE,CAAC;EAED;;;EAGQ7B,qCAAiB,GAAzB,UAA0B8B,2BAAmC,EAAEC,gBAAkC,EAAEC,aAAqB;IACpH,IAAMC,MAAM,GAAG,IAAI/C,SAAS,EAAE;IAE9B,IAAMgD,UAAU,GAAG7C,kBAAkB,CAAC8C,GAAG;IACzC,IAAMC,SAAS,GAAcL,gBAAgB,CAACM,uBAAuB,CAACL,aAAa,EAAEE,UAAU,EAAEJ,2BAA2B,EAAE,6BAA6B,CAAC;IAE5J,OAAOG,MAAM,CAACK,gBAAgB,CAACR,2BAA2B,EAAEI,UAAU,EAAE,oBAAqB,IAAI,CAAC,CAC7FK,IAAI,CAAC,UAACC,QAAqB;MACxBJ,SAAS,CAACK,kBAAkB,GAAGD,QAAQ,CAACE,UAAU;MAClDX,gBAAgB,CAACY,SAAS,CAACP,SAAS,CAAC;MACrC,OAAiC;QAC7BpB,qBAAqB,EAAEwB,QAAQ,CAACI,IAAI,CAAC,wBAAwB,CAAC;QAC9DzB,kBAAkB,EAAEqB,QAAQ,CAACI,IAAI,CAAC,sBAAsB,CAAC;QACzDxB,MAAM,EAAEoB,QAAQ,CAACI,IAAI,CAAC,QAAQ;OACjC;IACL,CAAC,CAAC,CACDC,KAAK,CAAC,aAAG;MACNT,SAAS,CAACU,eAAe,GAAGC,GAAG;MAC/BhB,gBAAgB,CAACY,SAAS,CAACP,SAAS,CAAC;MACrC,MAAMW,GAAG;IACb,CAAC,CAAC;EACV,CAAC;EAED;;;;;;EAMa/C,yCAAqB,GAAlC,UAAmC+B,gBAAkC,EAAEC,aAAqB;;;;;;iBACpF,IAAI,CAACpC,mBAAmB,EAAxB;YACMoD,IAAI,GAAG,IAAI,CAACxB,+BAA+B,CAACyB,eAAe;kBAC7D7D,gBAAgB,CAAC8D,kBAAkB,EAAE,CAAC5C,MAAM,KAAK,CAAC,GAAlD;YACA,qBAAMlB,gBAAgB,CAAC+D,gCAAgC,CAAC,IAAI,CAACxC,kBAAkB,EAAEoB,gBAAgB,EAAEC,aAAa,CAAC;;YAAjHoB,SAAiH;;;YAGrH,IAAI,CAAChE,gBAAgB,CAACiE,mBAAmB,CAACL,IAAI,CAAC,EAAE;cAC7C,MAAM/D,wBAAwB,CAACqE,6BAA6B,CAACN,IAAI,CAAC;;;;YAGpEO,mCAAmC,GAAG,IAAI,CAACC,8BAA8B,EAAE;YACjFC,SAAI;YAA2B,qBAAM,IAAI,CAACC,iBAAiB,CAACH,mCAAmC,EAAExB,gBAAgB,EAAEC,aAAa,CAAC;;YAAjIyB,GAAK1D,uBAAuB,GAAGqD,SAAkG;YAEjI,sBAAO,IAAI,CAACrD,uBAAuB;QAAC;;;GACvC;EAED;;;EAGOC,qCAAiB,GAAxB;IACI,OAAO,CAAC,EAAE,IAAI,CAACD,uBAAuB,IAClC,IAAI,CAACA,uBAAuB,CAACiB,qBAAqB,IAClD,IAAI,CAACjB,uBAAuB,CAACoB,kBAAkB,IAC/C,IAAI,CAACpB,uBAAuB,CAACqB,MAAM,CAAC;EAC5C,CAAC;EAED;;;;EAIOpB,kDAA8B,GAArC;IACI,OAAO,IAAI,CAAC2D,kCAAkC;EAClD,CAAC;EACL,gBAAC;AAAD,CAAC,EAnKD","names":["ClientConfigurationErrorMessage","ClientConfigurationError","XhrClient","UrlUtils","TrustedAuthority","NetworkRequestType","Constants","WELL_KNOWN_SUFFIX","AuthorityType","authority","validateAuthority","authorityMetadata","IsValidationEnabled","CanonicalAuthority","validateAsUri","tenantDiscoveryResponse","Authority","authorityUrl","components","GetUrlComponents","pathSegments","PathSegments","length","toLowerCase","ADFS","Object","isAdfs","canonicalAuthority","Adfs","Default","CanonicalAuthorityUrlComponents","validateResolved","AuthorizationEndpoint","replace","Tenant","EndSessionEndpoint","Issuer","hasCachedMetadata","url","CanonicalizeUri","canonicalAuthorityUrlComponents","e","invalidAuthorityType","Protocol","authorityUriInsecure","authorityUriInvalidPath","openIdConfigurationEndpoint","telemetryManager","correlationId","client","httpMethod","GET","httpEvent","createAndStartHttpEvent","sendRequestAsync","then","response","httpResponseStatus","statusCode","stopEvent","body","catch","serverErrorCode","err","host","HostNameAndPort","getTrustedHostList","setTrustedAuthoritiesFromNetwork","_b","IsInTrustedHostList","createUntrustedAuthorityError","openIdConfigurationEndpointResponse","GetOpenIdConfigurationEndpoint","_a","DiscoverEndpoints","DefaultOpenIdConfigurationEndpoint"],"sourceRoot":"","sources":["../../src/authority/Authority.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _classCallCheck from \"/Users/tbeckett/Documents/geo-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tbeckett/Documents/geo-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/tbeckett/Documents/geo-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/tbeckett/Documents/geo-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _asyncToGenerator from \"/Users/tbeckett/Documents/geo-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { BaseRequestPolicy } from \"../policies/requestPolicy\";\nimport { Constants } from \"../util/constants\";\nimport { delay } from \"@azure/core-util\";\n// Default options for the cycler if none are provided\nexport var DEFAULT_CYCLER_OPTIONS = {\n  forcedRefreshWindowInMs: 1000,\n  retryIntervalInMs: 3000,\n  refreshWindowInMs: 1000 * 60 * 2 // Start refreshing 2m before expiry\n};\n/**\n * Converts an an unreliable access token getter (which may resolve with null)\n * into an AccessTokenGetter by retrying the unreliable getter in a regular\n * interval.\n *\n * @param getAccessToken - a function that produces a promise of an access\n * token that may fail by returning null\n * @param retryIntervalInMs - the time (in milliseconds) to wait between retry\n * attempts\n * @param timeoutInMs - the timestamp after which the refresh attempt will fail,\n * throwing an exception\n * @returns - a promise that, if it resolves, will resolve with an access token\n */\nfunction beginRefresh(_x, _x2, _x3) {\n  return _beginRefresh.apply(this, arguments);\n}\n/**\n * Creates a token cycler from a credential, scopes, and optional settings.\n *\n * A token cycler represents a way to reliably retrieve a valid access token\n * from a TokenCredential. It will handle initializing the token, refreshing it\n * when it nears expiration, and synchronizes refresh attempts to avoid\n * concurrency hazards.\n *\n * @param credential - the underlying TokenCredential that provides the access\n * token\n * @param scopes - the scopes to request authorization for\n * @param tokenCyclerOptions - optionally override default settings for the cycler\n *\n * @returns - a function that reliably produces a valid access token\n */\nfunction _beginRefresh() {\n  _beginRefresh = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(getAccessToken, retryIntervalInMs, timeoutInMs) {\n    var tryGetAccessToken, _tryGetAccessToken, token;\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _tryGetAccessToken = function _tryGetAccessToken3() {\n              _tryGetAccessToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n                var finalToken;\n                return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n                  while (1) {\n                    switch (_context3.prev = _context3.next) {\n                      case 0:\n                        if (!(Date.now() < timeoutInMs)) {\n                          _context3.next = 12;\n                          break;\n                        }\n                        _context3.prev = 1;\n                        _context3.next = 4;\n                        return getAccessToken();\n                      case 4:\n                        return _context3.abrupt(\"return\", _context3.sent);\n                      case 7:\n                        _context3.prev = 7;\n                        _context3.t0 = _context3[\"catch\"](1);\n                        return _context3.abrupt(\"return\", null);\n                      case 10:\n                        _context3.next = 18;\n                        break;\n                      case 12:\n                        _context3.next = 14;\n                        return getAccessToken();\n                      case 14:\n                        finalToken = _context3.sent;\n                        if (!(finalToken === null)) {\n                          _context3.next = 17;\n                          break;\n                        }\n                        throw new Error(\"Failed to refresh access token.\");\n                      case 17:\n                        return _context3.abrupt(\"return\", finalToken);\n                      case 18:\n                      case \"end\":\n                        return _context3.stop();\n                    }\n                  }\n                }, _callee3, null, [[1, 7]]);\n              }));\n              return _tryGetAccessToken.apply(this, arguments);\n            };\n            tryGetAccessToken = function _tryGetAccessToken2() {\n              return _tryGetAccessToken.apply(this, arguments);\n            };\n            _context4.next = 4;\n            return tryGetAccessToken();\n          case 4:\n            token = _context4.sent;\n          case 5:\n            if (!(token === null)) {\n              _context4.next = 13;\n              break;\n            }\n            _context4.next = 8;\n            return delay(retryIntervalInMs);\n          case 8:\n            _context4.next = 10;\n            return tryGetAccessToken();\n          case 10:\n            token = _context4.sent;\n            _context4.next = 5;\n            break;\n          case 13:\n            return _context4.abrupt(\"return\", token);\n          case 14:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _beginRefresh.apply(this, arguments);\n}\nfunction createTokenCycler(credential, scopes, tokenCyclerOptions) {\n  var refreshWorker = null;\n  var token = null;\n  var options = Object.assign(Object.assign({}, DEFAULT_CYCLER_OPTIONS), tokenCyclerOptions);\n  /**\n   * This little holder defines several predicates that we use to construct\n   * the rules of refreshing the token.\n   */\n  var cycler = {\n    /**\n     * Produces true if a refresh job is currently in progress.\n     */\n    get isRefreshing() {\n      return refreshWorker !== null;\n    },\n    /**\n     * Produces true if the cycler SHOULD refresh (we are within the refresh\n     * window and not already refreshing)\n     */\n    get shouldRefresh() {\n      var _a;\n      return !cycler.isRefreshing && ((_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : 0) - options.refreshWindowInMs < Date.now();\n    },\n    /**\n     * Produces true if the cycler MUST refresh (null or nearly-expired\n     * token).\n     */\n    get mustRefresh() {\n      return token === null || token.expiresOnTimestamp - options.forcedRefreshWindowInMs < Date.now();\n    }\n  };\n  /**\n   * Starts a refresh job or returns the existing job if one is already\n   * running.\n   */\n  function refresh(getTokenOptions) {\n    var _a;\n    if (!cycler.isRefreshing) {\n      // We bind `scopes` here to avoid passing it around a lot\n      var tryGetAccessToken = function tryGetAccessToken() {\n        return credential.getToken(scopes, getTokenOptions);\n      };\n      // Take advantage of promise chaining to insert an assignment to `token`\n      // before the refresh can be considered done.\n      refreshWorker = beginRefresh(tryGetAccessToken, options.retryIntervalInMs,\n      // If we don't have a token, then we should timeout immediately\n      (_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : Date.now()).then(function (_token) {\n        refreshWorker = null;\n        token = _token;\n        return token;\n      }).catch(function (reason) {\n        // We also should reset the refresher if we enter a failed state.  All\n        // existing awaiters will throw, but subsequent requests will start a\n        // new retry chain.\n        refreshWorker = null;\n        token = null;\n        throw reason;\n      });\n    }\n    return refreshWorker;\n  }\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(tokenOptions) {\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!cycler.mustRefresh) {\n                _context.next = 2;\n                break;\n              }\n              return _context.abrupt(\"return\", refresh(tokenOptions));\n            case 2:\n              if (cycler.shouldRefresh) {\n                refresh(tokenOptions);\n              }\n              return _context.abrupt(\"return\", token);\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return function (_x4) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n}\n// #endregion\n/**\n * Creates a new factory for a RequestPolicy that applies a bearer token to\n * the requests' `Authorization` headers.\n *\n * @param credential - The TokenCredential implementation that can supply the bearer token.\n * @param scopes - The scopes for which the bearer token applies.\n */\nexport function bearerTokenAuthenticationPolicy(credential, scopes) {\n  // This simple function encapsulates the entire process of reliably retrieving the token\n  var getToken = createTokenCycler(credential, scopes /* , options */);\n  var BearerTokenAuthenticationPolicy = /*#__PURE__*/function (_BaseRequestPolicy) {\n    _inherits(BearerTokenAuthenticationPolicy, _BaseRequestPolicy);\n    var _super = _createSuper(BearerTokenAuthenticationPolicy);\n    function BearerTokenAuthenticationPolicy(nextPolicy, options) {\n      _classCallCheck(this, BearerTokenAuthenticationPolicy);\n      return _super.call(this, nextPolicy, options);\n    }\n    _createClass(BearerTokenAuthenticationPolicy, [{\n      key: \"sendRequest\",\n      value: function () {\n        var _sendRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(webResource) {\n          var _yield$getToken, token;\n          return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  if (webResource.url.toLowerCase().startsWith(\"https://\")) {\n                    _context2.next = 2;\n                    break;\n                  }\n                  throw new Error(\"Bearer token authentication is not permitted for non-TLS protected (non-https) URLs.\");\n                case 2:\n                  _context2.next = 4;\n                  return getToken({\n                    abortSignal: webResource.abortSignal,\n                    tracingOptions: {\n                      tracingContext: webResource.tracingContext\n                    }\n                  });\n                case 4:\n                  _yield$getToken = _context2.sent;\n                  token = _yield$getToken.token;\n                  webResource.headers.set(Constants.HeaderConstants.AUTHORIZATION, \"Bearer \".concat(token));\n                  return _context2.abrupt(\"return\", this._nextPolicy.sendRequest(webResource));\n                case 8:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, this);\n        }));\n        function sendRequest(_x5) {\n          return _sendRequest.apply(this, arguments);\n        }\n        return sendRequest;\n      }()\n    }]);\n    return BearerTokenAuthenticationPolicy;\n  }(BaseRequestPolicy);\n  return {\n    create: function create(nextPolicy, options) {\n      return new BearerTokenAuthenticationPolicy(nextPolicy, options);\n    }\n  };\n}","map":{"version":3,"mappings":"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","names":["BaseRequestPolicy","Constants","delay","DEFAULT_CYCLER_OPTIONS","forcedRefreshWindowInMs","retryIntervalInMs","refreshWindowInMs","beginRefresh","getAccessToken","timeoutInMs","tryGetAccessToken","Date","now","finalToken","Error","token","createTokenCycler","credential","scopes","tokenCyclerOptions","refreshWorker","options","cycler","isRefreshing","shouldRefresh","expiresOnTimestamp","mustRefresh","refresh","getTokenOptions","getToken","then","_token","catch","reason","tokenOptions","bearerTokenAuthenticationPolicy","BearerTokenAuthenticationPolicy","nextPolicy","webResource","url","toLowerCase","startsWith","abortSignal","tracingOptions","tracingContext","headers","set","HeaderConstants","AUTHORIZATION","_nextPolicy","sendRequest","create"],"sourceRoot":"","sources":["../../../src/policies/bearerTokenAuthenticationPolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccessToken, GetTokenOptions, TokenCredential } from \"@azure/core-auth\";\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n} from \"../policies/requestPolicy\";\nimport { Constants } from \"../util/constants\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { WebResourceLike } from \"../webResource\";\nimport { delay } from \"@azure/core-util\";\n\n// #region Access Token Cycler\n\n/**\n * A function that gets a promise of an access token and allows providing\n * options.\n *\n * @param options - the options to pass to the underlying token provider\n */\ntype AccessTokenGetter = (options: GetTokenOptions) => Promise<AccessToken>;\n\ninterface TokenCyclerOptions {\n  /**\n   * The window of time before token expiration during which the token will be\n   * considered unusable due to risk of the token expiring before sending the\n   * request.\n   *\n   * This will only become meaningful if the refresh fails for over\n   * (refreshWindow - forcedRefreshWindow) milliseconds.\n   */\n  forcedRefreshWindowInMs: number;\n  /**\n   * Interval in milliseconds to retry failed token refreshes.\n   */\n  retryIntervalInMs: number;\n  /**\n   * The window of time before token expiration during which\n   * we will attempt to refresh the token.\n   */\n  refreshWindowInMs: number;\n}\n\n// Default options for the cycler if none are provided\nexport const DEFAULT_CYCLER_OPTIONS: TokenCyclerOptions = {\n  forcedRefreshWindowInMs: 1000, // Force waiting for a refresh 1s before the token expires\n  retryIntervalInMs: 3000, // Allow refresh attempts every 3s\n  refreshWindowInMs: 1000 * 60 * 2, // Start refreshing 2m before expiry\n};\n\n/**\n * Converts an an unreliable access token getter (which may resolve with null)\n * into an AccessTokenGetter by retrying the unreliable getter in a regular\n * interval.\n *\n * @param getAccessToken - a function that produces a promise of an access\n * token that may fail by returning null\n * @param retryIntervalInMs - the time (in milliseconds) to wait between retry\n * attempts\n * @param timeoutInMs - the timestamp after which the refresh attempt will fail,\n * throwing an exception\n * @returns - a promise that, if it resolves, will resolve with an access token\n */\nasync function beginRefresh(\n  getAccessToken: () => Promise<AccessToken | null>,\n  retryIntervalInMs: number,\n  timeoutInMs: number\n): Promise<AccessToken> {\n  // This wrapper handles exceptions gracefully as long as we haven't exceeded\n  // the timeout.\n  async function tryGetAccessToken(): Promise<AccessToken | null> {\n    if (Date.now() < timeoutInMs) {\n      try {\n        return await getAccessToken();\n      } catch {\n        return null;\n      }\n    } else {\n      const finalToken = await getAccessToken();\n\n      // Timeout is up, so throw if it's still null\n      if (finalToken === null) {\n        throw new Error(\"Failed to refresh access token.\");\n      }\n\n      return finalToken;\n    }\n  }\n\n  let token: AccessToken | null = await tryGetAccessToken();\n\n  while (token === null) {\n    await delay(retryIntervalInMs);\n\n    token = await tryGetAccessToken();\n  }\n\n  return token;\n}\n\n/**\n * Creates a token cycler from a credential, scopes, and optional settings.\n *\n * A token cycler represents a way to reliably retrieve a valid access token\n * from a TokenCredential. It will handle initializing the token, refreshing it\n * when it nears expiration, and synchronizes refresh attempts to avoid\n * concurrency hazards.\n *\n * @param credential - the underlying TokenCredential that provides the access\n * token\n * @param scopes - the scopes to request authorization for\n * @param tokenCyclerOptions - optionally override default settings for the cycler\n *\n * @returns - a function that reliably produces a valid access token\n */\nfunction createTokenCycler(\n  credential: TokenCredential,\n  scopes: string | string[],\n  tokenCyclerOptions?: Partial<TokenCyclerOptions>\n): AccessTokenGetter {\n  let refreshWorker: Promise<AccessToken> | null = null;\n  let token: AccessToken | null = null;\n\n  const options = {\n    ...DEFAULT_CYCLER_OPTIONS,\n    ...tokenCyclerOptions,\n  };\n\n  /**\n   * This little holder defines several predicates that we use to construct\n   * the rules of refreshing the token.\n   */\n  const cycler = {\n    /**\n     * Produces true if a refresh job is currently in progress.\n     */\n    get isRefreshing(): boolean {\n      return refreshWorker !== null;\n    },\n    /**\n     * Produces true if the cycler SHOULD refresh (we are within the refresh\n     * window and not already refreshing)\n     */\n    get shouldRefresh(): boolean {\n      return (\n        !cycler.isRefreshing &&\n        (token?.expiresOnTimestamp ?? 0) - options.refreshWindowInMs < Date.now()\n      );\n    },\n    /**\n     * Produces true if the cycler MUST refresh (null or nearly-expired\n     * token).\n     */\n    get mustRefresh(): boolean {\n      return (\n        token === null || token.expiresOnTimestamp - options.forcedRefreshWindowInMs < Date.now()\n      );\n    },\n  };\n\n  /**\n   * Starts a refresh job or returns the existing job if one is already\n   * running.\n   */\n  function refresh(getTokenOptions: GetTokenOptions): Promise<AccessToken> {\n    if (!cycler.isRefreshing) {\n      // We bind `scopes` here to avoid passing it around a lot\n      const tryGetAccessToken = (): Promise<AccessToken | null> =>\n        credential.getToken(scopes, getTokenOptions);\n\n      // Take advantage of promise chaining to insert an assignment to `token`\n      // before the refresh can be considered done.\n      refreshWorker = beginRefresh(\n        tryGetAccessToken,\n        options.retryIntervalInMs,\n        // If we don't have a token, then we should timeout immediately\n        token?.expiresOnTimestamp ?? Date.now()\n      )\n        .then((_token) => {\n          refreshWorker = null;\n          token = _token;\n          return token;\n        })\n        .catch((reason) => {\n          // We also should reset the refresher if we enter a failed state.  All\n          // existing awaiters will throw, but subsequent requests will start a\n          // new retry chain.\n          refreshWorker = null;\n          token = null;\n          throw reason;\n        });\n    }\n\n    return refreshWorker as Promise<AccessToken>;\n  }\n\n  return async (tokenOptions: GetTokenOptions): Promise<AccessToken> => {\n    //\n    // Simple rules:\n    // - If we MUST refresh, then return the refresh task, blocking\n    //   the pipeline until a token is available.\n    // - If we SHOULD refresh, then run refresh but don't return it\n    //   (we can still use the cached token).\n    // - Return the token, since it's fine if we didn't return in\n    //   step 1.\n    //\n\n    if (cycler.mustRefresh) return refresh(tokenOptions);\n\n    if (cycler.shouldRefresh) {\n      refresh(tokenOptions);\n    }\n\n    return token as AccessToken;\n  };\n}\n\n// #endregion\n\n/**\n * Creates a new factory for a RequestPolicy that applies a bearer token to\n * the requests' `Authorization` headers.\n *\n * @param credential - The TokenCredential implementation that can supply the bearer token.\n * @param scopes - The scopes for which the bearer token applies.\n */\nexport function bearerTokenAuthenticationPolicy(\n  credential: TokenCredential,\n  scopes: string | string[]\n): RequestPolicyFactory {\n  // This simple function encapsulates the entire process of reliably retrieving the token\n  const getToken = createTokenCycler(credential, scopes /* , options */);\n\n  class BearerTokenAuthenticationPolicy extends BaseRequestPolicy {\n    public constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions) {\n      super(nextPolicy, options);\n    }\n\n    public async sendRequest(webResource: WebResourceLike): Promise<HttpOperationResponse> {\n      if (!webResource.url.toLowerCase().startsWith(\"https://\")) {\n        throw new Error(\n          \"Bearer token authentication is not permitted for non-TLS protected (non-https) URLs.\"\n        );\n      }\n\n      const { token } = await getToken({\n        abortSignal: webResource.abortSignal,\n        tracingOptions: {\n          tracingContext: webResource.tracingContext,\n        },\n      });\n      webResource.headers.set(Constants.HeaderConstants.AUTHORIZATION, `Bearer ${token}`);\n      return this._nextPolicy.sendRequest(webResource);\n    }\n  }\n\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new BearerTokenAuthenticationPolicy(nextPolicy, options);\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}
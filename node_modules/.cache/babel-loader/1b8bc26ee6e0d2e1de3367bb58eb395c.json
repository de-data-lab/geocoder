{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/tbeckett/Documents/Azure dev/Azure Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"/Users/tbeckett/Documents/Azure dev/Azure Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tbeckett/Documents/Azure dev/Azure Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * This is a helper class to construct a string representing the permissions granted by a ServiceSAS to a blob. Setting\n * a value to true means that any SAS which uses these permissions will grant permissions for that operation. Once all\n * the values are set, this should be serialized with toString and set as the permissions field on a\n * {@link BlobSASSignatureValues} object. It is possible to construct the permissions string without this class, but\n * the order of the permissions is particular and this class guarantees correctness.\n */\nexport var BlobSASPermissions = /*#__PURE__*/function () {\n  function BlobSASPermissions() {\n    _classCallCheck(this, BlobSASPermissions);\n    /**\n     * Specifies Read access granted.\n     */\n    this.read = false;\n    /**\n     * Specifies Add access granted.\n     */\n    this.add = false;\n    /**\n     * Specifies Create access granted.\n     */\n    this.create = false;\n    /**\n     * Specifies Write access granted.\n     */\n    this.write = false;\n    /**\n     * Specifies Delete access granted.\n     */\n    this.delete = false;\n    /**\n     * Specifies Delete version access granted.\n     */\n    this.deleteVersion = false;\n    /**\n     * Specfies Tag access granted.\n     */\n    this.tag = false;\n    /**\n     * Specifies Move access granted.\n     */\n    this.move = false;\n    /**\n     * Specifies Execute access granted.\n     */\n    this.execute = false;\n    /**\n     * Specifies SetImmutabilityPolicy access granted.\n     */\n    this.setImmutabilityPolicy = false;\n    /**\n     * Specifies that Permanent Delete is permitted.\n     */\n    this.permanentDelete = false;\n  }\n  /**\n   * Creates a {@link BlobSASPermissions} from the specified permissions string. This method will throw an\n   * Error if it encounters a character that does not correspond to a valid permission.\n   *\n   * @param permissions -\n   */\n  _createClass(BlobSASPermissions, [{\n    key: \"toString\",\n    value:\n    /**\n     * Converts the given permissions to a string. Using this method will guarantee the permissions are in an\n     * order accepted by the service.\n     *\n     * @returns A string which represents the BlobSASPermissions\n     */\n    function toString() {\n      var permissions = [];\n      if (this.read) {\n        permissions.push(\"r\");\n      }\n      if (this.add) {\n        permissions.push(\"a\");\n      }\n      if (this.create) {\n        permissions.push(\"c\");\n      }\n      if (this.write) {\n        permissions.push(\"w\");\n      }\n      if (this.delete) {\n        permissions.push(\"d\");\n      }\n      if (this.deleteVersion) {\n        permissions.push(\"x\");\n      }\n      if (this.tag) {\n        permissions.push(\"t\");\n      }\n      if (this.move) {\n        permissions.push(\"m\");\n      }\n      if (this.execute) {\n        permissions.push(\"e\");\n      }\n      if (this.setImmutabilityPolicy) {\n        permissions.push(\"i\");\n      }\n      if (this.permanentDelete) {\n        permissions.push(\"y\");\n      }\n      return permissions.join(\"\");\n    }\n  }], [{\n    key: \"parse\",\n    value: function parse(permissions) {\n      var blobSASPermissions = new BlobSASPermissions();\n      var _iterator = _createForOfIteratorHelper(permissions),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var char = _step.value;\n          switch (char) {\n            case \"r\":\n              blobSASPermissions.read = true;\n              break;\n            case \"a\":\n              blobSASPermissions.add = true;\n              break;\n            case \"c\":\n              blobSASPermissions.create = true;\n              break;\n            case \"w\":\n              blobSASPermissions.write = true;\n              break;\n            case \"d\":\n              blobSASPermissions.delete = true;\n              break;\n            case \"x\":\n              blobSASPermissions.deleteVersion = true;\n              break;\n            case \"t\":\n              blobSASPermissions.tag = true;\n              break;\n            case \"m\":\n              blobSASPermissions.move = true;\n              break;\n            case \"e\":\n              blobSASPermissions.execute = true;\n              break;\n            case \"i\":\n              blobSASPermissions.setImmutabilityPolicy = true;\n              break;\n            case \"y\":\n              blobSASPermissions.permanentDelete = true;\n              break;\n            default:\n              throw new RangeError(\"Invalid permission: \".concat(char));\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return blobSASPermissions;\n    }\n    /**\n     * Creates a {@link BlobSASPermissions} from a raw object which contains same keys as it\n     * and boolean values for them.\n     *\n     * @param permissionLike -\n     */\n  }, {\n    key: \"from\",\n    value: function from(permissionLike) {\n      var blobSASPermissions = new BlobSASPermissions();\n      if (permissionLike.read) {\n        blobSASPermissions.read = true;\n      }\n      if (permissionLike.add) {\n        blobSASPermissions.add = true;\n      }\n      if (permissionLike.create) {\n        blobSASPermissions.create = true;\n      }\n      if (permissionLike.write) {\n        blobSASPermissions.write = true;\n      }\n      if (permissionLike.delete) {\n        blobSASPermissions.delete = true;\n      }\n      if (permissionLike.deleteVersion) {\n        blobSASPermissions.deleteVersion = true;\n      }\n      if (permissionLike.tag) {\n        blobSASPermissions.tag = true;\n      }\n      if (permissionLike.move) {\n        blobSASPermissions.move = true;\n      }\n      if (permissionLike.execute) {\n        blobSASPermissions.execute = true;\n      }\n      if (permissionLike.setImmutabilityPolicy) {\n        blobSASPermissions.setImmutabilityPolicy = true;\n      }\n      if (permissionLike.permanentDelete) {\n        blobSASPermissions.permanentDelete = true;\n      }\n      return blobSASPermissions;\n    }\n  }]);\n  return BlobSASPermissions;\n}();","map":{"version":3,"mappings":";;;AAAA;AACA;AAEA;;;;;;;;;AASA,WAAaA,kBAAkB;EAA/B;IAAA;IAiGE;;;IAGO,SAAI,GAAY,KAAK;IAE5B;;;IAGO,QAAG,GAAY,KAAK;IAE3B;;;IAGO,WAAM,GAAY,KAAK;IAE9B;;;IAGO,UAAK,GAAY,KAAK;IAE7B;;;IAGO,WAAM,GAAY,KAAK;IAE9B;;;IAGO,kBAAa,GAAY,KAAK;IAErC;;;IAGO,QAAG,GAAY,KAAK;IAE3B;;;IAGO,SAAI,GAAY,KAAK;IAE5B;;;IAGO,YAAO,GAAY,KAAK;IAE/B;;;IAGO,0BAAqB,GAAY,KAAK;IAE7C;;;IAGO,oBAAe,GAAY,KAAK;EA6CzC;EAlME;;;;;;EAAA;IAAA;IAAA;IAuJA;;;;;;IAMO,oBAAQ;MACb,IAAMC,WAAW,GAAa,EAAE;MAChC,IAAI,IAAI,CAACC,IAAI,EAAE;QACbD,WAAW,CAACE,IAAI,CAAC,GAAG,CAAC;;MAEvB,IAAI,IAAI,CAACC,GAAG,EAAE;QACZH,WAAW,CAACE,IAAI,CAAC,GAAG,CAAC;;MAEvB,IAAI,IAAI,CAACE,MAAM,EAAE;QACfJ,WAAW,CAACE,IAAI,CAAC,GAAG,CAAC;;MAEvB,IAAI,IAAI,CAACG,KAAK,EAAE;QACdL,WAAW,CAACE,IAAI,CAAC,GAAG,CAAC;;MAEvB,IAAI,IAAI,CAACI,MAAM,EAAE;QACfN,WAAW,CAACE,IAAI,CAAC,GAAG,CAAC;;MAEvB,IAAI,IAAI,CAACK,aAAa,EAAE;QACtBP,WAAW,CAACE,IAAI,CAAC,GAAG,CAAC;;MAEvB,IAAI,IAAI,CAACM,GAAG,EAAE;QACZR,WAAW,CAACE,IAAI,CAAC,GAAG,CAAC;;MAEvB,IAAI,IAAI,CAACO,IAAI,EAAE;QACbT,WAAW,CAACE,IAAI,CAAC,GAAG,CAAC;;MAEvB,IAAI,IAAI,CAACQ,OAAO,EAAE;QAChBV,WAAW,CAACE,IAAI,CAAC,GAAG,CAAC;;MAEvB,IAAI,IAAI,CAACS,qBAAqB,EAAE;QAC9BX,WAAW,CAACE,IAAI,CAAC,GAAG,CAAC;;MAEvB,IAAI,IAAI,CAACU,eAAe,EAAE;QACxBZ,WAAW,CAACE,IAAI,CAAC,GAAG,CAAC;;MAEvB,OAAOF,WAAW,CAACa,IAAI,CAAC,EAAE,CAAC;IAC7B;EAAC;IAAA;IAAA,OA3LM,eAAab,WAAmB;MACrC,IAAMc,kBAAkB,GAAG,IAAIf,kBAAkB,EAAE;MAAC,2CAEjCC,WAAW;QAAA;MAAA;QAA9B,oDAAgC;UAAA,IAArBe,IAAI;UACb,QAAQA,IAAI;YACV,KAAK,GAAG;cACND,kBAAkB,CAACb,IAAI,GAAG,IAAI;cAC9B;YACF,KAAK,GAAG;cACNa,kBAAkB,CAACX,GAAG,GAAG,IAAI;cAC7B;YACF,KAAK,GAAG;cACNW,kBAAkB,CAACV,MAAM,GAAG,IAAI;cAChC;YACF,KAAK,GAAG;cACNU,kBAAkB,CAACT,KAAK,GAAG,IAAI;cAC/B;YACF,KAAK,GAAG;cACNS,kBAAkB,CAACR,MAAM,GAAG,IAAI;cAChC;YACF,KAAK,GAAG;cACNQ,kBAAkB,CAACP,aAAa,GAAG,IAAI;cACvC;YACF,KAAK,GAAG;cACNO,kBAAkB,CAACN,GAAG,GAAG,IAAI;cAC7B;YACF,KAAK,GAAG;cACNM,kBAAkB,CAACL,IAAI,GAAG,IAAI;cAC9B;YACF,KAAK,GAAG;cACNK,kBAAkB,CAACJ,OAAO,GAAG,IAAI;cACjC;YACF,KAAK,GAAG;cACNI,kBAAkB,CAACH,qBAAqB,GAAG,IAAI;cAC/C;YACF,KAAK,GAAG;cACNG,kBAAkB,CAACF,eAAe,GAAG,IAAI;cACzC;YACF;cACE,MAAM,IAAII,UAAU,+BAAwBD,IAAI,EAAG;UAAC;;MAEzD;QAAA;MAAA;QAAA;MAAA;MAED,OAAOD,kBAAkB;IAC3B;IAEA;;;;;;EAAA;IAAA;IAAA,OAMO,cAAYG,cAAsC;MACvD,IAAMH,kBAAkB,GAAG,IAAIf,kBAAkB,EAAE;MACnD,IAAIkB,cAAc,CAAChB,IAAI,EAAE;QACvBa,kBAAkB,CAACb,IAAI,GAAG,IAAI;;MAEhC,IAAIgB,cAAc,CAACd,GAAG,EAAE;QACtBW,kBAAkB,CAACX,GAAG,GAAG,IAAI;;MAE/B,IAAIc,cAAc,CAACb,MAAM,EAAE;QACzBU,kBAAkB,CAACV,MAAM,GAAG,IAAI;;MAElC,IAAIa,cAAc,CAACZ,KAAK,EAAE;QACxBS,kBAAkB,CAACT,KAAK,GAAG,IAAI;;MAEjC,IAAIY,cAAc,CAACX,MAAM,EAAE;QACzBQ,kBAAkB,CAACR,MAAM,GAAG,IAAI;;MAElC,IAAIW,cAAc,CAACV,aAAa,EAAE;QAChCO,kBAAkB,CAACP,aAAa,GAAG,IAAI;;MAEzC,IAAIU,cAAc,CAACT,GAAG,EAAE;QACtBM,kBAAkB,CAACN,GAAG,GAAG,IAAI;;MAE/B,IAAIS,cAAc,CAACR,IAAI,EAAE;QACvBK,kBAAkB,CAACL,IAAI,GAAG,IAAI;;MAEhC,IAAIQ,cAAc,CAACP,OAAO,EAAE;QAC1BI,kBAAkB,CAACJ,OAAO,GAAG,IAAI;;MAEnC,IAAIO,cAAc,CAACN,qBAAqB,EAAE;QACxCG,kBAAkB,CAACH,qBAAqB,GAAG,IAAI;;MAEjD,IAAIM,cAAc,CAACL,eAAe,EAAE;QAClCE,kBAAkB,CAACF,eAAe,GAAG,IAAI;;MAE3C,OAAOE,kBAAkB;IAC3B;EAAC;EAAA;AAAA","names":["BlobSASPermissions","permissions","read","push","add","create","write","delete","deleteVersion","tag","move","execute","setImmutabilityPolicy","permanentDelete","join","blobSASPermissions","char","RangeError","permissionLike"],"sourceRoot":"","sources":["../../../../src/sas/BlobSASPermissions.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * This is a helper class to construct a string representing the permissions granted by a ServiceSAS to a blob. Setting\n * a value to true means that any SAS which uses these permissions will grant permissions for that operation. Once all\n * the values are set, this should be serialized with toString and set as the permissions field on a\n * {@link BlobSASSignatureValues} object. It is possible to construct the permissions string without this class, but\n * the order of the permissions is particular and this class guarantees correctness.\n */\nexport class BlobSASPermissions {\n  /**\n   * Creates a {@link BlobSASPermissions} from the specified permissions string. This method will throw an\n   * Error if it encounters a character that does not correspond to a valid permission.\n   *\n   * @param permissions -\n   */\n  public static parse(permissions: string): BlobSASPermissions {\n    const blobSASPermissions = new BlobSASPermissions();\n\n    for (const char of permissions) {\n      switch (char) {\n        case \"r\":\n          blobSASPermissions.read = true;\n          break;\n        case \"a\":\n          blobSASPermissions.add = true;\n          break;\n        case \"c\":\n          blobSASPermissions.create = true;\n          break;\n        case \"w\":\n          blobSASPermissions.write = true;\n          break;\n        case \"d\":\n          blobSASPermissions.delete = true;\n          break;\n        case \"x\":\n          blobSASPermissions.deleteVersion = true;\n          break;\n        case \"t\":\n          blobSASPermissions.tag = true;\n          break;\n        case \"m\":\n          blobSASPermissions.move = true;\n          break;\n        case \"e\":\n          blobSASPermissions.execute = true;\n          break;\n        case \"i\":\n          blobSASPermissions.setImmutabilityPolicy = true;\n          break;\n        case \"y\":\n          blobSASPermissions.permanentDelete = true;\n          break;\n        default:\n          throw new RangeError(`Invalid permission: ${char}`);\n      }\n    }\n\n    return blobSASPermissions;\n  }\n\n  /**\n   * Creates a {@link BlobSASPermissions} from a raw object which contains same keys as it\n   * and boolean values for them.\n   *\n   * @param permissionLike -\n   */\n  public static from(permissionLike: BlobSASPermissionsLike): BlobSASPermissions {\n    const blobSASPermissions = new BlobSASPermissions();\n    if (permissionLike.read) {\n      blobSASPermissions.read = true;\n    }\n    if (permissionLike.add) {\n      blobSASPermissions.add = true;\n    }\n    if (permissionLike.create) {\n      blobSASPermissions.create = true;\n    }\n    if (permissionLike.write) {\n      blobSASPermissions.write = true;\n    }\n    if (permissionLike.delete) {\n      blobSASPermissions.delete = true;\n    }\n    if (permissionLike.deleteVersion) {\n      blobSASPermissions.deleteVersion = true;\n    }\n    if (permissionLike.tag) {\n      blobSASPermissions.tag = true;\n    }\n    if (permissionLike.move) {\n      blobSASPermissions.move = true;\n    }\n    if (permissionLike.execute) {\n      blobSASPermissions.execute = true;\n    }\n    if (permissionLike.setImmutabilityPolicy) {\n      blobSASPermissions.setImmutabilityPolicy = true;\n    }\n    if (permissionLike.permanentDelete) {\n      blobSASPermissions.permanentDelete = true;\n    }\n    return blobSASPermissions;\n  }\n\n  /**\n   * Specifies Read access granted.\n   */\n  public read: boolean = false;\n\n  /**\n   * Specifies Add access granted.\n   */\n  public add: boolean = false;\n\n  /**\n   * Specifies Create access granted.\n   */\n  public create: boolean = false;\n\n  /**\n   * Specifies Write access granted.\n   */\n  public write: boolean = false;\n\n  /**\n   * Specifies Delete access granted.\n   */\n  public delete: boolean = false;\n\n  /**\n   * Specifies Delete version access granted.\n   */\n  public deleteVersion: boolean = false;\n\n  /**\n   * Specfies Tag access granted.\n   */\n  public tag: boolean = false;\n\n  /**\n   * Specifies Move access granted.\n   */\n  public move: boolean = false;\n\n  /**\n   * Specifies Execute access granted.\n   */\n  public execute: boolean = false;\n\n  /**\n   * Specifies SetImmutabilityPolicy access granted.\n   */\n  public setImmutabilityPolicy: boolean = false;\n\n  /**\n   * Specifies that Permanent Delete is permitted.\n   */\n  public permanentDelete: boolean = false;\n\n  /**\n   * Converts the given permissions to a string. Using this method will guarantee the permissions are in an\n   * order accepted by the service.\n   *\n   * @returns A string which represents the BlobSASPermissions\n   */\n  public toString(): string {\n    const permissions: string[] = [];\n    if (this.read) {\n      permissions.push(\"r\");\n    }\n    if (this.add) {\n      permissions.push(\"a\");\n    }\n    if (this.create) {\n      permissions.push(\"c\");\n    }\n    if (this.write) {\n      permissions.push(\"w\");\n    }\n    if (this.delete) {\n      permissions.push(\"d\");\n    }\n    if (this.deleteVersion) {\n      permissions.push(\"x\");\n    }\n    if (this.tag) {\n      permissions.push(\"t\");\n    }\n    if (this.move) {\n      permissions.push(\"m\");\n    }\n    if (this.execute) {\n      permissions.push(\"e\");\n    }\n    if (this.setImmutabilityPolicy) {\n      permissions.push(\"i\");\n    }\n    if (this.permanentDelete) {\n      permissions.push(\"y\");\n    }\n    return permissions.join(\"\");\n  }\n}\n\n/**\n * A type that looks like a Blob SAS permission.\n * Used in {@link BlobSASPermissions} to parse SAS permissions from raw objects.\n */\nexport interface BlobSASPermissionsLike {\n  /**\n   * Specifies Read access granted.\n   */\n  read?: boolean;\n\n  /**\n   * Specifies Add access granted.\n   */\n  add?: boolean;\n\n  /**\n   * Specifies Create access granted.\n   */\n  create?: boolean;\n\n  /**\n   * Specifies Write access granted.\n   */\n  write?: boolean;\n\n  /**\n   * Specifies Delete access granted.\n   */\n  delete?: boolean;\n\n  /**\n   * Specifies Delete version access granted.\n   */\n  deleteVersion?: boolean;\n\n  /**\n   * Specfies Tag access granted.\n   */\n  tag?: boolean;\n\n  /**\n   * Specifies Move access granted.\n   */\n  move?: boolean;\n\n  /**\n   * Specifies Execute access granted.\n   */\n  execute?: boolean;\n\n  /**\n   * Specifies SetImmutabilityPolicy access granted.\n   */\n  setImmutabilityPolicy?: boolean;\n\n  /**\n   * Specifies that Permanent Delete is permitted.\n   */\n  permanentDelete?: boolean;\n}\n"]},"metadata":{},"sourceType":"module"}
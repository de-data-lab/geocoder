{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { __spreadArrays } from \"tslib\";\nimport { CryptoUtils } from \"./utils/CryptoUtils\";\nimport { SSOTypes, Constants, PromptState, ResponseTypes } from \"./utils/Constants\";\nimport { ScopeSet } from \"./ScopeSet\";\nimport { version as libraryVersion } from \"./packageMetadata\";\n/**\n * Nonce: OIDC Nonce definition: https://openid.net/specs/openid-connect-core-1_0.html#IDToken\n * State: OAuth Spec: https://tools.ietf.org/html/rfc6749#section-10.12\n * @hidden\n */\nvar ServerRequestParameters = /** @class */function () {\n  /**\n   * Constructor\n   * @param authority\n   * @param clientId\n   * @param scope\n   * @param responseType\n   * @param redirectUri\n   * @param state\n   */\n  function ServerRequestParameters(authority, clientId, responseType, redirectUri, scopes, state, correlationId) {\n    this.authorityInstance = authority;\n    this.clientId = clientId;\n    this.nonce = CryptoUtils.createNewGuid();\n    // set scope to clientId if null\n    this.scopes = scopes ? __spreadArrays(scopes) : Constants.oidcScopes;\n    this.scopes = ScopeSet.trimScopes(this.scopes);\n    // set state (already set at top level)\n    this.state = state;\n    // set correlationId\n    this.correlationId = correlationId;\n    // telemetry information\n    this.xClientSku = \"MSAL.JS\";\n    this.xClientVer = libraryVersion;\n    this.responseType = responseType;\n    this.redirectUri = redirectUri;\n  }\n  Object.defineProperty(ServerRequestParameters.prototype, \"authority\", {\n    get: function () {\n      return this.authorityInstance ? this.authorityInstance.CanonicalAuthority : null;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * @hidden\n   * @ignore\n   *\n   * Utility to populate QueryParameters and ExtraQueryParameters to ServerRequestParamerers\n   * @param request\n   * @param serverAuthenticationRequest\n   */\n  ServerRequestParameters.prototype.populateQueryParams = function (account, request, adalIdTokenObject, silentCall) {\n    var queryParameters = {};\n    if (request) {\n      // add the prompt parameter to serverRequestParameters if passed\n      if (request.prompt) {\n        this.promptValue = request.prompt;\n      }\n      // Add claims challenge to serverRequestParameters if passed\n      if (request.claimsRequest) {\n        this.claimsValue = request.claimsRequest;\n      }\n      // if the developer provides one of these, give preference to developer choice\n      if (ServerRequestParameters.isSSOParam(request)) {\n        queryParameters = this.constructUnifiedCacheQueryParameter(request, null);\n      }\n    }\n    if (adalIdTokenObject) {\n      queryParameters = this.constructUnifiedCacheQueryParameter(null, adalIdTokenObject);\n    }\n    /*\n     * adds sid/login_hint if not populated\n     * this.logger.verbose(\"Calling addHint parameters\");\n     */\n    queryParameters = this.addHintParameters(account, queryParameters);\n    // sanity check for developer passed extraQueryParameters\n    var eQParams = request ? request.extraQueryParameters : null;\n    // Populate the extraQueryParameters to be sent to the server\n    this.queryParameters = ServerRequestParameters.generateQueryParametersString(queryParameters);\n    this.extraQueryParameters = ServerRequestParameters.generateQueryParametersString(eQParams, silentCall);\n  };\n  // #region QueryParam helpers\n  /**\n   * Constructs extraQueryParameters to be sent to the server for the AuthenticationParameters set by the developer\n   * in any login() or acquireToken() calls\n   * @param idTokenObject\n   * @param extraQueryParameters\n   * @param sid\n   * @param loginHint\n   */\n  // TODO: check how this behaves when domain_hint only is sent in extraparameters and idToken has no upn.\n  ServerRequestParameters.prototype.constructUnifiedCacheQueryParameter = function (request, idTokenObject) {\n    var _a;\n    // preference order: account > sid > login_hint\n    var ssoType;\n    var ssoData;\n    var serverReqParam = {};\n    // if account info is passed, account.login_hint claim > account.sid > account.username\n    if (request) {\n      if (request.account) {\n        var account = request.account;\n        if ((_a = account.idTokenClaims) === null || _a === void 0 ? void 0 : _a.login_hint) {\n          ssoType = SSOTypes.LOGIN_HINT;\n          ssoData = account.idTokenClaims.login_hint;\n        } else if (account.sid) {\n          ssoType = SSOTypes.SID;\n          ssoData = account.sid;\n        } else if (account.userName) {\n          ssoType = SSOTypes.LOGIN_HINT;\n          ssoData = account.userName;\n        }\n      }\n      // sid from request\n      else if (request.sid) {\n        ssoType = SSOTypes.SID;\n        ssoData = request.sid;\n      }\n      // loginHint from request\n      else if (request.loginHint) {\n        ssoType = SSOTypes.LOGIN_HINT;\n        ssoData = request.loginHint;\n      }\n    }\n    // adalIdToken retrieved from cache\n    else if (idTokenObject) {\n      if (idTokenObject.hasOwnProperty(Constants.upn)) {\n        ssoType = SSOTypes.ID_TOKEN;\n        ssoData = idTokenObject[\"upn\"];\n      }\n    }\n    serverReqParam = this.addSSOParameter(ssoType, ssoData);\n    return serverReqParam;\n  };\n  /**\n   * @hidden\n   *\n   * Adds login_hint to authorization URL which is used to pre-fill the username field of sign in page for the user if known ahead of time\n   * domain_hint if added skips the email based discovery process of the user - only supported for interactive calls in implicit_flow\n   * domain_req utid received as part of the clientInfo\n   * login_req uid received as part of clientInfo\n   * Also does a sanity check for extraQueryParameters passed by the user to ensure no repeat queryParameters\n   *\n   * @param {@link Account} account - Account for which the token is requested\n   * @param queryparams\n   * @param {@link ServerRequestParameters}\n   * @ignore\n   */\n  ServerRequestParameters.prototype.addHintParameters = function (account, params) {\n    var _a, _b;\n    /*\n     * This is a final check for all queryParams added so far; preference order: sid > login_hint\n     * sid cannot be passed along with login_hint or domain_hint, hence we check both are not populated yet in queryParameters\n     */\n    var qParams = params;\n    if (account) {\n      if (!qParams[SSOTypes.SID] && !qParams[SSOTypes.LOGIN_HINT]) {\n        if ((_a = account.idTokenClaims) === null || _a === void 0 ? void 0 : _a.login_hint) {\n          // Use login_hint claim if available over sid or email/upn\n          qParams = this.addSSOParameter(SSOTypes.LOGIN_HINT, (_b = account.idTokenClaims) === null || _b === void 0 ? void 0 : _b.login_hint, qParams);\n        } else if (account.sid && this.promptValue === PromptState.NONE) {\n          // sid - populate only if login_hint is not already populated and the account has sid\n          qParams = this.addSSOParameter(SSOTypes.SID, account.sid, qParams);\n        } else if (account.userName) {\n          // Add username/upn as loginHint if nothing else available\n          qParams = this.addSSOParameter(SSOTypes.LOGIN_HINT, account.userName, qParams);\n        }\n      }\n    }\n    return qParams;\n  };\n  /**\n   * Add SID to extraQueryParameters\n   * @param sid\n   */\n  ServerRequestParameters.prototype.addSSOParameter = function (ssoType, ssoData, params) {\n    var ssoParam = params || {};\n    if (!ssoData) {\n      return ssoParam;\n    }\n    switch (ssoType) {\n      case SSOTypes.SID:\n        {\n          ssoParam[SSOTypes.SID] = ssoData;\n          break;\n        }\n      case SSOTypes.ID_TOKEN:\n        {\n          ssoParam[SSOTypes.LOGIN_HINT] = ssoData;\n          break;\n        }\n      case SSOTypes.LOGIN_HINT:\n        {\n          ssoParam[SSOTypes.LOGIN_HINT] = ssoData;\n          break;\n        }\n    }\n    return ssoParam;\n  };\n  /**\n   * Utility to generate a QueryParameterString from a Key-Value mapping of extraQueryParameters passed\n   * @param extraQueryParameters\n   */\n  ServerRequestParameters.generateQueryParametersString = function (queryParameters, silentCall) {\n    var paramsString = null;\n    if (queryParameters) {\n      Object.keys(queryParameters).forEach(function (key) {\n        // sid cannot be passed along with login_hint or domain_hint\n        if (key === Constants.domain_hint && (silentCall || queryParameters[SSOTypes.SID])) {\n          return;\n        }\n        if (!paramsString) {\n          paramsString = key + \"=\" + encodeURIComponent(queryParameters[key]);\n        } else {\n          paramsString += \"&\" + key + \"=\" + encodeURIComponent(queryParameters[key]);\n        }\n      });\n    }\n    return paramsString;\n  };\n  // #endregion\n  /**\n   * Check to see if there are SSO params set in the Request\n   * @param request\n   */\n  ServerRequestParameters.isSSOParam = function (request) {\n    return !!(request && (request.account || request.sid || request.loginHint));\n  };\n  /**\n   * Returns the correct response_type string attribute for an acquireToken request configuration\n   * @param accountsMatch boolean: Determines whether the account in the request matches the cached account\n   * @param scopes Array<string>: AuthenticationRequest scopes configuration\n   * @param loginScopesOnly boolean: True if the scopes array ONLY contains the clientId or any combination of OIDC scopes, without resource scopes\n   */\n  ServerRequestParameters.determineResponseType = function (accountsMatch, scopes) {\n    // Supports getting an id_token by sending in clientId as only scope or OIDC scopes as only scopes\n    if (ScopeSet.onlyContainsOidcScopes(scopes)) {\n      return ResponseTypes.id_token;\n    }\n    // If accounts match, check if OIDC scopes are included, otherwise return id_token_token\n    return accountsMatch ? this.responseTypeForMatchingAccounts(scopes) : ResponseTypes.id_token_token;\n  };\n  /**\n   * Returns the correct response_type string attribute for an acquireToken request configuration that contains an\n   * account that matches the account in the MSAL cache.\n   * @param scopes Array<string>: AuthenticationRequest scopes configuration\n   */\n  ServerRequestParameters.responseTypeForMatchingAccounts = function (scopes) {\n    // Opt-into also requesting an ID token by sending in 'openid', 'profile' or both along with resource scopes when login is not necessary.\n    return ScopeSet.containsAnyOidcScopes(scopes) ? ResponseTypes.id_token_token : ResponseTypes.token;\n  };\n  return ServerRequestParameters;\n}();\nexport { ServerRequestParameters };","map":{"version":3,"mappings":"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","names":["CryptoUtils","SSOTypes","Constants","PromptState","ResponseTypes","ScopeSet","version","libraryVersion","authority","clientId","responseType","redirectUri","scopes","state","correlationId","authorityInstance","nonce","createNewGuid","__spreadArrays","oidcScopes","trimScopes","xClientSku","xClientVer","Object","ServerRequestParameters","CanonicalAuthority","account","request","adalIdTokenObject","silentCall","queryParameters","prompt","promptValue","claimsRequest","claimsValue","isSSOParam","constructUnifiedCacheQueryParameter","addHintParameters","eQParams","extraQueryParameters","generateQueryParametersString","idTokenObject","ssoType","ssoData","serverReqParam","idTokenClaims","login_hint","LOGIN_HINT","sid","SID","userName","loginHint","hasOwnProperty","upn","ID_TOKEN","addSSOParameter","params","qParams","NONE","ssoParam","paramsString","keys","forEach","key","domain_hint","encodeURIComponent","accountsMatch","onlyContainsOidcScopes","id_token","responseTypeForMatchingAccounts","id_token_token","containsAnyOidcScopes","token"],"sourceRoot":"","sources":["../src/ServerRequestParameters.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}
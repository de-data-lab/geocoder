{"ast":null,"code":"import _classCallCheck from \"/Users/tbeckett/Documents/Azure dev/Azure Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tbeckett/Documents/Azure dev/Azure Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/tbeckett/Documents/Azure dev/Azure Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/tbeckett/Documents/Azure dev/Azure Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { BaseRequestPolicy } from \"./requestPolicy\";\nimport { getDefaultUserAgentKey, getPlatformSpecificData } from \"./msRestUserAgentPolicy\";\nimport { Constants } from \"../util/constants\";\nimport { HttpHeaders } from \"../httpHeaders\";\nfunction getRuntimeInfo() {\n  var msRestRuntime = {\n    key: \"core-http\",\n    value: Constants.coreHttpVersion\n  };\n  return [msRestRuntime];\n}\nfunction getUserAgentString(telemetryInfo) {\n  var keySeparator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \" \";\n  var valueSeparator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"/\";\n  return telemetryInfo.map(function (info) {\n    var value = info.value ? \"\".concat(valueSeparator).concat(info.value) : \"\";\n    return \"\".concat(info.key).concat(value);\n  }).join(keySeparator);\n}\nexport var getDefaultUserAgentHeaderName = getDefaultUserAgentKey;\n/**\n * The default approach to generate user agents.\n * Uses static information from this package, plus system information available from the runtime.\n */\nexport function getDefaultUserAgentValue() {\n  var runtimeInfo = getRuntimeInfo();\n  var platformSpecificData = getPlatformSpecificData();\n  var userAgent = getUserAgentString(runtimeInfo.concat(platformSpecificData));\n  return userAgent;\n}\n/**\n * Returns a policy that adds the user agent header to outgoing requests based on the given {@link TelemetryInfo}.\n * @param userAgentData - Telemetry information.\n * @returns A new {@link UserAgentPolicy}.\n */\nexport function userAgentPolicy(userAgentData) {\n  var key = !userAgentData || userAgentData.key === undefined || userAgentData.key === null ? getDefaultUserAgentKey() : userAgentData.key;\n  var value = !userAgentData || userAgentData.value === undefined || userAgentData.value === null ? getDefaultUserAgentValue() : userAgentData.value;\n  return {\n    create: function create(nextPolicy, options) {\n      return new UserAgentPolicy(nextPolicy, options, key, value);\n    }\n  };\n}\n/**\n * A policy that adds the user agent header to outgoing requests based on the given {@link TelemetryInfo}.\n */\nexport var UserAgentPolicy = /*#__PURE__*/function (_BaseRequestPolicy) {\n  _inherits(UserAgentPolicy, _BaseRequestPolicy);\n  var _super = _createSuper(UserAgentPolicy);\n  function UserAgentPolicy(_nextPolicy, _options, headerKey, headerValue) {\n    var _this;\n    _classCallCheck(this, UserAgentPolicy);\n    _this = _super.call(this, _nextPolicy, _options);\n    _this._nextPolicy = _nextPolicy;\n    _this._options = _options;\n    _this.headerKey = headerKey;\n    _this.headerValue = headerValue;\n    return _this;\n  }\n  _createClass(UserAgentPolicy, [{\n    key: \"sendRequest\",\n    value: function sendRequest(request) {\n      this.addUserAgentHeader(request);\n      return this._nextPolicy.sendRequest(request);\n    }\n    /**\n     * Adds the user agent header to the outgoing request.\n     */\n  }, {\n    key: \"addUserAgentHeader\",\n    value: function addUserAgentHeader(request) {\n      if (!request.headers) {\n        request.headers = new HttpHeaders();\n      }\n      if (!request.headers.get(this.headerKey) && this.headerValue) {\n        request.headers.set(this.headerKey, this.headerValue);\n      }\n    }\n  }]);\n  return UserAgentPolicy;\n}(BaseRequestPolicy);","map":{"version":3,"mappings":"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","names":["BaseRequestPolicy","getDefaultUserAgentKey","getPlatformSpecificData","Constants","HttpHeaders","getRuntimeInfo","msRestRuntime","key","value","coreHttpVersion","getUserAgentString","telemetryInfo","keySeparator","valueSeparator","map","info","join","getDefaultUserAgentHeaderName","getDefaultUserAgentValue","runtimeInfo","platformSpecificData","userAgent","concat","userAgentPolicy","userAgentData","undefined","create","nextPolicy","options","UserAgentPolicy","_nextPolicy","_options","headerKey","headerValue","request","addUserAgentHeader","sendRequest","headers","get","set"],"sourceRoot":"","sources":["../../../src/policies/userAgentPolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n} from \"./requestPolicy\";\nimport { getDefaultUserAgentKey, getPlatformSpecificData } from \"./msRestUserAgentPolicy\";\nimport { Constants } from \"../util/constants\";\nimport { HttpHeaders } from \"../httpHeaders\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { WebResourceLike } from \"../webResource\";\n\n/**\n * Telemetry information. Key/value pairs to include inside the User-Agent string.\n */\nexport type TelemetryInfo = { key?: string; value?: string };\n\n/**\n * Options for adding user agent details to outgoing requests.\n */\nexport interface UserAgentOptions {\n  /**\n   * String prefix to add to the user agent for outgoing requests.\n   * Defaults to an empty string.\n   */\n  userAgentPrefix?: string;\n}\n\nfunction getRuntimeInfo(): TelemetryInfo[] {\n  const msRestRuntime = {\n    key: \"core-http\",\n    value: Constants.coreHttpVersion,\n  };\n\n  return [msRestRuntime];\n}\n\nfunction getUserAgentString(\n  telemetryInfo: TelemetryInfo[],\n  keySeparator = \" \",\n  valueSeparator = \"/\"\n): string {\n  return telemetryInfo\n    .map((info) => {\n      const value = info.value ? `${valueSeparator}${info.value}` : \"\";\n      return `${info.key}${value}`;\n    })\n    .join(keySeparator);\n}\n\nexport const getDefaultUserAgentHeaderName = getDefaultUserAgentKey;\n\n/**\n * The default approach to generate user agents.\n * Uses static information from this package, plus system information available from the runtime.\n */\nexport function getDefaultUserAgentValue(): string {\n  const runtimeInfo = getRuntimeInfo();\n  const platformSpecificData = getPlatformSpecificData();\n  const userAgent = getUserAgentString(runtimeInfo.concat(platformSpecificData));\n  return userAgent;\n}\n\n/**\n * Returns a policy that adds the user agent header to outgoing requests based on the given {@link TelemetryInfo}.\n * @param userAgentData - Telemetry information.\n * @returns A new {@link UserAgentPolicy}.\n */\nexport function userAgentPolicy(userAgentData?: TelemetryInfo): RequestPolicyFactory {\n  const key: string =\n    !userAgentData || userAgentData.key === undefined || userAgentData.key === null\n      ? getDefaultUserAgentKey()\n      : userAgentData.key;\n  const value: string =\n    !userAgentData || userAgentData.value === undefined || userAgentData.value === null\n      ? getDefaultUserAgentValue()\n      : userAgentData.value;\n\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new UserAgentPolicy(nextPolicy, options, key, value);\n    },\n  };\n}\n\n/**\n * A policy that adds the user agent header to outgoing requests based on the given {@link TelemetryInfo}.\n */\nexport class UserAgentPolicy extends BaseRequestPolicy {\n  constructor(\n    readonly _nextPolicy: RequestPolicy,\n    readonly _options: RequestPolicyOptions,\n    protected headerKey: string,\n    protected headerValue: string\n  ) {\n    super(_nextPolicy, _options);\n  }\n\n  sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    this.addUserAgentHeader(request);\n    return this._nextPolicy.sendRequest(request);\n  }\n\n  /**\n   * Adds the user agent header to the outgoing request.\n   */\n  addUserAgentHeader(request: WebResourceLike): void {\n    if (!request.headers) {\n      request.headers = new HttpHeaders();\n    }\n\n    if (!request.headers.get(this.headerKey) && this.headerValue) {\n      request.headers.set(this.headerKey, this.headerValue);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
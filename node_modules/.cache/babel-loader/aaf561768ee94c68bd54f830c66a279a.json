{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/tbeckett/Documents/geo-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"/Users/tbeckett/Documents/geo-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tbeckett/Documents/geo-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * This is a helper class to construct a string representing the resources accessible by an AccountSAS. Setting a value\n * to true means that any SAS which uses these permissions will grant access to that resource type. Once all the\n * values are set, this should be serialized with toString and set as the resources field on an\n * {@link AccountSASSignatureValues} object. It is possible to construct the resources string without this class, but\n * the order of the resources is particular and this class guarantees correctness.\n */\nexport var AccountSASResourceTypes = /*#__PURE__*/function () {\n  function AccountSASResourceTypes() {\n    _classCallCheck(this, AccountSASResourceTypes);\n    /**\n     * Permission to access service level APIs granted.\n     */\n    this.service = false;\n    /**\n     * Permission to access container level APIs (Blob Containers, Tables, Queues, File Shares) granted.\n     */\n    this.container = false;\n    /**\n     * Permission to access object level APIs (Blobs, Table Entities, Queue Messages, Files) granted.\n     */\n    this.object = false;\n  }\n  /**\n   * Creates an {@link AccountSASResourceTypes} from the specified resource types string. This method will throw an\n   * Error if it encounters a character that does not correspond to a valid resource type.\n   *\n   * @param resourceTypes -\n   */\n  _createClass(AccountSASResourceTypes, [{\n    key: \"toString\",\n    value:\n    /**\n     * Converts the given resource types to a string.\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas\n     *\n     */\n    function toString() {\n      var resourceTypes = [];\n      if (this.service) {\n        resourceTypes.push(\"s\");\n      }\n      if (this.container) {\n        resourceTypes.push(\"c\");\n      }\n      if (this.object) {\n        resourceTypes.push(\"o\");\n      }\n      return resourceTypes.join(\"\");\n    }\n  }], [{\n    key: \"parse\",\n    value: function parse(resourceTypes) {\n      var accountSASResourceTypes = new AccountSASResourceTypes();\n      var _iterator = _createForOfIteratorHelper(resourceTypes),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var c = _step.value;\n          switch (c) {\n            case \"s\":\n              accountSASResourceTypes.service = true;\n              break;\n            case \"c\":\n              accountSASResourceTypes.container = true;\n              break;\n            case \"o\":\n              accountSASResourceTypes.object = true;\n              break;\n            default:\n              throw new RangeError(\"Invalid resource type: \".concat(c));\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return accountSASResourceTypes;\n    }\n  }]);\n  return AccountSASResourceTypes;\n}();","map":{"version":3,"mappings":";;;AAAA;AACA;AAEA;;;;;;;;;AASA,WAAaA,uBAAuB;EAApC;IAAA;IA6BE;;;IAGO,YAAO,GAAY,KAAK;IAE/B;;;IAGO,cAAS,GAAY,KAAK;IAEjC;;;IAGO,WAAM,GAAY,KAAK;EAqBhC;EA9DE;;;;;;EAAA;IAAA;IAAA;IA2CA;;;;;;IAMO,oBAAQ;MACb,IAAMC,aAAa,GAAa,EAAE;MAClC,IAAI,IAAI,CAACC,OAAO,EAAE;QAChBD,aAAa,CAACE,IAAI,CAAC,GAAG,CAAC;;MAEzB,IAAI,IAAI,CAACC,SAAS,EAAE;QAClBH,aAAa,CAACE,IAAI,CAAC,GAAG,CAAC;;MAEzB,IAAI,IAAI,CAACE,MAAM,EAAE;QACfJ,aAAa,CAACE,IAAI,CAAC,GAAG,CAAC;;MAEzB,OAAOF,aAAa,CAACK,IAAI,CAAC,EAAE,CAAC;IAC/B;EAAC;IAAA;IAAA,OAvDM,eAAaL,aAAqB;MACvC,IAAMM,uBAAuB,GAAG,IAAIP,uBAAuB,EAAE;MAAC,2CAE9CC,aAAa;QAAA;MAAA;QAA7B,oDAA+B;UAAA,IAApBO,CAAC;UACV,QAAQA,CAAC;YACP,KAAK,GAAG;cACND,uBAAuB,CAACL,OAAO,GAAG,IAAI;cACtC;YACF,KAAK,GAAG;cACNK,uBAAuB,CAACH,SAAS,GAAG,IAAI;cACxC;YACF,KAAK,GAAG;cACNG,uBAAuB,CAACF,MAAM,GAAG,IAAI;cACrC;YACF;cACE,MAAM,IAAII,UAAU,kCAA2BD,CAAC,EAAG;UAAC;;MAEzD;QAAA;MAAA;QAAA;MAAA;MAED,OAAOD,uBAAuB;IAChC;EAAC;EAAA;AAAA","names":["AccountSASResourceTypes","resourceTypes","service","push","container","object","join","accountSASResourceTypes","c","RangeError"],"sourceRoot":"","sources":["../../../../src/sas/AccountSASResourceTypes.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * This is a helper class to construct a string representing the resources accessible by an AccountSAS. Setting a value\n * to true means that any SAS which uses these permissions will grant access to that resource type. Once all the\n * values are set, this should be serialized with toString and set as the resources field on an\n * {@link AccountSASSignatureValues} object. It is possible to construct the resources string without this class, but\n * the order of the resources is particular and this class guarantees correctness.\n */\nexport class AccountSASResourceTypes {\n  /**\n   * Creates an {@link AccountSASResourceTypes} from the specified resource types string. This method will throw an\n   * Error if it encounters a character that does not correspond to a valid resource type.\n   *\n   * @param resourceTypes -\n   */\n  public static parse(resourceTypes: string): AccountSASResourceTypes {\n    const accountSASResourceTypes = new AccountSASResourceTypes();\n\n    for (const c of resourceTypes) {\n      switch (c) {\n        case \"s\":\n          accountSASResourceTypes.service = true;\n          break;\n        case \"c\":\n          accountSASResourceTypes.container = true;\n          break;\n        case \"o\":\n          accountSASResourceTypes.object = true;\n          break;\n        default:\n          throw new RangeError(`Invalid resource type: ${c}`);\n      }\n    }\n\n    return accountSASResourceTypes;\n  }\n\n  /**\n   * Permission to access service level APIs granted.\n   */\n  public service: boolean = false;\n\n  /**\n   * Permission to access container level APIs (Blob Containers, Tables, Queues, File Shares) granted.\n   */\n  public container: boolean = false;\n\n  /**\n   * Permission to access object level APIs (Blobs, Table Entities, Queue Messages, Files) granted.\n   */\n  public object: boolean = false;\n\n  /**\n   * Converts the given resource types to a string.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas\n   *\n   */\n  public toString(): string {\n    const resourceTypes: string[] = [];\n    if (this.service) {\n      resourceTypes.push(\"s\");\n    }\n    if (this.container) {\n      resourceTypes.push(\"c\");\n    }\n    if (this.object) {\n      resourceTypes.push(\"o\");\n    }\n    return resourceTypes.join(\"\");\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/tbeckett/Documents/TI - Project Info/JavaScript_end_to_end_client_file_upload_to_Azure_Storage_Blobs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"/Users/tbeckett/Documents/TI - Project Info/JavaScript_end_to_end_client_file_upload_to_Azure_Storage_Blobs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tbeckett/Documents/TI - Project Info/JavaScript_end_to_end_client_file_upload_to_Azure_Storage_Blobs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { replaceAll as _replaceAll } from \"./util/utils\";\n/**\n * A class that handles the query portion of a URLBuilder.\n */\nexport var URLQuery = /*#__PURE__*/function () {\n  function URLQuery() {\n    _classCallCheck(this, URLQuery);\n    this._rawQuery = {};\n  }\n  /**\n   * Get whether or not there any query parameters in this URLQuery.\n   */\n  _createClass(URLQuery, [{\n    key: \"any\",\n    value: function any() {\n      return Object.keys(this._rawQuery).length > 0;\n    }\n    /**\n     * Get the keys of the query string.\n     */\n  }, {\n    key: \"keys\",\n    value: function keys() {\n      return Object.keys(this._rawQuery);\n    }\n    /**\n     * Set a query parameter with the provided name and value. If the parameterValue is undefined or\n     * empty, then this will attempt to remove an existing query parameter with the provided\n     * parameterName.\n     */\n  }, {\n    key: \"set\",\n    value: function set(parameterName, parameterValue) {\n      var caseParameterValue = parameterValue;\n      if (parameterName) {\n        if (caseParameterValue !== undefined && caseParameterValue !== null) {\n          var newValue = Array.isArray(caseParameterValue) ? caseParameterValue : caseParameterValue.toString();\n          this._rawQuery[parameterName] = newValue;\n        } else {\n          delete this._rawQuery[parameterName];\n        }\n      }\n    }\n    /**\n     * Get the value of the query parameter with the provided name. If no parameter exists with the\n     * provided parameter name, then undefined will be returned.\n     */\n  }, {\n    key: \"get\",\n    value: function get(parameterName) {\n      return parameterName ? this._rawQuery[parameterName] : undefined;\n    }\n    /**\n     * Get the string representation of this query. The return value will not start with a \"?\".\n     */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var result = \"\";\n      for (var parameterName in this._rawQuery) {\n        if (result) {\n          result += \"&\";\n        }\n        var parameterValue = this._rawQuery[parameterName];\n        if (Array.isArray(parameterValue)) {\n          var parameterStrings = [];\n          var _iterator = _createForOfIteratorHelper(parameterValue),\n            _step;\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var parameterValueElement = _step.value;\n              parameterStrings.push(\"\".concat(parameterName, \"=\").concat(parameterValueElement));\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n          result += parameterStrings.join(\"&\");\n        } else {\n          result += \"\".concat(parameterName, \"=\").concat(parameterValue);\n        }\n      }\n      return result;\n    }\n    /**\n     * Parse a URLQuery from the provided text.\n     */\n  }], [{\n    key: \"parse\",\n    value: function parse(text) {\n      var result = new URLQuery();\n      if (text) {\n        if (text.startsWith(\"?\")) {\n          text = text.substring(1);\n        }\n        var currentState = \"ParameterName\";\n        var parameterName = \"\";\n        var parameterValue = \"\";\n        for (var i = 0; i < text.length; ++i) {\n          var currentCharacter = text[i];\n          switch (currentState) {\n            case \"ParameterName\":\n              switch (currentCharacter) {\n                case \"=\":\n                  currentState = \"ParameterValue\";\n                  break;\n                case \"&\":\n                  parameterName = \"\";\n                  parameterValue = \"\";\n                  break;\n                default:\n                  parameterName += currentCharacter;\n                  break;\n              }\n              break;\n            case \"ParameterValue\":\n              switch (currentCharacter) {\n                case \"&\":\n                  result.set(parameterName, parameterValue);\n                  parameterName = \"\";\n                  parameterValue = \"\";\n                  currentState = \"ParameterName\";\n                  break;\n                default:\n                  parameterValue += currentCharacter;\n                  break;\n              }\n              break;\n            default:\n              throw new Error(\"Unrecognized URLQuery parse state: \" + currentState);\n          }\n        }\n        if (currentState === \"ParameterValue\") {\n          result.set(parameterName, parameterValue);\n        }\n      }\n      return result;\n    }\n  }]);\n  return URLQuery;\n}();\n/**\n * A class that handles creating, modifying, and parsing URLs.\n */\nexport var URLBuilder = /*#__PURE__*/function () {\n  function URLBuilder() {\n    _classCallCheck(this, URLBuilder);\n  }\n  _createClass(URLBuilder, [{\n    key: \"setScheme\",\n    value:\n    /**\n     * Set the scheme/protocol for this URL. If the provided scheme contains other parts of a URL\n     * (such as a host, port, path, or query), those parts will be added to this URL as well.\n     */\n    function setScheme(scheme) {\n      if (!scheme) {\n        this._scheme = undefined;\n      } else {\n        this.set(scheme, \"SCHEME\");\n      }\n    }\n    /**\n     * Get the scheme that has been set in this URL.\n     */\n  }, {\n    key: \"getScheme\",\n    value: function getScheme() {\n      return this._scheme;\n    }\n    /**\n     * Set the host for this URL. If the provided host contains other parts of a URL (such as a\n     * port, path, or query), those parts will be added to this URL as well.\n     */\n  }, {\n    key: \"setHost\",\n    value: function setHost(host) {\n      if (!host) {\n        this._host = undefined;\n      } else {\n        this.set(host, \"SCHEME_OR_HOST\");\n      }\n    }\n    /**\n     * Get the host that has been set in this URL.\n     */\n  }, {\n    key: \"getHost\",\n    value: function getHost() {\n      return this._host;\n    }\n    /**\n     * Set the port for this URL. If the provided port contains other parts of a URL (such as a\n     * path or query), those parts will be added to this URL as well.\n     */\n  }, {\n    key: \"setPort\",\n    value: function setPort(port) {\n      if (port === undefined || port === null || port === \"\") {\n        this._port = undefined;\n      } else {\n        this.set(port.toString(), \"PORT\");\n      }\n    }\n    /**\n     * Get the port that has been set in this URL.\n     */\n  }, {\n    key: \"getPort\",\n    value: function getPort() {\n      return this._port;\n    }\n    /**\n     * Set the path for this URL. If the provided path contains a query, then it will be added to\n     * this URL as well.\n     */\n  }, {\n    key: \"setPath\",\n    value: function setPath(path) {\n      if (!path) {\n        this._path = undefined;\n      } else {\n        var schemeIndex = path.indexOf(\"://\");\n        if (schemeIndex !== -1) {\n          var schemeStart = path.lastIndexOf(\"/\", schemeIndex);\n          // Make sure to only grab the URL part of the path before setting the state back to SCHEME\n          // this will handle cases such as \"/a/b/c/https://microsoft.com\" => \"https://microsoft.com\"\n          this.set(schemeStart === -1 ? path : path.substr(schemeStart + 1), \"SCHEME\");\n        } else {\n          this.set(path, \"PATH\");\n        }\n      }\n    }\n    /**\n     * Append the provided path to this URL's existing path. If the provided path contains a query,\n     * then it will be added to this URL as well.\n     */\n  }, {\n    key: \"appendPath\",\n    value: function appendPath(path) {\n      if (path) {\n        var currentPath = this.getPath();\n        if (currentPath) {\n          if (!currentPath.endsWith(\"/\")) {\n            currentPath += \"/\";\n          }\n          if (path.startsWith(\"/\")) {\n            path = path.substring(1);\n          }\n          path = currentPath + path;\n        }\n        this.set(path, \"PATH\");\n      }\n    }\n    /**\n     * Get the path that has been set in this URL.\n     */\n  }, {\n    key: \"getPath\",\n    value: function getPath() {\n      return this._path;\n    }\n    /**\n     * Set the query in this URL.\n     */\n  }, {\n    key: \"setQuery\",\n    value: function setQuery(query) {\n      if (!query) {\n        this._query = undefined;\n      } else {\n        this._query = URLQuery.parse(query);\n      }\n    }\n    /**\n     * Set a query parameter with the provided name and value in this URL's query. If the provided\n     * query parameter value is undefined or empty, then the query parameter will be removed if it\n     * existed.\n     */\n  }, {\n    key: \"setQueryParameter\",\n    value: function setQueryParameter(queryParameterName, queryParameterValue) {\n      if (queryParameterName) {\n        if (!this._query) {\n          this._query = new URLQuery();\n        }\n        this._query.set(queryParameterName, queryParameterValue);\n      }\n    }\n    /**\n     * Get the value of the query parameter with the provided query parameter name. If no query\n     * parameter exists with the provided name, then undefined will be returned.\n     */\n  }, {\n    key: \"getQueryParameterValue\",\n    value: function getQueryParameterValue(queryParameterName) {\n      return this._query ? this._query.get(queryParameterName) : undefined;\n    }\n    /**\n     * Get the query in this URL.\n     */\n  }, {\n    key: \"getQuery\",\n    value: function getQuery() {\n      return this._query ? this._query.toString() : undefined;\n    }\n    /**\n     * Set the parts of this URL by parsing the provided text using the provided startState.\n     */\n  }, {\n    key: \"set\",\n    value: function set(text, startState) {\n      var tokenizer = new URLTokenizer(text, startState);\n      while (tokenizer.next()) {\n        var token = tokenizer.current();\n        var tokenPath = void 0;\n        if (token) {\n          switch (token.type) {\n            case \"SCHEME\":\n              this._scheme = token.text || undefined;\n              break;\n            case \"HOST\":\n              this._host = token.text || undefined;\n              break;\n            case \"PORT\":\n              this._port = token.text || undefined;\n              break;\n            case \"PATH\":\n              tokenPath = token.text || undefined;\n              if (!this._path || this._path === \"/\" || tokenPath !== \"/\") {\n                this._path = tokenPath;\n              }\n              break;\n            case \"QUERY\":\n              this._query = URLQuery.parse(token.text);\n              break;\n            default:\n              throw new Error(\"Unrecognized URLTokenType: \".concat(token.type));\n          }\n        }\n      }\n    }\n    /**\n     * Serializes the URL as a string.\n     * @returns the URL as a string.\n     */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var result = \"\";\n      if (this._scheme) {\n        result += \"\".concat(this._scheme, \"://\");\n      }\n      if (this._host) {\n        result += this._host;\n      }\n      if (this._port) {\n        result += \":\".concat(this._port);\n      }\n      if (this._path) {\n        if (!this._path.startsWith(\"/\")) {\n          result += \"/\";\n        }\n        result += this._path;\n      }\n      if (this._query && this._query.any()) {\n        result += \"?\".concat(this._query.toString());\n      }\n      return result;\n    }\n    /**\n     * If the provided searchValue is found in this URLBuilder, then replace it with the provided\n     * replaceValue.\n     */\n  }, {\n    key: \"replaceAll\",\n    value: function replaceAll(searchValue, replaceValue) {\n      if (searchValue) {\n        this.setScheme(_replaceAll(this.getScheme(), searchValue, replaceValue));\n        this.setHost(_replaceAll(this.getHost(), searchValue, replaceValue));\n        this.setPort(_replaceAll(this.getPort(), searchValue, replaceValue));\n        this.setPath(_replaceAll(this.getPath(), searchValue, replaceValue));\n        this.setQuery(_replaceAll(this.getQuery(), searchValue, replaceValue));\n      }\n    }\n    /**\n     * Parses a given string URL into a new {@link URLBuilder}.\n     */\n  }], [{\n    key: \"parse\",\n    value: function parse(text) {\n      var result = new URLBuilder();\n      result.set(text, \"SCHEME_OR_HOST\");\n      return result;\n    }\n  }]);\n  return URLBuilder;\n}();\nexport var URLToken = /*#__PURE__*/function () {\n  function URLToken(text, type) {\n    _classCallCheck(this, URLToken);\n    this.text = text;\n    this.type = type;\n  }\n  _createClass(URLToken, null, [{\n    key: \"scheme\",\n    value: function scheme(text) {\n      return new URLToken(text, \"SCHEME\");\n    }\n  }, {\n    key: \"host\",\n    value: function host(text) {\n      return new URLToken(text, \"HOST\");\n    }\n  }, {\n    key: \"port\",\n    value: function port(text) {\n      return new URLToken(text, \"PORT\");\n    }\n  }, {\n    key: \"path\",\n    value: function path(text) {\n      return new URLToken(text, \"PATH\");\n    }\n  }, {\n    key: \"query\",\n    value: function query(text) {\n      return new URLToken(text, \"QUERY\");\n    }\n  }]);\n  return URLToken;\n}();\n/**\n * Get whether or not the provided character (single character string) is an alphanumeric (letter or\n * digit) character.\n */\nexport function isAlphaNumericCharacter(character) {\n  var characterCode = character.charCodeAt(0);\n  return 48 /* '0' */ <= characterCode && characterCode <= 57 /* '9' */ || 65 /* 'A' */ <= characterCode && characterCode <= 90 /* 'Z' */ || 97 /* 'a' */ <= characterCode && characterCode <= 122 /* 'z' */;\n}\n/**\n * A class that tokenizes URL strings.\n */\nexport var URLTokenizer = /*#__PURE__*/function () {\n  function URLTokenizer(_text, state) {\n    _classCallCheck(this, URLTokenizer);\n    this._text = _text;\n    this._textLength = _text ? _text.length : 0;\n    this._currentState = state !== undefined && state !== null ? state : \"SCHEME_OR_HOST\";\n    this._currentIndex = 0;\n  }\n  /**\n   * Get the current URLToken this URLTokenizer is pointing at, or undefined if the URLTokenizer\n   * hasn't started or has finished tokenizing.\n   */\n  _createClass(URLTokenizer, [{\n    key: \"current\",\n    value: function current() {\n      return this._currentToken;\n    }\n    /**\n     * Advance to the next URLToken and return whether or not a URLToken was found.\n     */\n  }, {\n    key: \"next\",\n    value: function next() {\n      if (!hasCurrentCharacter(this)) {\n        this._currentToken = undefined;\n      } else {\n        switch (this._currentState) {\n          case \"SCHEME\":\n            nextScheme(this);\n            break;\n          case \"SCHEME_OR_HOST\":\n            nextSchemeOrHost(this);\n            break;\n          case \"HOST\":\n            nextHost(this);\n            break;\n          case \"PORT\":\n            nextPort(this);\n            break;\n          case \"PATH\":\n            nextPath(this);\n            break;\n          case \"QUERY\":\n            nextQuery(this);\n            break;\n          default:\n            throw new Error(\"Unrecognized URLTokenizerState: \".concat(this._currentState));\n        }\n      }\n      return !!this._currentToken;\n    }\n  }]);\n  return URLTokenizer;\n}();\n/**\n * Read the remaining characters from this Tokenizer's character stream.\n */\nfunction readRemaining(tokenizer) {\n  var result = \"\";\n  if (tokenizer._currentIndex < tokenizer._textLength) {\n    result = tokenizer._text.substring(tokenizer._currentIndex);\n    tokenizer._currentIndex = tokenizer._textLength;\n  }\n  return result;\n}\n/**\n * Whether or not this URLTokenizer has a current character.\n */\nfunction hasCurrentCharacter(tokenizer) {\n  return tokenizer._currentIndex < tokenizer._textLength;\n}\n/**\n * Get the character in the text string at the current index.\n */\nfunction getCurrentCharacter(tokenizer) {\n  return tokenizer._text[tokenizer._currentIndex];\n}\n/**\n * Advance to the character in text that is \"step\" characters ahead. If no step value is provided,\n * then step will default to 1.\n */\nfunction nextCharacter(tokenizer, step) {\n  if (hasCurrentCharacter(tokenizer)) {\n    if (!step) {\n      step = 1;\n    }\n    tokenizer._currentIndex += step;\n  }\n}\n/**\n * Starting with the current character, peek \"charactersToPeek\" number of characters ahead in this\n * Tokenizer's stream of characters.\n */\nfunction peekCharacters(tokenizer, charactersToPeek) {\n  var endIndex = tokenizer._currentIndex + charactersToPeek;\n  if (tokenizer._textLength < endIndex) {\n    endIndex = tokenizer._textLength;\n  }\n  return tokenizer._text.substring(tokenizer._currentIndex, endIndex);\n}\n/**\n * Read characters from this Tokenizer until the end of the stream or until the provided condition\n * is false when provided the current character.\n */\nfunction readWhile(tokenizer, condition) {\n  var result = \"\";\n  while (hasCurrentCharacter(tokenizer)) {\n    var currentCharacter = getCurrentCharacter(tokenizer);\n    if (!condition(currentCharacter)) {\n      break;\n    } else {\n      result += currentCharacter;\n      nextCharacter(tokenizer);\n    }\n  }\n  return result;\n}\n/**\n * Read characters from this Tokenizer until a non-alphanumeric character or the end of the\n * character stream is reached.\n */\nfunction readWhileLetterOrDigit(tokenizer) {\n  return readWhile(tokenizer, function (character) {\n    return isAlphaNumericCharacter(character);\n  });\n}\n/**\n * Read characters from this Tokenizer until one of the provided terminating characters is read or\n * the end of the character stream is reached.\n */\nfunction readUntilCharacter(tokenizer) {\n  for (var _len = arguments.length, terminatingCharacters = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    terminatingCharacters[_key - 1] = arguments[_key];\n  }\n  return readWhile(tokenizer, function (character) {\n    return terminatingCharacters.indexOf(character) === -1;\n  });\n}\nfunction nextScheme(tokenizer) {\n  var scheme = readWhileLetterOrDigit(tokenizer);\n  tokenizer._currentToken = URLToken.scheme(scheme);\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentState = \"DONE\";\n  } else {\n    tokenizer._currentState = \"HOST\";\n  }\n}\nfunction nextSchemeOrHost(tokenizer) {\n  var schemeOrHost = readUntilCharacter(tokenizer, \":\", \"/\", \"?\");\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentToken = URLToken.host(schemeOrHost);\n    tokenizer._currentState = \"DONE\";\n  } else if (getCurrentCharacter(tokenizer) === \":\") {\n    if (peekCharacters(tokenizer, 3) === \"://\") {\n      tokenizer._currentToken = URLToken.scheme(schemeOrHost);\n      tokenizer._currentState = \"HOST\";\n    } else {\n      tokenizer._currentToken = URLToken.host(schemeOrHost);\n      tokenizer._currentState = \"PORT\";\n    }\n  } else {\n    tokenizer._currentToken = URLToken.host(schemeOrHost);\n    if (getCurrentCharacter(tokenizer) === \"/\") {\n      tokenizer._currentState = \"PATH\";\n    } else {\n      tokenizer._currentState = \"QUERY\";\n    }\n  }\n}\nfunction nextHost(tokenizer) {\n  if (peekCharacters(tokenizer, 3) === \"://\") {\n    nextCharacter(tokenizer, 3);\n  }\n  var host = readUntilCharacter(tokenizer, \":\", \"/\", \"?\");\n  tokenizer._currentToken = URLToken.host(host);\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentState = \"DONE\";\n  } else if (getCurrentCharacter(tokenizer) === \":\") {\n    tokenizer._currentState = \"PORT\";\n  } else if (getCurrentCharacter(tokenizer) === \"/\") {\n    tokenizer._currentState = \"PATH\";\n  } else {\n    tokenizer._currentState = \"QUERY\";\n  }\n}\nfunction nextPort(tokenizer) {\n  if (getCurrentCharacter(tokenizer) === \":\") {\n    nextCharacter(tokenizer);\n  }\n  var port = readUntilCharacter(tokenizer, \"/\", \"?\");\n  tokenizer._currentToken = URLToken.port(port);\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentState = \"DONE\";\n  } else if (getCurrentCharacter(tokenizer) === \"/\") {\n    tokenizer._currentState = \"PATH\";\n  } else {\n    tokenizer._currentState = \"QUERY\";\n  }\n}\nfunction nextPath(tokenizer) {\n  var path = readUntilCharacter(tokenizer, \"?\");\n  tokenizer._currentToken = URLToken.path(path);\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentState = \"DONE\";\n  } else {\n    tokenizer._currentState = \"QUERY\";\n  }\n}\nfunction nextQuery(tokenizer) {\n  if (getCurrentCharacter(tokenizer) === \"?\") {\n    nextCharacter(tokenizer);\n  }\n  var query = readRemaining(tokenizer);\n  tokenizer._currentToken = URLToken.query(query);\n  tokenizer._currentState = \"DONE\";\n}","map":{"version":3,"mappings":"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","names":["replaceAll","URLQuery","Object","keys","_rawQuery","length","parameterName","parameterValue","caseParameterValue","undefined","newValue","Array","isArray","toString","result","parameterStrings","parameterValueElement","push","join","text","startsWith","substring","currentState","i","currentCharacter","set","Error","URLBuilder","scheme","_scheme","host","_host","port","_port","path","_path","schemeIndex","indexOf","schemeStart","lastIndexOf","substr","currentPath","getPath","endsWith","query","_query","parse","queryParameterName","queryParameterValue","get","startState","tokenizer","URLTokenizer","next","token","current","tokenPath","type","any","searchValue","replaceValue","setScheme","getScheme","setHost","getHost","setPort","getPort","setPath","setQuery","getQuery","URLToken","isAlphaNumericCharacter","character","characterCode","charCodeAt","_text","state","_textLength","_currentState","_currentIndex","_currentToken","hasCurrentCharacter","nextScheme","nextSchemeOrHost","nextHost","nextPort","nextPath","nextQuery","readRemaining","getCurrentCharacter","nextCharacter","step","peekCharacters","charactersToPeek","endIndex","readWhile","condition","readWhileLetterOrDigit","readUntilCharacter","terminatingCharacters","schemeOrHost"],"sourceRoot":"","sources":["../../src/url.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { replaceAll } from \"./util/utils\";\n\ntype URLQueryParseState = \"ParameterName\" | \"ParameterValue\";\n\n/**\n * A class that handles the query portion of a URLBuilder.\n */\nexport class URLQuery {\n  private readonly _rawQuery: { [queryParameterName: string]: string | string[] } = {};\n\n  /**\n   * Get whether or not there any query parameters in this URLQuery.\n   */\n  public any(): boolean {\n    return Object.keys(this._rawQuery).length > 0;\n  }\n\n  /**\n   * Get the keys of the query string.\n   */\n  public keys(): string[] {\n    return Object.keys(this._rawQuery);\n  }\n\n  /**\n   * Set a query parameter with the provided name and value. If the parameterValue is undefined or\n   * empty, then this will attempt to remove an existing query parameter with the provided\n   * parameterName.\n   */\n  public set(parameterName: string, parameterValue: unknown): void {\n    const caseParameterValue = parameterValue as {\n      toString: () => string;\n    };\n    if (parameterName) {\n      if (caseParameterValue !== undefined && caseParameterValue !== null) {\n        const newValue = Array.isArray(caseParameterValue)\n          ? caseParameterValue\n          : caseParameterValue.toString();\n        this._rawQuery[parameterName] = newValue;\n      } else {\n        delete this._rawQuery[parameterName];\n      }\n    }\n  }\n\n  /**\n   * Get the value of the query parameter with the provided name. If no parameter exists with the\n   * provided parameter name, then undefined will be returned.\n   */\n  public get(parameterName: string): string | string[] | undefined {\n    return parameterName ? this._rawQuery[parameterName] : undefined;\n  }\n\n  /**\n   * Get the string representation of this query. The return value will not start with a \"?\".\n   */\n  public toString(): string {\n    let result = \"\";\n    for (const parameterName in this._rawQuery) {\n      if (result) {\n        result += \"&\";\n      }\n      const parameterValue = this._rawQuery[parameterName];\n      if (Array.isArray(parameterValue)) {\n        const parameterStrings = [];\n        for (const parameterValueElement of parameterValue) {\n          parameterStrings.push(`${parameterName}=${parameterValueElement}`);\n        }\n        result += parameterStrings.join(\"&\");\n      } else {\n        result += `${parameterName}=${parameterValue}`;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Parse a URLQuery from the provided text.\n   */\n  public static parse(text: string): URLQuery {\n    const result = new URLQuery();\n\n    if (text) {\n      if (text.startsWith(\"?\")) {\n        text = text.substring(1);\n      }\n\n      let currentState: URLQueryParseState = \"ParameterName\";\n\n      let parameterName = \"\";\n      let parameterValue = \"\";\n      for (let i = 0; i < text.length; ++i) {\n        const currentCharacter: string = text[i];\n        switch (currentState) {\n          case \"ParameterName\":\n            switch (currentCharacter) {\n              case \"=\":\n                currentState = \"ParameterValue\";\n                break;\n\n              case \"&\":\n                parameterName = \"\";\n                parameterValue = \"\";\n                break;\n\n              default:\n                parameterName += currentCharacter;\n                break;\n            }\n            break;\n\n          case \"ParameterValue\":\n            switch (currentCharacter) {\n              case \"&\":\n                result.set(parameterName, parameterValue);\n                parameterName = \"\";\n                parameterValue = \"\";\n                currentState = \"ParameterName\";\n                break;\n\n              default:\n                parameterValue += currentCharacter;\n                break;\n            }\n            break;\n\n          default:\n            throw new Error(\"Unrecognized URLQuery parse state: \" + currentState);\n        }\n      }\n      if (currentState === \"ParameterValue\") {\n        result.set(parameterName, parameterValue);\n      }\n    }\n\n    return result;\n  }\n}\n\n/**\n * A class that handles creating, modifying, and parsing URLs.\n */\nexport class URLBuilder {\n  private _scheme: string | undefined;\n  private _host: string | undefined;\n  private _port: string | undefined;\n  private _path: string | undefined;\n  private _query: URLQuery | undefined;\n\n  /**\n   * Set the scheme/protocol for this URL. If the provided scheme contains other parts of a URL\n   * (such as a host, port, path, or query), those parts will be added to this URL as well.\n   */\n  public setScheme(scheme: string | undefined): void {\n    if (!scheme) {\n      this._scheme = undefined;\n    } else {\n      this.set(scheme, \"SCHEME\");\n    }\n  }\n\n  /**\n   * Get the scheme that has been set in this URL.\n   */\n  public getScheme(): string | undefined {\n    return this._scheme;\n  }\n\n  /**\n   * Set the host for this URL. If the provided host contains other parts of a URL (such as a\n   * port, path, or query), those parts will be added to this URL as well.\n   */\n  public setHost(host: string | undefined): void {\n    if (!host) {\n      this._host = undefined;\n    } else {\n      this.set(host, \"SCHEME_OR_HOST\");\n    }\n  }\n\n  /**\n   * Get the host that has been set in this URL.\n   */\n  public getHost(): string | undefined {\n    return this._host;\n  }\n\n  /**\n   * Set the port for this URL. If the provided port contains other parts of a URL (such as a\n   * path or query), those parts will be added to this URL as well.\n   */\n  public setPort(port: number | string | undefined): void {\n    if (port === undefined || port === null || port === \"\") {\n      this._port = undefined;\n    } else {\n      this.set(port.toString(), \"PORT\");\n    }\n  }\n\n  /**\n   * Get the port that has been set in this URL.\n   */\n  public getPort(): string | undefined {\n    return this._port;\n  }\n\n  /**\n   * Set the path for this URL. If the provided path contains a query, then it will be added to\n   * this URL as well.\n   */\n  public setPath(path: string | undefined): void {\n    if (!path) {\n      this._path = undefined;\n    } else {\n      const schemeIndex = path.indexOf(\"://\");\n      if (schemeIndex !== -1) {\n        const schemeStart = path.lastIndexOf(\"/\", schemeIndex);\n        // Make sure to only grab the URL part of the path before setting the state back to SCHEME\n        // this will handle cases such as \"/a/b/c/https://microsoft.com\" => \"https://microsoft.com\"\n        this.set(schemeStart === -1 ? path : path.substr(schemeStart + 1), \"SCHEME\");\n      } else {\n        this.set(path, \"PATH\");\n      }\n    }\n  }\n\n  /**\n   * Append the provided path to this URL's existing path. If the provided path contains a query,\n   * then it will be added to this URL as well.\n   */\n  public appendPath(path: string | undefined): void {\n    if (path) {\n      let currentPath: string | undefined = this.getPath();\n      if (currentPath) {\n        if (!currentPath.endsWith(\"/\")) {\n          currentPath += \"/\";\n        }\n\n        if (path.startsWith(\"/\")) {\n          path = path.substring(1);\n        }\n\n        path = currentPath + path;\n      }\n      this.set(path, \"PATH\");\n    }\n  }\n\n  /**\n   * Get the path that has been set in this URL.\n   */\n  public getPath(): string | undefined {\n    return this._path;\n  }\n\n  /**\n   * Set the query in this URL.\n   */\n  public setQuery(query: string | undefined): void {\n    if (!query) {\n      this._query = undefined;\n    } else {\n      this._query = URLQuery.parse(query);\n    }\n  }\n\n  /**\n   * Set a query parameter with the provided name and value in this URL's query. If the provided\n   * query parameter value is undefined or empty, then the query parameter will be removed if it\n   * existed.\n   */\n  public setQueryParameter(queryParameterName: string, queryParameterValue: unknown): void {\n    if (queryParameterName) {\n      if (!this._query) {\n        this._query = new URLQuery();\n      }\n      this._query.set(queryParameterName, queryParameterValue);\n    }\n  }\n\n  /**\n   * Get the value of the query parameter with the provided query parameter name. If no query\n   * parameter exists with the provided name, then undefined will be returned.\n   */\n  public getQueryParameterValue(queryParameterName: string): string | string[] | undefined {\n    return this._query ? this._query.get(queryParameterName) : undefined;\n  }\n\n  /**\n   * Get the query in this URL.\n   */\n  public getQuery(): string | undefined {\n    return this._query ? this._query.toString() : undefined;\n  }\n\n  /**\n   * Set the parts of this URL by parsing the provided text using the provided startState.\n   */\n  private set(text: string, startState: URLTokenizerState): void {\n    const tokenizer = new URLTokenizer(text, startState);\n\n    while (tokenizer.next()) {\n      const token: URLToken | undefined = tokenizer.current();\n      let tokenPath: string | undefined;\n      if (token) {\n        switch (token.type) {\n          case \"SCHEME\":\n            this._scheme = token.text || undefined;\n            break;\n\n          case \"HOST\":\n            this._host = token.text || undefined;\n            break;\n\n          case \"PORT\":\n            this._port = token.text || undefined;\n            break;\n\n          case \"PATH\":\n            tokenPath = token.text || undefined;\n            if (!this._path || this._path === \"/\" || tokenPath !== \"/\") {\n              this._path = tokenPath;\n            }\n            break;\n\n          case \"QUERY\":\n            this._query = URLQuery.parse(token.text);\n            break;\n\n          default:\n            throw new Error(`Unrecognized URLTokenType: ${token.type}`);\n        }\n      }\n    }\n  }\n\n  /**\n   * Serializes the URL as a string.\n   * @returns the URL as a string.\n   */\n  public toString(): string {\n    let result = \"\";\n\n    if (this._scheme) {\n      result += `${this._scheme}://`;\n    }\n\n    if (this._host) {\n      result += this._host;\n    }\n\n    if (this._port) {\n      result += `:${this._port}`;\n    }\n\n    if (this._path) {\n      if (!this._path.startsWith(\"/\")) {\n        result += \"/\";\n      }\n      result += this._path;\n    }\n\n    if (this._query && this._query.any()) {\n      result += `?${this._query.toString()}`;\n    }\n\n    return result;\n  }\n\n  /**\n   * If the provided searchValue is found in this URLBuilder, then replace it with the provided\n   * replaceValue.\n   */\n  public replaceAll(searchValue: string, replaceValue: string): void {\n    if (searchValue) {\n      this.setScheme(replaceAll(this.getScheme(), searchValue, replaceValue));\n      this.setHost(replaceAll(this.getHost(), searchValue, replaceValue));\n      this.setPort(replaceAll(this.getPort(), searchValue, replaceValue));\n      this.setPath(replaceAll(this.getPath(), searchValue, replaceValue));\n      this.setQuery(replaceAll(this.getQuery(), searchValue, replaceValue));\n    }\n  }\n\n  /**\n   * Parses a given string URL into a new {@link URLBuilder}.\n   */\n  public static parse(text: string): URLBuilder {\n    const result = new URLBuilder();\n    result.set(text, \"SCHEME_OR_HOST\");\n    return result;\n  }\n}\n\ntype URLTokenizerState = \"SCHEME\" | \"SCHEME_OR_HOST\" | \"HOST\" | \"PORT\" | \"PATH\" | \"QUERY\" | \"DONE\";\n\ntype URLTokenType = \"SCHEME\" | \"HOST\" | \"PORT\" | \"PATH\" | \"QUERY\";\n\nexport class URLToken {\n  public constructor(public readonly text: string, public readonly type: URLTokenType) {}\n\n  public static scheme(text: string): URLToken {\n    return new URLToken(text, \"SCHEME\");\n  }\n\n  public static host(text: string): URLToken {\n    return new URLToken(text, \"HOST\");\n  }\n\n  public static port(text: string): URLToken {\n    return new URLToken(text, \"PORT\");\n  }\n\n  public static path(text: string): URLToken {\n    return new URLToken(text, \"PATH\");\n  }\n\n  public static query(text: string): URLToken {\n    return new URLToken(text, \"QUERY\");\n  }\n}\n\n/**\n * Get whether or not the provided character (single character string) is an alphanumeric (letter or\n * digit) character.\n */\nexport function isAlphaNumericCharacter(character: string): boolean {\n  const characterCode: number = character.charCodeAt(0);\n  return (\n    (48 /* '0' */ <= characterCode && characterCode <= 57) /* '9' */ ||\n    (65 /* 'A' */ <= characterCode && characterCode <= 90) /* 'Z' */ ||\n    (97 /* 'a' */ <= characterCode && characterCode <= 122) /* 'z' */\n  );\n}\n\n/**\n * A class that tokenizes URL strings.\n */\nexport class URLTokenizer {\n  readonly _textLength: number;\n  _currentState: URLTokenizerState;\n  _currentIndex: number;\n  _currentToken: URLToken | undefined;\n\n  public constructor(readonly _text: string, state?: URLTokenizerState) {\n    this._textLength = _text ? _text.length : 0;\n    this._currentState = state !== undefined && state !== null ? state : \"SCHEME_OR_HOST\";\n    this._currentIndex = 0;\n  }\n\n  /**\n   * Get the current URLToken this URLTokenizer is pointing at, or undefined if the URLTokenizer\n   * hasn't started or has finished tokenizing.\n   */\n  public current(): URLToken | undefined {\n    return this._currentToken;\n  }\n\n  /**\n   * Advance to the next URLToken and return whether or not a URLToken was found.\n   */\n  public next(): boolean {\n    if (!hasCurrentCharacter(this)) {\n      this._currentToken = undefined;\n    } else {\n      switch (this._currentState) {\n        case \"SCHEME\":\n          nextScheme(this);\n          break;\n\n        case \"SCHEME_OR_HOST\":\n          nextSchemeOrHost(this);\n          break;\n\n        case \"HOST\":\n          nextHost(this);\n          break;\n\n        case \"PORT\":\n          nextPort(this);\n          break;\n\n        case \"PATH\":\n          nextPath(this);\n          break;\n\n        case \"QUERY\":\n          nextQuery(this);\n          break;\n\n        default:\n          throw new Error(`Unrecognized URLTokenizerState: ${this._currentState}`);\n      }\n    }\n    return !!this._currentToken;\n  }\n}\n\n/**\n * Read the remaining characters from this Tokenizer's character stream.\n */\nfunction readRemaining(tokenizer: URLTokenizer): string {\n  let result = \"\";\n  if (tokenizer._currentIndex < tokenizer._textLength) {\n    result = tokenizer._text.substring(tokenizer._currentIndex);\n    tokenizer._currentIndex = tokenizer._textLength;\n  }\n  return result;\n}\n\n/**\n * Whether or not this URLTokenizer has a current character.\n */\nfunction hasCurrentCharacter(tokenizer: URLTokenizer): boolean {\n  return tokenizer._currentIndex < tokenizer._textLength;\n}\n\n/**\n * Get the character in the text string at the current index.\n */\nfunction getCurrentCharacter(tokenizer: URLTokenizer): string {\n  return tokenizer._text[tokenizer._currentIndex];\n}\n\n/**\n * Advance to the character in text that is \"step\" characters ahead. If no step value is provided,\n * then step will default to 1.\n */\nfunction nextCharacter(tokenizer: URLTokenizer, step?: number): void {\n  if (hasCurrentCharacter(tokenizer)) {\n    if (!step) {\n      step = 1;\n    }\n    tokenizer._currentIndex += step;\n  }\n}\n\n/**\n * Starting with the current character, peek \"charactersToPeek\" number of characters ahead in this\n * Tokenizer's stream of characters.\n */\nfunction peekCharacters(tokenizer: URLTokenizer, charactersToPeek: number): string {\n  let endIndex: number = tokenizer._currentIndex + charactersToPeek;\n  if (tokenizer._textLength < endIndex) {\n    endIndex = tokenizer._textLength;\n  }\n  return tokenizer._text.substring(tokenizer._currentIndex, endIndex);\n}\n\n/**\n * Read characters from this Tokenizer until the end of the stream or until the provided condition\n * is false when provided the current character.\n */\nfunction readWhile(tokenizer: URLTokenizer, condition: (character: string) => boolean): string {\n  let result = \"\";\n\n  while (hasCurrentCharacter(tokenizer)) {\n    const currentCharacter: string = getCurrentCharacter(tokenizer);\n    if (!condition(currentCharacter)) {\n      break;\n    } else {\n      result += currentCharacter;\n      nextCharacter(tokenizer);\n    }\n  }\n\n  return result;\n}\n\n/**\n * Read characters from this Tokenizer until a non-alphanumeric character or the end of the\n * character stream is reached.\n */\nfunction readWhileLetterOrDigit(tokenizer: URLTokenizer): string {\n  return readWhile(tokenizer, (character: string) => isAlphaNumericCharacter(character));\n}\n\n/**\n * Read characters from this Tokenizer until one of the provided terminating characters is read or\n * the end of the character stream is reached.\n */\nfunction readUntilCharacter(tokenizer: URLTokenizer, ...terminatingCharacters: string[]): string {\n  return readWhile(\n    tokenizer,\n    (character: string) => terminatingCharacters.indexOf(character) === -1\n  );\n}\n\nfunction nextScheme(tokenizer: URLTokenizer): void {\n  const scheme: string = readWhileLetterOrDigit(tokenizer);\n  tokenizer._currentToken = URLToken.scheme(scheme);\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentState = \"DONE\";\n  } else {\n    tokenizer._currentState = \"HOST\";\n  }\n}\n\nfunction nextSchemeOrHost(tokenizer: URLTokenizer): void {\n  const schemeOrHost: string = readUntilCharacter(tokenizer, \":\", \"/\", \"?\");\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentToken = URLToken.host(schemeOrHost);\n    tokenizer._currentState = \"DONE\";\n  } else if (getCurrentCharacter(tokenizer) === \":\") {\n    if (peekCharacters(tokenizer, 3) === \"://\") {\n      tokenizer._currentToken = URLToken.scheme(schemeOrHost);\n      tokenizer._currentState = \"HOST\";\n    } else {\n      tokenizer._currentToken = URLToken.host(schemeOrHost);\n      tokenizer._currentState = \"PORT\";\n    }\n  } else {\n    tokenizer._currentToken = URLToken.host(schemeOrHost);\n    if (getCurrentCharacter(tokenizer) === \"/\") {\n      tokenizer._currentState = \"PATH\";\n    } else {\n      tokenizer._currentState = \"QUERY\";\n    }\n  }\n}\n\nfunction nextHost(tokenizer: URLTokenizer): void {\n  if (peekCharacters(tokenizer, 3) === \"://\") {\n    nextCharacter(tokenizer, 3);\n  }\n\n  const host: string = readUntilCharacter(tokenizer, \":\", \"/\", \"?\");\n  tokenizer._currentToken = URLToken.host(host);\n\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentState = \"DONE\";\n  } else if (getCurrentCharacter(tokenizer) === \":\") {\n    tokenizer._currentState = \"PORT\";\n  } else if (getCurrentCharacter(tokenizer) === \"/\") {\n    tokenizer._currentState = \"PATH\";\n  } else {\n    tokenizer._currentState = \"QUERY\";\n  }\n}\n\nfunction nextPort(tokenizer: URLTokenizer): void {\n  if (getCurrentCharacter(tokenizer) === \":\") {\n    nextCharacter(tokenizer);\n  }\n\n  const port: string = readUntilCharacter(tokenizer, \"/\", \"?\");\n  tokenizer._currentToken = URLToken.port(port);\n\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentState = \"DONE\";\n  } else if (getCurrentCharacter(tokenizer) === \"/\") {\n    tokenizer._currentState = \"PATH\";\n  } else {\n    tokenizer._currentState = \"QUERY\";\n  }\n}\n\nfunction nextPath(tokenizer: URLTokenizer): void {\n  const path: string = readUntilCharacter(tokenizer, \"?\");\n  tokenizer._currentToken = URLToken.path(path);\n\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentState = \"DONE\";\n  } else {\n    tokenizer._currentState = \"QUERY\";\n  }\n}\n\nfunction nextQuery(tokenizer: URLTokenizer): void {\n  if (getCurrentCharacter(tokenizer) === \"?\") {\n    nextCharacter(tokenizer);\n  }\n\n  const query: string = readRemaining(tokenizer);\n  tokenizer._currentToken = URLToken.query(query);\n  tokenizer._currentState = \"DONE\";\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { initOperation, pollOperation } from \"../poller/operation\";\nimport { logger } from \"../logger\";\nfunction getOperationLocationPollingUrl(inputs) {\n  const {\n    azureAsyncOperation,\n    operationLocation\n  } = inputs;\n  return operationLocation !== null && operationLocation !== void 0 ? operationLocation : azureAsyncOperation;\n}\nfunction getLocationHeader(rawResponse) {\n  return rawResponse.headers[\"location\"];\n}\nfunction getOperationLocationHeader(rawResponse) {\n  return rawResponse.headers[\"operation-location\"];\n}\nfunction getAzureAsyncOperationHeader(rawResponse) {\n  return rawResponse.headers[\"azure-asyncoperation\"];\n}\nfunction findResourceLocation(inputs) {\n  const {\n    location,\n    requestMethod,\n    requestPath,\n    resourceLocationConfig\n  } = inputs;\n  switch (requestMethod) {\n    case \"PUT\":\n      {\n        return requestPath;\n      }\n    case \"DELETE\":\n      {\n        return undefined;\n      }\n    default:\n      {\n        switch (resourceLocationConfig) {\n          case \"azure-async-operation\":\n            {\n              return undefined;\n            }\n          case \"original-uri\":\n            {\n              return requestPath;\n            }\n          case \"location\":\n          default:\n            {\n              return location;\n            }\n        }\n      }\n  }\n}\nexport function inferLroMode(inputs) {\n  const {\n    rawResponse,\n    requestMethod,\n    requestPath,\n    resourceLocationConfig\n  } = inputs;\n  const operationLocation = getOperationLocationHeader(rawResponse);\n  const azureAsyncOperation = getAzureAsyncOperationHeader(rawResponse);\n  const pollingUrl = getOperationLocationPollingUrl({\n    operationLocation,\n    azureAsyncOperation\n  });\n  const location = getLocationHeader(rawResponse);\n  const normalizedRequestMethod = requestMethod === null || requestMethod === void 0 ? void 0 : requestMethod.toLocaleUpperCase();\n  if (pollingUrl !== undefined) {\n    return {\n      mode: \"OperationLocation\",\n      operationLocation: pollingUrl,\n      resourceLocation: findResourceLocation({\n        requestMethod: normalizedRequestMethod,\n        location,\n        requestPath,\n        resourceLocationConfig\n      })\n    };\n  } else if (location !== undefined) {\n    return {\n      mode: \"ResourceLocation\",\n      operationLocation: location\n    };\n  } else if (normalizedRequestMethod === \"PUT\" && requestPath) {\n    return {\n      mode: \"Body\",\n      operationLocation: requestPath\n    };\n  } else {\n    return undefined;\n  }\n}\nfunction transformStatus(inputs) {\n  const {\n    status,\n    statusCode\n  } = inputs;\n  if (typeof status !== \"string\" && status !== undefined) {\n    throw new Error(`Polling was unsuccessful. Expected status to have a string value or no value but it has instead: ${status}. This doesn't necessarily indicate the operation has failed. Check your Azure subscription or resource status for more information.`);\n  }\n  switch (status === null || status === void 0 ? void 0 : status.toLocaleLowerCase()) {\n    case undefined:\n      return toOperationStatus(statusCode);\n    case \"succeeded\":\n      return \"succeeded\";\n    case \"failed\":\n      return \"failed\";\n    case \"running\":\n    case \"accepted\":\n    case \"started\":\n    case \"canceling\":\n    case \"cancelling\":\n      return \"running\";\n    case \"canceled\":\n    case \"cancelled\":\n      return \"canceled\";\n    default:\n      {\n        logger.warning(`LRO: unrecognized operation status: ${status}`);\n        return status;\n      }\n  }\n}\nfunction getStatus(rawResponse) {\n  var _a;\n  const {\n    status\n  } = (_a = rawResponse.body) !== null && _a !== void 0 ? _a : {};\n  return transformStatus({\n    status,\n    statusCode: rawResponse.statusCode\n  });\n}\nfunction getProvisioningState(rawResponse) {\n  var _a, _b;\n  const {\n    properties,\n    provisioningState\n  } = (_a = rawResponse.body) !== null && _a !== void 0 ? _a : {};\n  const status = (_b = properties === null || properties === void 0 ? void 0 : properties.provisioningState) !== null && _b !== void 0 ? _b : provisioningState;\n  return transformStatus({\n    status,\n    statusCode: rawResponse.statusCode\n  });\n}\nfunction toOperationStatus(statusCode) {\n  if (statusCode === 202) {\n    return \"running\";\n  } else if (statusCode < 300) {\n    return \"succeeded\";\n  } else {\n    return \"failed\";\n  }\n}\nexport function parseRetryAfter(_ref) {\n  let {\n    rawResponse\n  } = _ref;\n  const retryAfter = rawResponse.headers[\"retry-after\"];\n  if (retryAfter !== undefined) {\n    // Retry-After header value is either in HTTP date format, or in seconds\n    const retryAfterInSeconds = parseInt(retryAfter);\n    return isNaN(retryAfterInSeconds) ? calculatePollingIntervalFromDate(new Date(retryAfter)) : retryAfterInSeconds * 1000;\n  }\n  return undefined;\n}\nfunction calculatePollingIntervalFromDate(retryAfterDate) {\n  const timeNow = Math.floor(new Date().getTime());\n  const retryAfterTime = retryAfterDate.getTime();\n  if (timeNow < retryAfterTime) {\n    return retryAfterTime - timeNow;\n  }\n  return undefined;\n}\nexport function getStatusFromInitialResponse(inputs) {\n  const {\n    response,\n    state,\n    operationLocation\n  } = inputs;\n  function helper() {\n    var _a;\n    const mode = (_a = state.config.metadata) === null || _a === void 0 ? void 0 : _a[\"mode\"];\n    switch (mode) {\n      case undefined:\n        return toOperationStatus(response.rawResponse.statusCode);\n      case \"Body\":\n        return getOperationStatus(response, state);\n      default:\n        return \"running\";\n    }\n  }\n  const status = helper();\n  return status === \"running\" && operationLocation === undefined ? \"succeeded\" : status;\n}\n/**\n * Initiates the long-running operation.\n */\nexport async function initHttpOperation(inputs) {\n  const {\n    stateProxy,\n    resourceLocationConfig,\n    processResult,\n    lro,\n    setErrorAsResult\n  } = inputs;\n  return initOperation({\n    init: async () => {\n      const response = await lro.sendInitialRequest();\n      const config = inferLroMode({\n        rawResponse: response.rawResponse,\n        requestPath: lro.requestPath,\n        requestMethod: lro.requestMethod,\n        resourceLocationConfig\n      });\n      return Object.assign({\n        response,\n        operationLocation: config === null || config === void 0 ? void 0 : config.operationLocation,\n        resourceLocation: config === null || config === void 0 ? void 0 : config.resourceLocation\n      }, (config === null || config === void 0 ? void 0 : config.mode) ? {\n        metadata: {\n          mode: config.mode\n        }\n      } : {});\n    },\n    stateProxy,\n    processResult: processResult ? (_ref2, state) => {\n      let {\n        flatResponse\n      } = _ref2;\n      return processResult(flatResponse, state);\n    } : _ref3 => {\n      let {\n        flatResponse\n      } = _ref3;\n      return flatResponse;\n    },\n    getOperationStatus: getStatusFromInitialResponse,\n    setErrorAsResult\n  });\n}\nexport function getOperationLocation(_ref4, state) {\n  let {\n    rawResponse\n  } = _ref4;\n  var _a;\n  const mode = (_a = state.config.metadata) === null || _a === void 0 ? void 0 : _a[\"mode\"];\n  switch (mode) {\n    case \"OperationLocation\":\n      {\n        return getOperationLocationPollingUrl({\n          operationLocation: getOperationLocationHeader(rawResponse),\n          azureAsyncOperation: getAzureAsyncOperationHeader(rawResponse)\n        });\n      }\n    case \"ResourceLocation\":\n      {\n        return getLocationHeader(rawResponse);\n      }\n    case \"Body\":\n    default:\n      {\n        return undefined;\n      }\n  }\n}\nexport function getOperationStatus(_ref5, state) {\n  let {\n    rawResponse\n  } = _ref5;\n  var _a;\n  const mode = (_a = state.config.metadata) === null || _a === void 0 ? void 0 : _a[\"mode\"];\n  switch (mode) {\n    case \"OperationLocation\":\n      {\n        return getStatus(rawResponse);\n      }\n    case \"ResourceLocation\":\n      {\n        return toOperationStatus(rawResponse.statusCode);\n      }\n    case \"Body\":\n      {\n        return getProvisioningState(rawResponse);\n      }\n    default:\n      throw new Error(`Internal error: Unexpected operation mode: ${mode}`);\n  }\n}\nexport function getResourceLocation(_ref6, state) {\n  let {\n    flatResponse\n  } = _ref6;\n  if (typeof flatResponse === \"object\") {\n    const resourceLocation = flatResponse.resourceLocation;\n    if (resourceLocation !== undefined) {\n      state.config.resourceLocation = resourceLocation;\n    }\n  }\n  return state.config.resourceLocation;\n}\n/** Polls the long-running operation. */\nexport async function pollHttpOperation(inputs) {\n  const {\n    lro,\n    stateProxy,\n    options,\n    processResult,\n    updateState,\n    setDelay,\n    state,\n    setErrorAsResult\n  } = inputs;\n  return pollOperation({\n    state,\n    stateProxy,\n    setDelay,\n    processResult: processResult ? (_ref7, inputState) => {\n      let {\n        flatResponse\n      } = _ref7;\n      return processResult(flatResponse, inputState);\n    } : _ref8 => {\n      let {\n        flatResponse\n      } = _ref8;\n      return flatResponse;\n    },\n    updateState,\n    getPollingInterval: parseRetryAfter,\n    getOperationLocation,\n    getOperationStatus,\n    getResourceLocation,\n    options,\n    /**\n     * The expansion here is intentional because `lro` could be an object that\n     * references an inner this, so we need to preserve a reference to it.\n     */\n    poll: async (location, inputOptions) => lro.sendPollRequest(location, inputOptions),\n    setErrorAsResult\n  });\n}","map":{"version":3,"mappings":"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","names":["initOperation","pollOperation","logger","getOperationLocationPollingUrl","inputs","azureAsyncOperation","operationLocation","getLocationHeader","rawResponse","headers","getOperationLocationHeader","getAzureAsyncOperationHeader","findResourceLocation","location","requestMethod","requestPath","resourceLocationConfig","undefined","inferLroMode","pollingUrl","normalizedRequestMethod","toLocaleUpperCase","mode","resourceLocation","transformStatus","status","statusCode","Error","toLocaleLowerCase","toOperationStatus","warning","getStatus","body","getProvisioningState","properties","provisioningState","parseRetryAfter","retryAfter","retryAfterInSeconds","parseInt","isNaN","calculatePollingIntervalFromDate","Date","retryAfterDate","timeNow","Math","floor","getTime","retryAfterTime","getStatusFromInitialResponse","response","state","helper","config","metadata","getOperationStatus","initHttpOperation","stateProxy","processResult","lro","setErrorAsResult","init","sendInitialRequest","flatResponse","getOperationLocation","getResourceLocation","pollHttpOperation","options","updateState","setDelay","inputState","getPollingInterval","poll","inputOptions","sendPollRequest"],"sourceRoot":"","sources":["../../../src/http/operation.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  HttpOperationMode,\n  LongRunningOperation,\n  LroResourceLocationConfig,\n  LroResponse,\n  RawResponse,\n  ResponseBody,\n} from \"./models\";\nimport {\n  OperationConfig,\n  OperationStatus,\n  RestorableOperationState,\n  StateProxy,\n} from \"../poller/models\";\nimport { initOperation, pollOperation } from \"../poller/operation\";\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport { logger } from \"../logger\";\n\nfunction getOperationLocationPollingUrl(inputs: {\n  operationLocation?: string;\n  azureAsyncOperation?: string;\n}): string | undefined {\n  const { azureAsyncOperation, operationLocation } = inputs;\n  return operationLocation ?? azureAsyncOperation;\n}\n\nfunction getLocationHeader(rawResponse: RawResponse): string | undefined {\n  return rawResponse.headers[\"location\"];\n}\n\nfunction getOperationLocationHeader(rawResponse: RawResponse): string | undefined {\n  return rawResponse.headers[\"operation-location\"];\n}\n\nfunction getAzureAsyncOperationHeader(rawResponse: RawResponse): string | undefined {\n  return rawResponse.headers[\"azure-asyncoperation\"];\n}\n\nfunction findResourceLocation(inputs: {\n  requestMethod?: string;\n  location?: string;\n  requestPath?: string;\n  resourceLocationConfig?: LroResourceLocationConfig;\n}): string | undefined {\n  const { location, requestMethod, requestPath, resourceLocationConfig } = inputs;\n  switch (requestMethod) {\n    case \"PUT\": {\n      return requestPath;\n    }\n    case \"DELETE\": {\n      return undefined;\n    }\n    default: {\n      switch (resourceLocationConfig) {\n        case \"azure-async-operation\": {\n          return undefined;\n        }\n        case \"original-uri\": {\n          return requestPath;\n        }\n        case \"location\":\n        default: {\n          return location;\n        }\n      }\n    }\n  }\n}\n\nexport function inferLroMode(inputs: {\n  rawResponse: RawResponse;\n  requestPath?: string;\n  requestMethod?: string;\n  resourceLocationConfig?: LroResourceLocationConfig;\n}): (OperationConfig & { mode: HttpOperationMode }) | undefined {\n  const { rawResponse, requestMethod, requestPath, resourceLocationConfig } = inputs;\n  const operationLocation = getOperationLocationHeader(rawResponse);\n  const azureAsyncOperation = getAzureAsyncOperationHeader(rawResponse);\n  const pollingUrl = getOperationLocationPollingUrl({ operationLocation, azureAsyncOperation });\n  const location = getLocationHeader(rawResponse);\n  const normalizedRequestMethod = requestMethod?.toLocaleUpperCase();\n  if (pollingUrl !== undefined) {\n    return {\n      mode: \"OperationLocation\",\n      operationLocation: pollingUrl,\n      resourceLocation: findResourceLocation({\n        requestMethod: normalizedRequestMethod,\n        location,\n        requestPath,\n        resourceLocationConfig,\n      }),\n    };\n  } else if (location !== undefined) {\n    return {\n      mode: \"ResourceLocation\",\n      operationLocation: location,\n    };\n  } else if (normalizedRequestMethod === \"PUT\" && requestPath) {\n    return {\n      mode: \"Body\",\n      operationLocation: requestPath,\n    };\n  } else {\n    return undefined;\n  }\n}\n\nfunction transformStatus(inputs: { status: unknown; statusCode: number }): OperationStatus {\n  const { status, statusCode } = inputs;\n  if (typeof status !== \"string\" && status !== undefined) {\n    throw new Error(\n      `Polling was unsuccessful. Expected status to have a string value or no value but it has instead: ${status}. This doesn't necessarily indicate the operation has failed. Check your Azure subscription or resource status for more information.`\n    );\n  }\n  switch (status?.toLocaleLowerCase()) {\n    case undefined:\n      return toOperationStatus(statusCode);\n    case \"succeeded\":\n      return \"succeeded\";\n    case \"failed\":\n      return \"failed\";\n    case \"running\":\n    case \"accepted\":\n    case \"started\":\n    case \"canceling\":\n    case \"cancelling\":\n      return \"running\";\n    case \"canceled\":\n    case \"cancelled\":\n      return \"canceled\";\n    default: {\n      logger.warning(`LRO: unrecognized operation status: ${status}`);\n      return status as OperationStatus;\n    }\n  }\n}\n\nfunction getStatus(rawResponse: RawResponse): OperationStatus {\n  const { status } = (rawResponse.body as ResponseBody) ?? {};\n  return transformStatus({ status, statusCode: rawResponse.statusCode });\n}\n\nfunction getProvisioningState(rawResponse: RawResponse): OperationStatus {\n  const { properties, provisioningState } = (rawResponse.body as ResponseBody) ?? {};\n  const status = properties?.provisioningState ?? provisioningState;\n  return transformStatus({ status, statusCode: rawResponse.statusCode });\n}\n\nfunction toOperationStatus(statusCode: number): OperationStatus {\n  if (statusCode === 202) {\n    return \"running\";\n  } else if (statusCode < 300) {\n    return \"succeeded\";\n  } else {\n    return \"failed\";\n  }\n}\n\nexport function parseRetryAfter<T>({ rawResponse }: LroResponse<T>): number | undefined {\n  const retryAfter: string | undefined = rawResponse.headers[\"retry-after\"];\n  if (retryAfter !== undefined) {\n    // Retry-After header value is either in HTTP date format, or in seconds\n    const retryAfterInSeconds = parseInt(retryAfter);\n    return isNaN(retryAfterInSeconds)\n      ? calculatePollingIntervalFromDate(new Date(retryAfter))\n      : retryAfterInSeconds * 1000;\n  }\n  return undefined;\n}\n\nfunction calculatePollingIntervalFromDate(retryAfterDate: Date): number | undefined {\n  const timeNow = Math.floor(new Date().getTime());\n  const retryAfterTime = retryAfterDate.getTime();\n  if (timeNow < retryAfterTime) {\n    return retryAfterTime - timeNow;\n  }\n  return undefined;\n}\n\nexport function getStatusFromInitialResponse<TState>(inputs: {\n  response: LroResponse<unknown>;\n  state: RestorableOperationState<TState>;\n  operationLocation?: string;\n}): OperationStatus {\n  const { response, state, operationLocation } = inputs;\n  function helper(): OperationStatus {\n    const mode = state.config.metadata?.[\"mode\"];\n    switch (mode) {\n      case undefined:\n        return toOperationStatus(response.rawResponse.statusCode);\n      case \"Body\":\n        return getOperationStatus(response, state);\n      default:\n        return \"running\";\n    }\n  }\n  const status = helper();\n  return status === \"running\" && operationLocation === undefined ? \"succeeded\" : status;\n}\n\n/**\n * Initiates the long-running operation.\n */\nexport async function initHttpOperation<TResult, TState>(inputs: {\n  stateProxy: StateProxy<TState, TResult>;\n  resourceLocationConfig?: LroResourceLocationConfig;\n  processResult?: (result: unknown, state: TState) => TResult;\n  setErrorAsResult: boolean;\n  lro: LongRunningOperation;\n}): Promise<RestorableOperationState<TState>> {\n  const { stateProxy, resourceLocationConfig, processResult, lro, setErrorAsResult } = inputs;\n  return initOperation({\n    init: async () => {\n      const response = await lro.sendInitialRequest();\n      const config = inferLroMode({\n        rawResponse: response.rawResponse,\n        requestPath: lro.requestPath,\n        requestMethod: lro.requestMethod,\n        resourceLocationConfig,\n      });\n      return {\n        response,\n        operationLocation: config?.operationLocation,\n        resourceLocation: config?.resourceLocation,\n        ...(config?.mode ? { metadata: { mode: config.mode } } : {}),\n      };\n    },\n    stateProxy,\n    processResult: processResult\n      ? ({ flatResponse }, state) => processResult(flatResponse, state)\n      : ({ flatResponse }) => flatResponse as TResult,\n    getOperationStatus: getStatusFromInitialResponse,\n    setErrorAsResult,\n  });\n}\n\nexport function getOperationLocation<TState>(\n  { rawResponse }: LroResponse,\n  state: RestorableOperationState<TState>\n): string | undefined {\n  const mode = state.config.metadata?.[\"mode\"];\n  switch (mode) {\n    case \"OperationLocation\": {\n      return getOperationLocationPollingUrl({\n        operationLocation: getOperationLocationHeader(rawResponse),\n        azureAsyncOperation: getAzureAsyncOperationHeader(rawResponse),\n      });\n    }\n    case \"ResourceLocation\": {\n      return getLocationHeader(rawResponse);\n    }\n    case \"Body\":\n    default: {\n      return undefined;\n    }\n  }\n}\n\nexport function getOperationStatus<TState>(\n  { rawResponse }: LroResponse,\n  state: RestorableOperationState<TState>\n): OperationStatus {\n  const mode = state.config.metadata?.[\"mode\"];\n  switch (mode) {\n    case \"OperationLocation\": {\n      return getStatus(rawResponse);\n    }\n    case \"ResourceLocation\": {\n      return toOperationStatus(rawResponse.statusCode);\n    }\n    case \"Body\": {\n      return getProvisioningState(rawResponse);\n    }\n    default:\n      throw new Error(`Internal error: Unexpected operation mode: ${mode}`);\n  }\n}\n\nexport function getResourceLocation<TState>(\n  { flatResponse }: LroResponse,\n  state: RestorableOperationState<TState>\n): string | undefined {\n  if (typeof flatResponse === \"object\") {\n    const resourceLocation = (flatResponse as { resourceLocation?: string }).resourceLocation;\n    if (resourceLocation !== undefined) {\n      state.config.resourceLocation = resourceLocation;\n    }\n  }\n  return state.config.resourceLocation;\n}\n\n/** Polls the long-running operation. */\nexport async function pollHttpOperation<TState, TResult>(inputs: {\n  lro: LongRunningOperation;\n  stateProxy: StateProxy<TState, TResult>;\n  processResult?: (result: unknown, state: TState) => TResult;\n  updateState?: (state: TState, lastResponse: LroResponse) => void;\n  isDone?: (lastResponse: LroResponse, state: TState) => boolean;\n  setDelay: (intervalInMs: number) => void;\n  options?: { abortSignal?: AbortSignalLike };\n  state: RestorableOperationState<TState>;\n  setErrorAsResult: boolean;\n}): Promise<void> {\n  const {\n    lro,\n    stateProxy,\n    options,\n    processResult,\n    updateState,\n    setDelay,\n    state,\n    setErrorAsResult,\n  } = inputs;\n  return pollOperation({\n    state,\n    stateProxy,\n    setDelay,\n    processResult: processResult\n      ? ({ flatResponse }, inputState) => processResult(flatResponse, inputState)\n      : ({ flatResponse }) => flatResponse as TResult,\n    updateState,\n    getPollingInterval: parseRetryAfter,\n    getOperationLocation,\n    getOperationStatus,\n    getResourceLocation,\n    options,\n    /**\n     * The expansion here is intentional because `lro` could be an object that\n     * references an inner this, so we need to preserve a reference to it.\n     */\n    poll: async (location, inputOptions) => lro.sendPollRequest(location, inputOptions),\n    setErrorAsResult,\n  });\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { TENANT_PLACEHOLDER, EVENT_NAME_PREFIX } from \"./TelemetryConstants\";\nimport { CryptoUtils } from \"../utils/CryptoUtils\";\nimport { UrlUtils } from \"../utils/UrlUtils\";\nimport { Authority } from \"../authority/Authority\";\nexport var scrubTenantFromUri = function (uri) {\n  var url = UrlUtils.GetUrlComponents(uri);\n  // validate trusted host\n  if (Authority.isAdfs(uri)) {\n    /**\n     * returning what was passed because the library needs to work with uris that are non\n     * AAD trusted but passed by users such as B2C or others.\n     * HTTP Events for instance can take a url to the open id config endpoint\n     */\n    return uri;\n  }\n  var pathParams = url.PathSegments;\n  if (pathParams && pathParams.length >= 2) {\n    var tenantPosition = pathParams[1] === \"tfp\" ? 2 : 1;\n    if (tenantPosition < pathParams.length) {\n      pathParams[tenantPosition] = TENANT_PLACEHOLDER;\n    }\n  }\n  return url.Protocol + \"//\" + url.HostNameAndPort + \"/\" + pathParams.join(\"/\");\n};\nexport var hashPersonalIdentifier = function (valueToHash) {\n  /*\n   * TODO sha256 this\n   * Current test runner is being funny with node libs that are webpacked anyway\n   * need a different solution\n   */\n  return CryptoUtils.base64Encode(valueToHash);\n};\nexport var prependEventNamePrefix = function (suffix) {\n  return \"\" + EVENT_NAME_PREFIX + (suffix || \"\");\n};\nexport var supportsBrowserPerformance = function () {\n  return !!(typeof window !== \"undefined\" && \"performance\" in window && window.performance.mark && window.performance.measure);\n};\nexport var endBrowserPerformanceMeasurement = function (measureName, startMark, endMark) {\n  if (supportsBrowserPerformance()) {\n    window.performance.mark(endMark);\n    window.performance.measure(measureName, startMark, endMark);\n    window.performance.clearMeasures(measureName);\n    window.performance.clearMarks(startMark);\n    window.performance.clearMarks(endMark);\n  }\n};\nexport var startBrowserPerformanceMeasurement = function (startMark) {\n  if (supportsBrowserPerformance()) {\n    window.performance.mark(startMark);\n  }\n};","map":{"version":3,"mappings":"AAAA;;;;AAKA,SAASA,kBAAkB,EAAEC,iBAAiB,QAAQ,sBAAsB;AAC5E,SAASC,WAAW,QAAQ,sBAAsB;AAClD,SAASC,QAAQ,QAAQ,mBAAmB;AAC5C,SAASC,SAAS,QAAQ,wBAAwB;AAElD,OAAO,IAAMC,kBAAkB,GAAG,UAACC,GAAW;EAE1C,IAAMC,GAAG,GAAGJ,QAAQ,CAACK,gBAAgB,CAACF,GAAG,CAAC;EAE1C;EACA,IAAIF,SAAS,CAACK,MAAM,CAACH,GAAG,CAAC,EAAE;IACvB;;;;;IAKA,OAAOA,GAAG;;EAGd,IAAMI,UAAU,GAAGH,GAAG,CAACI,YAAY;EAEnC,IAAID,UAAU,IAAIA,UAAU,CAACE,MAAM,IAAI,CAAC,EAAE;IACtC,IAAMC,cAAc,GAAGH,UAAU,CAAC,CAAC,CAAC,KAAM,KAAK,GAAG,CAAC,GAAG,CAAC;IACvD,IAAIG,cAAc,GAAGH,UAAU,CAACE,MAAM,EAAE;MACpCF,UAAU,CAACG,cAAc,CAAC,GAAGb,kBAAkB;;;EAIvD,OAAWO,GAAG,CAACO,QAAQ,UAAKP,GAAG,CAACQ,eAAe,SAAIL,UAAU,CAACM,IAAI,CAAC,GAAG,CAAG;AAC7E,CAAC;AAED,OAAO,IAAMC,sBAAsB,GAAG,UAACC,WAAmB;EACtD;;;;;EAKA,OAAOhB,WAAW,CAACiB,YAAY,CAACD,WAAW,CAAC;AAChD,CAAC;AAED,OAAO,IAAME,sBAAsB,GAAG,UAACC,MAAc;EAAa,YAAGpB,iBAAiB,IAAGoB,MAAM,IAAI,EAAE,CAAE;AAArC,CAAqC;AAEvG,OAAO,IAAMC,0BAA0B,GAAG;EAAe,QAAC,EACtD,OAAOC,MAAM,KAAK,WAAW,IACzB,aAAa,IAAIA,MAAM,IACvBA,MAAM,CAACC,WAAW,CAACC,IAAI,IACvBF,MAAM,CAACC,WAAW,CAACE,OAAO,CACjC;AALwD,CAKxD;AAED,OAAO,IAAMC,gCAAgC,GAAG,UAACC,WAAmB,EAAEC,SAAiB,EAAEC,OAAe;EACpG,IAAIR,0BAA0B,EAAE,EAAE;IAC9BC,MAAM,CAACC,WAAW,CAACC,IAAI,CAACK,OAAO,CAAC;IAChCP,MAAM,CAACC,WAAW,CAACE,OAAO,CAACE,WAAW,EAAEC,SAAS,EAAEC,OAAO,CAAC;IAE3DP,MAAM,CAACC,WAAW,CAACO,aAAa,CAACH,WAAW,CAAC;IAC7CL,MAAM,CAACC,WAAW,CAACQ,UAAU,CAACH,SAAS,CAAC;IACxCN,MAAM,CAACC,WAAW,CAACQ,UAAU,CAACF,OAAO,CAAC;;AAE9C,CAAC;AAED,OAAO,IAAMG,kCAAkC,GAAG,UAACJ,SAAiB;EAChE,IAAIP,0BAA0B,EAAE,EAAE;IAC9BC,MAAM,CAACC,WAAW,CAACC,IAAI,CAACI,SAAS,CAAC;;AAE1C,CAAC","names":["TENANT_PLACEHOLDER","EVENT_NAME_PREFIX","CryptoUtils","UrlUtils","Authority","scrubTenantFromUri","uri","url","GetUrlComponents","isAdfs","pathParams","PathSegments","length","tenantPosition","Protocol","HostNameAndPort","join","hashPersonalIdentifier","valueToHash","base64Encode","prependEventNamePrefix","suffix","supportsBrowserPerformance","window","performance","mark","measure","endBrowserPerformanceMeasurement","measureName","startMark","endMark","clearMeasures","clearMarks","startBrowserPerformanceMeasurement"],"sourceRoot":"","sources":["../../src/telemetry/TelemetryUtils.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { CryptoUtils } from \"./utils/CryptoUtils\";\nimport { StringUtils } from \"./utils/StringUtils\";\n/**\n * accountIdentifier       combination of idToken.uid and idToken.utid\n * homeAccountIdentifier   combination of clientInfo.uid and clientInfo.utid\n * userName                idToken.preferred_username\n * name                    idToken.name\n * idToken                 idToken\n * sid                     idToken.sid - session identifier\n * environment             idtoken.issuer (the authority that issues the token)\n */\nvar Account = /** @class */function () {\n  /**\n   * Creates an Account Object\n   * @praram accountIdentifier\n   * @param homeAccountIdentifier\n   * @param userName\n   * @param name\n   * @param idToken\n   * @param sid\n   * @param environment\n   */\n  function Account(accountIdentifier, homeAccountIdentifier, userName, name, idTokenClaims, sid, environment) {\n    this.accountIdentifier = accountIdentifier;\n    this.homeAccountIdentifier = homeAccountIdentifier;\n    this.userName = userName;\n    this.name = name;\n    // will be deprecated soon\n    this.idToken = idTokenClaims;\n    this.idTokenClaims = idTokenClaims;\n    this.sid = sid;\n    this.environment = environment;\n  }\n  /**\n   * @hidden\n   * @param idToken\n   * @param clientInfo\n   */\n  Account.createAccount = function (idToken, clientInfo) {\n    // create accountIdentifier\n    var accountIdentifier = idToken.objectId || idToken.subject;\n    // create homeAccountIdentifier\n    var uid = clientInfo ? clientInfo.uid : \"\";\n    var utid = clientInfo ? clientInfo.utid : \"\";\n    var homeAccountIdentifier;\n    if (!StringUtils.isEmpty(uid)) {\n      homeAccountIdentifier = StringUtils.isEmpty(utid) ? CryptoUtils.base64Encode(uid) : CryptoUtils.base64Encode(uid) + \".\" + CryptoUtils.base64Encode(utid);\n    }\n    return new Account(accountIdentifier, homeAccountIdentifier, idToken.preferredName, idToken.name, idToken.claims, idToken.sid, idToken.issuer);\n  };\n  /**\n   * Utils function to compare two Account objects - used to check if the same user account is logged in\n   *\n   * @param a1: Account object\n   * @param a2: Account object\n   */\n  Account.compareAccounts = function (a1, a2) {\n    if (!a1 || !a2) {\n      return false;\n    }\n    if (a1.homeAccountIdentifier && a2.homeAccountIdentifier) {\n      if (a1.homeAccountIdentifier === a2.homeAccountIdentifier) {\n        return true;\n      }\n    }\n    return false;\n  };\n  return Account;\n}();\nexport { Account };","map":{"version":3,"mappings":"AAAA;;;;AAOA,SAASA,WAAW,QAAQ,qBAAqB;AACjD,SAASC,WAAW,QAAQ,qBAAqB;AAGjD;;;;;;;;;AASA;EAWI;;;;;;;;;;EAUA,iBAAYC,iBAAyB,EAAEC,qBAA6B,EAAEC,QAAgB,EAAEC,IAAY,EAAEC,aAAyB,EAAEC,GAAW,EAAGC,WAAmB;IAC9J,IAAI,CAACN,iBAAiB,GAAGA,iBAAiB;IAC1C,IAAI,CAACC,qBAAqB,GAAGA,qBAAqB;IAClD,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB;IACA,IAAI,CAACI,OAAO,GAAGH,aAAa;IAC5B,IAAI,CAACA,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACC,GAAG,GAAGA,GAAG;IACd,IAAI,CAACC,WAAW,GAAGA,WAAW;EAClC;EAEA;;;;;EAKOE,qBAAa,GAApB,UAAqBD,OAAgB,EAAEE,UAAsB;IAEzD;IACA,IAAMT,iBAAiB,GAAWO,OAAO,CAACG,QAAQ,IAAKH,OAAO,CAACI,OAAO;IAEtE;IACA,IAAMC,GAAG,GAAWH,UAAU,GAAGA,UAAU,CAACG,GAAG,GAAG,EAAE;IACpD,IAAMC,IAAI,GAAWJ,UAAU,GAAGA,UAAU,CAACI,IAAI,GAAG,EAAE;IAEtD,IAAIZ,qBAA6B;IACjC,IAAI,CAACF,WAAW,CAACe,OAAO,CAACF,GAAG,CAAC,EAAE;MAC3BX,qBAAqB,GAAGF,WAAW,CAACe,OAAO,CAACD,IAAI,CAAC,GAAEf,WAAW,CAACiB,YAAY,CAACH,GAAG,CAAC,GAAEd,WAAW,CAACiB,YAAY,CAACH,GAAG,CAAC,GAAG,GAAG,GAAGd,WAAW,CAACiB,YAAY,CAACF,IAAI,CAAC;;IAE1J,OAAO,IAAIL,OAAO,CAACR,iBAAiB,EAAEC,qBAAqB,EAAEM,OAAO,CAACS,aAAa,EAAET,OAAO,CAACJ,IAAI,EAAEI,OAAO,CAACU,MAAM,EAAEV,OAAO,CAACF,GAAG,EAAEE,OAAO,CAACW,MAAM,CAAC;EAClJ,CAAC;EAED;;;;;;EAMOV,uBAAe,GAAtB,UAAuBW,EAAW,EAAEC,EAAW;IAC3C,IAAI,CAACD,EAAE,IAAI,CAACC,EAAE,EAAE;MACZ,OAAO,KAAK;;IAEhB,IAAID,EAAE,CAAClB,qBAAqB,IAAImB,EAAE,CAACnB,qBAAqB,EAAE;MACtD,IAAIkB,EAAE,CAAClB,qBAAqB,KAAKmB,EAAE,CAACnB,qBAAqB,EAAE;QACvD,OAAO,IAAI;;;IAGnB,OAAO,KAAK;EAChB,CAAC;EACL,cAAC;AAAD,CAAC,EAvED","names":["CryptoUtils","StringUtils","accountIdentifier","homeAccountIdentifier","userName","name","idTokenClaims","sid","environment","idToken","Account","clientInfo","objectId","subject","uid","utid","isEmpty","base64Encode","preferredName","claims","issuer","a1","a2"],"sourceRoot":"","sources":["../src/Account.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}
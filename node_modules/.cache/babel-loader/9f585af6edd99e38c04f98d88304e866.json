{"ast":null,"code":"import _asyncToGenerator from \"/Users/tbeckett/Documents/geo-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/tbeckett/Documents/geo-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tbeckett/Documents/geo-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { initHttpOperation, pollHttpOperation } from \"../../http/operation\";\nimport { logger } from \"../../logger\";\nvar createStateProxy = function createStateProxy() {\n  return {\n    initState: function initState(config) {\n      return {\n        config: config,\n        isStarted: true\n      };\n    },\n    setCanceled: function setCanceled(state) {\n      return state.isCancelled = true;\n    },\n    setError: function setError(state, error) {\n      return state.error = error;\n    },\n    setResult: function setResult(state, result) {\n      return state.result = result;\n    },\n    setRunning: function setRunning(state) {\n      return state.isStarted = true;\n    },\n    setSucceeded: function setSucceeded(state) {\n      return state.isCompleted = true;\n    },\n    setFailed: function setFailed() {\n      /** empty body */\n    },\n    getError: function getError(state) {\n      return state.error;\n    },\n    getResult: function getResult(state) {\n      return state.result;\n    },\n    isCanceled: function isCanceled(state) {\n      return !!state.isCancelled;\n    },\n    isFailed: function isFailed(state) {\n      return !!state.error;\n    },\n    isRunning: function isRunning(state) {\n      return !!state.isStarted;\n    },\n    isSucceeded: function isSucceeded(state) {\n      return Boolean(state.isCompleted && !state.isCancelled && !state.error);\n    }\n  };\n};\nexport var GenericPollOperation = /*#__PURE__*/function () {\n  function GenericPollOperation(state, lro, setErrorAsResult, lroResourceLocationConfig, processResult, updateState, isDone) {\n    _classCallCheck(this, GenericPollOperation);\n    this.state = state;\n    this.lro = lro;\n    this.setErrorAsResult = setErrorAsResult;\n    this.lroResourceLocationConfig = lroResourceLocationConfig;\n    this.processResult = processResult;\n    this.updateState = updateState;\n    this.isDone = isDone;\n  }\n  _createClass(GenericPollOperation, [{\n    key: \"setPollerConfig\",\n    value: function setPollerConfig(pollerConfig) {\n      this.pollerConfig = pollerConfig;\n    }\n  }, {\n    key: \"update\",\n    value: function () {\n      var _update = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(options) {\n        var _this = this;\n        var _a, stateProxy, updateState, isDone;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                stateProxy = createStateProxy();\n                if (this.state.isStarted) {\n                  _context.next = 8;\n                  break;\n                }\n                _context.t0 = Object;\n                _context.t1 = Object.assign({}, this.state);\n                _context.next = 6;\n                return initHttpOperation({\n                  lro: this.lro,\n                  stateProxy: stateProxy,\n                  resourceLocationConfig: this.lroResourceLocationConfig,\n                  processResult: this.processResult,\n                  setErrorAsResult: this.setErrorAsResult\n                });\n              case 6:\n                _context.t2 = _context.sent;\n                this.state = _context.t0.assign.call(_context.t0, _context.t1, _context.t2);\n              case 8:\n                updateState = this.updateState;\n                isDone = this.isDone;\n                if (!(!this.state.isCompleted && this.state.error === undefined)) {\n                  _context.next = 13;\n                  break;\n                }\n                _context.next = 13;\n                return pollHttpOperation({\n                  lro: this.lro,\n                  state: this.state,\n                  stateProxy: stateProxy,\n                  processResult: this.processResult,\n                  updateState: updateState ? function (state, _ref) {\n                    var rawResponse = _ref.rawResponse;\n                    return updateState(state, rawResponse);\n                  } : undefined,\n                  isDone: isDone ? function (_ref2, state) {\n                    var flatResponse = _ref2.flatResponse;\n                    return isDone(flatResponse, state);\n                  } : undefined,\n                  options: options,\n                  setDelay: function setDelay(intervalInMs) {\n                    _this.pollerConfig.intervalInMs = intervalInMs;\n                  },\n                  setErrorAsResult: this.setErrorAsResult\n                });\n              case 13:\n                (_a = options === null || options === void 0 ? void 0 : options.fireProgress) === null || _a === void 0 ? void 0 : _a.call(options, this.state);\n                return _context.abrupt(\"return\", this);\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function update(_x) {\n        return _update.apply(this, arguments);\n      }\n      return update;\n    }()\n  }, {\n    key: \"cancel\",\n    value: function () {\n      var _cancel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                logger.error(\"`cancelOperation` is deprecated because it wasn't implemented\");\n                return _context2.abrupt(\"return\", this);\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function cancel() {\n        return _cancel.apply(this, arguments);\n      }\n      return cancel;\n    }()\n    /**\n     * Serializes the Poller operation.\n     */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return JSON.stringify({\n        state: this.state\n      });\n    }\n  }]);\n  return GenericPollOperation;\n}();","map":{"version":3,"mappings":"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","names":["initHttpOperation","pollHttpOperation","logger","createStateProxy","initState","config","isStarted","setCanceled","state","isCancelled","setError","error","setResult","result","setRunning","setSucceeded","isCompleted","setFailed","getError","getResult","isCanceled","isFailed","isRunning","isSucceeded","Boolean","GenericPollOperation","lro","setErrorAsResult","lroResourceLocationConfig","processResult","updateState","isDone","pollerConfig","options","stateProxy","Object","resourceLocationConfig","undefined","rawResponse","flatResponse","setDelay","intervalInMs","fireProgress","JSON","stringify"],"sourceRoot":"","sources":["../../../../src/legacy/lroEngine/operation.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { LongRunningOperation, LroResourceLocationConfig, RawResponse } from \"../../http/models\";\nimport { PollOperation, PollOperationState } from \"../pollOperation\";\nimport { RestorableOperationState, StateProxy } from \"../../poller/models\";\nimport { initHttpOperation, pollHttpOperation } from \"../../http/operation\";\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport { PollerConfig } from \"./models\";\nimport { logger } from \"../../logger\";\n\nconst createStateProxy: <TResult, TState extends PollOperationState<TResult>>() => StateProxy<\n  TState,\n  TResult\n> = () => ({\n  initState: (config) => ({ config, isStarted: true } as any),\n  setCanceled: (state) => (state.isCancelled = true),\n  setError: (state, error) => (state.error = error),\n  setResult: (state, result) => (state.result = result),\n  setRunning: (state) => (state.isStarted = true),\n  setSucceeded: (state) => (state.isCompleted = true),\n  setFailed: () => {\n    /** empty body */\n  },\n\n  getError: (state) => state.error,\n  getResult: (state) => state.result,\n  isCanceled: (state) => !!state.isCancelled,\n  isFailed: (state) => !!state.error,\n  isRunning: (state) => !!state.isStarted,\n  isSucceeded: (state) => Boolean(state.isCompleted && !state.isCancelled && !state.error),\n});\n\nexport class GenericPollOperation<TResult, TState extends PollOperationState<TResult>>\n  implements PollOperation<TState, TResult>\n{\n  private pollerConfig?: PollerConfig;\n\n  constructor(\n    public state: RestorableOperationState<TState>,\n    private lro: LongRunningOperation,\n    private setErrorAsResult: boolean,\n    private lroResourceLocationConfig?: LroResourceLocationConfig,\n    private processResult?: (result: unknown, state: TState) => TResult,\n    private updateState?: (state: TState, lastResponse: RawResponse) => void,\n    private isDone?: (lastResponse: TResult, state: TState) => boolean\n  ) {}\n\n  public setPollerConfig(pollerConfig: PollerConfig): void {\n    this.pollerConfig = pollerConfig;\n  }\n\n  async update(options?: {\n    abortSignal?: AbortSignalLike;\n    fireProgress?: (state: TState) => void;\n  }): Promise<PollOperation<TState, TResult>> {\n    const stateProxy = createStateProxy<TResult, TState>();\n    if (!this.state.isStarted) {\n      this.state = {\n        ...this.state,\n        ...(await initHttpOperation({\n          lro: this.lro,\n          stateProxy,\n          resourceLocationConfig: this.lroResourceLocationConfig,\n          processResult: this.processResult,\n          setErrorAsResult: this.setErrorAsResult,\n        })),\n      };\n    }\n    const updateState = this.updateState;\n    const isDone = this.isDone;\n\n    if (!this.state.isCompleted && this.state.error === undefined) {\n      await pollHttpOperation({\n        lro: this.lro,\n        state: this.state,\n        stateProxy,\n        processResult: this.processResult,\n        updateState: updateState\n          ? (state, { rawResponse }) => updateState(state, rawResponse)\n          : undefined,\n        isDone: isDone\n          ? ({ flatResponse }, state) => isDone(flatResponse as TResult, state)\n          : undefined,\n        options,\n        setDelay: (intervalInMs) => {\n          this.pollerConfig!.intervalInMs = intervalInMs;\n        },\n        setErrorAsResult: this.setErrorAsResult,\n      });\n    }\n    options?.fireProgress?.(this.state);\n    return this;\n  }\n\n  async cancel(): Promise<PollOperation<TState, TResult>> {\n    logger.error(\"`cancelOperation` is deprecated because it wasn't implemented\");\n    return this;\n  }\n\n  /**\n   * Serializes the Poller operation.\n   */\n  public toString(): string {\n    return JSON.stringify({\n      state: this.state,\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
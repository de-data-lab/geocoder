{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { AbortError } from \"@azure/abort-controller\";\nimport { isDefined } from \"./typeGuards\";\nconst StandardAbortMessage = \"The operation was aborted.\";\n/**\n * A wrapper for setTimeout that resolves a promise after timeInMs milliseconds.\n * @param timeInMs - The number of milliseconds to be delayed.\n * @param options - The options for delay - currently abort options\n * @returns Promise that is resolved after timeInMs\n */\nexport function delay(timeInMs, options) {\n  return new Promise((resolve, reject) => {\n    let timer = undefined;\n    let onAborted = undefined;\n    const rejectOnAbort = () => {\n      var _a;\n      return reject(new AbortError((_a = options === null || options === void 0 ? void 0 : options.abortErrorMsg) !== null && _a !== void 0 ? _a : StandardAbortMessage));\n    };\n    const removeListeners = () => {\n      if ((options === null || options === void 0 ? void 0 : options.abortSignal) && onAborted) {\n        options.abortSignal.removeEventListener(\"abort\", onAborted);\n      }\n    };\n    onAborted = () => {\n      if (isDefined(timer)) {\n        clearTimeout(timer);\n      }\n      removeListeners();\n      return rejectOnAbort();\n    };\n    if ((options === null || options === void 0 ? void 0 : options.abortSignal) && options.abortSignal.aborted) {\n      return rejectOnAbort();\n    }\n    timer = setTimeout(() => {\n      removeListeners();\n      resolve();\n    }, timeInMs);\n    if (options === null || options === void 0 ? void 0 : options.abortSignal) {\n      options.abortSignal.addEventListener(\"abort\", onAborted);\n    }\n  });\n}","map":{"version":3,"mappings":"AAAA;AACA;AAEA,SAASA,UAAU,QAAyB,yBAAyB;AACrE,SAASC,SAAS,QAAQ,cAAc;AAExC,MAAMC,oBAAoB,GAAG,4BAA4B;AAgBzD;;;;;;AAMA,OAAM,SAAUC,KAAK,CAACC,QAAgB,EAAEC,OAAsB;EAC5D,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;IACrC,IAAIC,KAAK,GAA8CC,SAAS;IAChE,IAAIC,SAAS,GAA6BD,SAAS;IAEnD,MAAME,aAAa,GAAG,MAAW;;MAC/B,OAAOJ,MAAM,CAAC,IAAIR,UAAU,CAAC,aAAO,aAAPK,OAAO,uBAAPA,OAAO,CAAEQ,aAAa,mCAAIX,oBAAoB,CAAC,CAAC;IAC/E,CAAC;IAED,MAAMY,eAAe,GAAG,MAAW;MACjC,IAAI,QAAO,aAAPT,OAAO,uBAAPA,OAAO,CAAEU,WAAW,KAAIJ,SAAS,EAAE;QACrCN,OAAO,CAACU,WAAW,CAACC,mBAAmB,CAAC,OAAO,EAAEL,SAAS,CAAC;;IAE/D,CAAC;IAEDA,SAAS,GAAG,MAAW;MACrB,IAAIV,SAAS,CAACQ,KAAK,CAAC,EAAE;QACpBQ,YAAY,CAACR,KAAK,CAAC;;MAErBK,eAAe,EAAE;MACjB,OAAOF,aAAa,EAAE;IACxB,CAAC;IAED,IAAI,QAAO,aAAPP,OAAO,uBAAPA,OAAO,CAAEU,WAAW,KAAIV,OAAO,CAACU,WAAW,CAACG,OAAO,EAAE;MACvD,OAAON,aAAa,EAAE;;IAGxBH,KAAK,GAAGU,UAAU,CAAC,MAAK;MACtBL,eAAe,EAAE;MACjBP,OAAO,EAAE;IACX,CAAC,EAAEH,QAAQ,CAAC;IAEZ,IAAIC,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEU,WAAW,EAAE;MACxBV,OAAO,CAACU,WAAW,CAACK,gBAAgB,CAAC,OAAO,EAAET,SAAS,CAAC;;EAE5D,CAAC,CAAC;AACJ","names":["AbortError","isDefined","StandardAbortMessage","delay","timeInMs","options","Promise","resolve","reject","timer","undefined","onAborted","rejectOnAbort","abortErrorMsg","removeListeners","abortSignal","removeEventListener","clearTimeout","aborted","setTimeout","addEventListener"],"sources":["/Users/yupenglei/Documents/geo-react/node_modules/@azure/core-util/src/delay.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AbortError, AbortSignalLike } from \"@azure/abort-controller\";\nimport { isDefined } from \"./typeGuards\";\n\nconst StandardAbortMessage = \"The operation was aborted.\";\n\n/**\n * Options for support abort functionality for the delay method\n */\nexport interface DelayOptions {\n  /**\n   * The abortSignal associated with containing operation.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * The abort error message associated with containing operation.\n   */\n  abortErrorMsg?: string;\n}\n\n/**\n * A wrapper for setTimeout that resolves a promise after timeInMs milliseconds.\n * @param timeInMs - The number of milliseconds to be delayed.\n * @param options - The options for delay - currently abort options\n * @returns Promise that is resolved after timeInMs\n */\nexport function delay(timeInMs: number, options?: DelayOptions): Promise<void> {\n  return new Promise((resolve, reject) => {\n    let timer: ReturnType<typeof setTimeout> | undefined = undefined;\n    let onAborted: (() => void) | undefined = undefined;\n\n    const rejectOnAbort = (): void => {\n      return reject(new AbortError(options?.abortErrorMsg ?? StandardAbortMessage));\n    };\n\n    const removeListeners = (): void => {\n      if (options?.abortSignal && onAborted) {\n        options.abortSignal.removeEventListener(\"abort\", onAborted);\n      }\n    };\n\n    onAborted = (): void => {\n      if (isDefined(timer)) {\n        clearTimeout(timer);\n      }\n      removeListeners();\n      return rejectOnAbort();\n    };\n\n    if (options?.abortSignal && options.abortSignal.aborted) {\n      return rejectOnAbort();\n    }\n\n    timer = setTimeout(() => {\n      removeListeners();\n      resolve();\n    }, timeInMs);\n\n    if (options?.abortSignal) {\n      options.abortSignal.addEventListener(\"abort\", onAborted);\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
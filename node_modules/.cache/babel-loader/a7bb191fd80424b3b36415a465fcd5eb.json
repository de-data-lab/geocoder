{"ast":null,"code":"import _asyncToGenerator from \"/Users/tbeckett/Documents/Azure dev/Azure Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/tbeckett/Documents/Azure dev/Azure Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tbeckett/Documents/Azure dev/Azure Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { generateUuid } from \"@azure/core-http\";\nimport { StorageClientContext } from \"./generated/src/index\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport { Blob as StorageBlob, Container } from \"./generated/src/operations\";\nimport { ETagNone } from \"./utils/constants\";\nimport { convertTracingToRequestOptionsBase, createSpan } from \"./utils/tracing\";\n/**\n * A client that manages leases for a {@link ContainerClient} or a {@link BlobClient}.\n */\nexport var BlobLeaseClient = /*#__PURE__*/function () {\n  /**\n   * Creates an instance of BlobLeaseClient.\n   * @param client - The client to make the lease operation requests.\n   * @param leaseId - Initial proposed lease id.\n   */\n  function BlobLeaseClient(client, leaseId) {\n    _classCallCheck(this, BlobLeaseClient);\n    var clientContext = new StorageClientContext(client.url, client.pipeline.toServiceClientOptions());\n    this._url = client.url;\n    if (client.name === undefined) {\n      this._isContainer = true;\n      this._containerOrBlobOperation = new Container(clientContext);\n    } else {\n      this._isContainer = false;\n      this._containerOrBlobOperation = new StorageBlob(clientContext);\n    }\n    if (!leaseId) {\n      leaseId = generateUuid();\n    }\n    this._leaseId = leaseId;\n  }\n  /**\n   * Gets the lease Id.\n   *\n   * @readonly\n   */\n  _createClass(BlobLeaseClient, [{\n    key: \"leaseId\",\n    get: function get() {\n      return this._leaseId;\n    }\n    /**\n     * Gets the url.\n     *\n     * @readonly\n     */\n  }, {\n    key: \"url\",\n    get: function get() {\n      return this._url;\n    }\n    /**\n     * Establishes and manages a lock on a container for delete operations, or on a blob\n     * for write and delete operations.\n     * The lock duration can be 15 to 60 seconds, or can be infinite.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n     * and\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n     *\n     * @param duration - Must be between 15 to 60 seconds, or infinite (-1)\n     * @param options - option to configure lease management operations.\n     * @returns Response data for acquire lease operation.\n     */\n  }, {\n    key: \"acquireLease\",\n    value: function () {\n      var _acquireLease = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(duration) {\n        var options,\n          _a,\n          _b,\n          _c,\n          _d,\n          _e,\n          _f,\n          _createSpan,\n          span,\n          updatedOptions,\n          _args = arguments;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n                _createSpan = createSpan(\"BlobLeaseClient-acquireLease\", options), span = _createSpan.span, updatedOptions = _createSpan.updatedOptions;\n                if (!(this._isContainer && (((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== ETagNone || ((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== ETagNone || ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions)))) {\n                  _context.next = 4;\n                  break;\n                }\n                throw new RangeError(\"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\");\n              case 4:\n                _context.prev = 4;\n                _context.next = 7;\n                return this._containerOrBlobOperation.acquireLease(Object.assign({\n                  abortSignal: options.abortSignal,\n                  duration: duration,\n                  modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {\n                    ifTags: (_f = options.conditions) === null || _f === void 0 ? void 0 : _f.tagConditions\n                  }),\n                  proposedLeaseId: this._leaseId\n                }, convertTracingToRequestOptionsBase(updatedOptions)));\n              case 7:\n                return _context.abrupt(\"return\", _context.sent);\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](4);\n                span.setStatus({\n                  code: SpanStatusCode.ERROR,\n                  message: _context.t0.message\n                });\n                throw _context.t0;\n              case 14:\n                _context.prev = 14;\n                span.end();\n                return _context.finish(14);\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[4, 10, 14, 17]]);\n      }));\n      function acquireLease(_x) {\n        return _acquireLease.apply(this, arguments);\n      }\n      return acquireLease;\n    }()\n    /**\n     * To change the ID of the lease.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n     * and\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n     *\n     * @param proposedLeaseId - the proposed new lease Id.\n     * @param options - option to configure lease management operations.\n     * @returns Response data for change lease operation.\n     */\n  }, {\n    key: \"changeLease\",\n    value: function () {\n      var _changeLease = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(proposedLeaseId) {\n        var options,\n          _a,\n          _b,\n          _c,\n          _d,\n          _e,\n          _f,\n          _createSpan2,\n          span,\n          updatedOptions,\n          response,\n          _args2 = arguments;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                options = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};\n                _createSpan2 = createSpan(\"BlobLeaseClient-changeLease\", options), span = _createSpan2.span, updatedOptions = _createSpan2.updatedOptions;\n                if (!(this._isContainer && (((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== ETagNone || ((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== ETagNone || ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions)))) {\n                  _context2.next = 4;\n                  break;\n                }\n                throw new RangeError(\"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\");\n              case 4:\n                _context2.prev = 4;\n                _context2.next = 7;\n                return this._containerOrBlobOperation.changeLease(this._leaseId, proposedLeaseId, Object.assign({\n                  abortSignal: options.abortSignal,\n                  modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {\n                    ifTags: (_f = options.conditions) === null || _f === void 0 ? void 0 : _f.tagConditions\n                  })\n                }, convertTracingToRequestOptionsBase(updatedOptions)));\n              case 7:\n                response = _context2.sent;\n                this._leaseId = proposedLeaseId;\n                return _context2.abrupt(\"return\", response);\n              case 12:\n                _context2.prev = 12;\n                _context2.t0 = _context2[\"catch\"](4);\n                span.setStatus({\n                  code: SpanStatusCode.ERROR,\n                  message: _context2.t0.message\n                });\n                throw _context2.t0;\n              case 16:\n                _context2.prev = 16;\n                span.end();\n                return _context2.finish(16);\n              case 19:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[4, 12, 16, 19]]);\n      }));\n      function changeLease(_x2) {\n        return _changeLease.apply(this, arguments);\n      }\n      return changeLease;\n    }()\n    /**\n     * To free the lease if it is no longer needed so that another client may\n     * immediately acquire a lease against the container or the blob.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n     * and\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n     *\n     * @param options - option to configure lease management operations.\n     * @returns Response data for release lease operation.\n     */\n  }, {\n    key: \"releaseLease\",\n    value: function () {\n      var _releaseLease = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var options,\n          _a,\n          _b,\n          _c,\n          _d,\n          _e,\n          _f,\n          _createSpan3,\n          span,\n          updatedOptions,\n          _args3 = arguments;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                options = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : {};\n                _createSpan3 = createSpan(\"BlobLeaseClient-releaseLease\", options), span = _createSpan3.span, updatedOptions = _createSpan3.updatedOptions;\n                if (!(this._isContainer && (((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== ETagNone || ((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== ETagNone || ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions)))) {\n                  _context3.next = 4;\n                  break;\n                }\n                throw new RangeError(\"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\");\n              case 4:\n                _context3.prev = 4;\n                _context3.next = 7;\n                return this._containerOrBlobOperation.releaseLease(this._leaseId, Object.assign({\n                  abortSignal: options.abortSignal,\n                  modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {\n                    ifTags: (_f = options.conditions) === null || _f === void 0 ? void 0 : _f.tagConditions\n                  })\n                }, convertTracingToRequestOptionsBase(updatedOptions)));\n              case 7:\n                return _context3.abrupt(\"return\", _context3.sent);\n              case 10:\n                _context3.prev = 10;\n                _context3.t0 = _context3[\"catch\"](4);\n                span.setStatus({\n                  code: SpanStatusCode.ERROR,\n                  message: _context3.t0.message\n                });\n                throw _context3.t0;\n              case 14:\n                _context3.prev = 14;\n                span.end();\n                return _context3.finish(14);\n              case 17:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[4, 10, 14, 17]]);\n      }));\n      function releaseLease() {\n        return _releaseLease.apply(this, arguments);\n      }\n      return releaseLease;\n    }()\n    /**\n     * To renew the lease.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n     * and\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n     *\n     * @param options - Optional option to configure lease management operations.\n     * @returns Response data for renew lease operation.\n     */\n  }, {\n    key: \"renewLease\",\n    value: function () {\n      var _renewLease = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var options,\n          _a,\n          _b,\n          _c,\n          _d,\n          _e,\n          _f,\n          _createSpan4,\n          span,\n          updatedOptions,\n          _args4 = arguments;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                options = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : {};\n                _createSpan4 = createSpan(\"BlobLeaseClient-renewLease\", options), span = _createSpan4.span, updatedOptions = _createSpan4.updatedOptions;\n                if (!(this._isContainer && (((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== ETagNone || ((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== ETagNone || ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions)))) {\n                  _context4.next = 4;\n                  break;\n                }\n                throw new RangeError(\"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\");\n              case 4:\n                _context4.prev = 4;\n                _context4.next = 7;\n                return this._containerOrBlobOperation.renewLease(this._leaseId, Object.assign({\n                  abortSignal: options.abortSignal,\n                  modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {\n                    ifTags: (_f = options.conditions) === null || _f === void 0 ? void 0 : _f.tagConditions\n                  })\n                }, convertTracingToRequestOptionsBase(updatedOptions)));\n              case 7:\n                return _context4.abrupt(\"return\", _context4.sent);\n              case 10:\n                _context4.prev = 10;\n                _context4.t0 = _context4[\"catch\"](4);\n                span.setStatus({\n                  code: SpanStatusCode.ERROR,\n                  message: _context4.t0.message\n                });\n                throw _context4.t0;\n              case 14:\n                _context4.prev = 14;\n                span.end();\n                return _context4.finish(14);\n              case 17:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[4, 10, 14, 17]]);\n      }));\n      function renewLease() {\n        return _renewLease.apply(this, arguments);\n      }\n      return renewLease;\n    }()\n    /**\n     * To end the lease but ensure that another client cannot acquire a new lease\n     * until the current lease period has expired.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n     * and\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n     *\n     * @param breakPeriod - Break period\n     * @param options - Optional options to configure lease management operations.\n     * @returns Response data for break lease operation.\n     */\n  }, {\n    key: \"breakLease\",\n    value: function () {\n      var _breakLease = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(breakPeriod) {\n        var options,\n          _a,\n          _b,\n          _c,\n          _d,\n          _e,\n          _f,\n          _createSpan5,\n          span,\n          updatedOptions,\n          operationOptions,\n          _args5 = arguments;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                options = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : {};\n                _createSpan5 = createSpan(\"BlobLeaseClient-breakLease\", options), span = _createSpan5.span, updatedOptions = _createSpan5.updatedOptions;\n                if (!(this._isContainer && (((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== ETagNone || ((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== ETagNone || ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions)))) {\n                  _context5.next = 4;\n                  break;\n                }\n                throw new RangeError(\"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\");\n              case 4:\n                _context5.prev = 4;\n                operationOptions = Object.assign({\n                  abortSignal: options.abortSignal,\n                  breakPeriod: breakPeriod,\n                  modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {\n                    ifTags: (_f = options.conditions) === null || _f === void 0 ? void 0 : _f.tagConditions\n                  })\n                }, convertTracingToRequestOptionsBase(updatedOptions));\n                _context5.next = 8;\n                return this._containerOrBlobOperation.breakLease(operationOptions);\n              case 8:\n                return _context5.abrupt(\"return\", _context5.sent);\n              case 11:\n                _context5.prev = 11;\n                _context5.t0 = _context5[\"catch\"](4);\n                span.setStatus({\n                  code: SpanStatusCode.ERROR,\n                  message: _context5.t0.message\n                });\n                throw _context5.t0;\n              case 15:\n                _context5.prev = 15;\n                span.end();\n                return _context5.finish(15);\n              case 18:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[4, 11, 15, 18]]);\n      }));\n      function breakLease(_x3) {\n        return _breakLease.apply(this, arguments);\n      }\n      return breakLease;\n    }()\n  }]);\n  return BlobLeaseClient;\n}();","map":{"version":3,"mappings":"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","names":["generateUuid","StorageClientContext","SpanStatusCode","Blob","StorageBlob","Container","ETagNone","convertTracingToRequestOptionsBase","createSpan","BlobLeaseClient","client","leaseId","clientContext","url","pipeline","toServiceClientOptions","_url","name","undefined","_isContainer","_containerOrBlobOperation","_leaseId","duration","options","span","updatedOptions","conditions","ifMatch","ifNoneMatch","tagConditions","RangeError","acquireLease","abortSignal","modifiedAccessConditions","ifTags","proposedLeaseId","setStatus","code","ERROR","message","end","changeLease","response","releaseLease","renewLease","breakPeriod","operationOptions","breakLease"],"sourceRoot":"","sources":["../../../src/BlobLeaseClient.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { generateUuid, HttpResponse } from \"@azure/core-http\";\nimport { StorageClientContext } from \"./generated/src/index\";\nimport { ContainerBreakLeaseOptionalParams } from \"./generatedModels\";\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport { Blob as StorageBlob, Container } from \"./generated/src/operations\";\nimport { ModifiedAccessConditions } from \"./models\";\nimport { CommonOptions } from \"./StorageClient\";\nimport { ETagNone } from \"./utils/constants\";\nimport { convertTracingToRequestOptionsBase, createSpan } from \"./utils/tracing\";\nimport { BlobClient } from \"./Clients\";\nimport { ContainerClient } from \"./ContainerClient\";\n\n/**\n * The details for a specific lease.\n */\nexport interface Lease {\n  /**\n   * The ETag contains a value that you can use to\n   * perform operations conditionally. If the request version is 2011-08-18 or\n   * newer, the ETag value will be in quotes.\n   */\n  etag?: string;\n  /**\n   * Returns the date and time the container was\n   * last modified. Any operation that modifies the blob, including an update\n   * of the blob's metadata or properties, changes the last-modified time of\n   * the blob.\n   */\n  lastModified?: Date;\n  /**\n   * Uniquely identifies a container's lease\n   */\n  leaseId?: string;\n  /**\n   * Approximate time remaining in the lease\n   * period, in seconds.\n   */\n  leaseTime?: number;\n  /**\n   * This header uniquely identifies the request\n   * that was made and can be used for troubleshooting the request.\n   */\n  requestId?: string;\n  /**\n   * Indicates the version of the Blob service used\n   * to execute the request. This header is returned for requests made against\n   * version 2009-09-19 and above.\n   */\n  version?: string;\n  /**\n   * UTC date/time value generated by the service that\n   * indicates the time at which the response was initiated\n   */\n  date?: Date;\n  /**\n   * Error code if any associated with the response that returned\n   * the Lease information.\n   */\n  errorCode?: string;\n}\n\n/**\n * Contains the response data for operations that create, modify, or delete a lease.\n *\n * See {@link BlobLeaseClient}.\n */\nexport type LeaseOperationResponse = Lease & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: HttpResponse & {\n    /**\n     * The parsed HTTP response headers.\n     */\n    parsedHeaders: Lease;\n  };\n};\n\n/**\n * Configures lease operations.\n */\nexport interface LeaseOperationOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Conditions to meet when changing the lease.\n   */\n  conditions?: ModifiedAccessConditions;\n}\n\n/**\n * A client that manages leases for a {@link ContainerClient} or a {@link BlobClient}.\n */\nexport class BlobLeaseClient {\n  private _leaseId: string;\n  private _url: string;\n  private _containerOrBlobOperation: Container | StorageBlob;\n  private _isContainer: boolean;\n\n  /**\n   * Gets the lease Id.\n   *\n   * @readonly\n   */\n  public get leaseId(): string {\n    return this._leaseId;\n  }\n\n  /**\n   * Gets the url.\n   *\n   * @readonly\n   */\n  public get url(): string {\n    return this._url;\n  }\n\n  /**\n   * Creates an instance of BlobLeaseClient.\n   * @param client - The client to make the lease operation requests.\n   * @param leaseId - Initial proposed lease id.\n   */\n  constructor(client: ContainerClient | BlobClient, leaseId?: string) {\n    const clientContext = new StorageClientContext(\n      client.url,\n      (client as any).pipeline.toServiceClientOptions()\n    );\n    this._url = client.url;\n\n    if ((client as BlobClient).name === undefined) {\n      this._isContainer = true;\n      this._containerOrBlobOperation = new Container(clientContext);\n    } else {\n      this._isContainer = false;\n      this._containerOrBlobOperation = new StorageBlob(clientContext);\n    }\n\n    if (!leaseId) {\n      leaseId = generateUuid();\n    }\n    this._leaseId = leaseId;\n  }\n\n  /**\n   * Establishes and manages a lock on a container for delete operations, or on a blob\n   * for write and delete operations.\n   * The lock duration can be 15 to 60 seconds, or can be infinite.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n   * and\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n   *\n   * @param duration - Must be between 15 to 60 seconds, or infinite (-1)\n   * @param options - option to configure lease management operations.\n   * @returns Response data for acquire lease operation.\n   */\n  public async acquireLease(\n    duration: number,\n    options: LeaseOperationOptions = {}\n  ): Promise<LeaseOperationResponse> {\n    const { span, updatedOptions } = createSpan(\"BlobLeaseClient-acquireLease\", options);\n\n    if (\n      this._isContainer &&\n      ((options.conditions?.ifMatch && options.conditions?.ifMatch !== ETagNone) ||\n        (options.conditions?.ifNoneMatch && options.conditions?.ifNoneMatch !== ETagNone) ||\n        options.conditions?.tagConditions)\n    ) {\n      throw new RangeError(\n        \"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\"\n      );\n    }\n\n    try {\n      return await this._containerOrBlobOperation.acquireLease({\n        abortSignal: options.abortSignal,\n        duration,\n        modifiedAccessConditions: {\n          ...options.conditions,\n          ifTags: options.conditions?.tagConditions,\n        },\n        proposedLeaseId: this._leaseId,\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n    } catch (e: any) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * To change the ID of the lease.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n   * and\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n   *\n   * @param proposedLeaseId - the proposed new lease Id.\n   * @param options - option to configure lease management operations.\n   * @returns Response data for change lease operation.\n   */\n  public async changeLease(\n    proposedLeaseId: string,\n    options: LeaseOperationOptions = {}\n  ): Promise<LeaseOperationResponse> {\n    const { span, updatedOptions } = createSpan(\"BlobLeaseClient-changeLease\", options);\n\n    if (\n      this._isContainer &&\n      ((options.conditions?.ifMatch && options.conditions?.ifMatch !== ETagNone) ||\n        (options.conditions?.ifNoneMatch && options.conditions?.ifNoneMatch !== ETagNone) ||\n        options.conditions?.tagConditions)\n    ) {\n      throw new RangeError(\n        \"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\"\n      );\n    }\n\n    try {\n      const response = await this._containerOrBlobOperation.changeLease(\n        this._leaseId,\n        proposedLeaseId,\n        {\n          abortSignal: options.abortSignal,\n          modifiedAccessConditions: {\n            ...options.conditions,\n            ifTags: options.conditions?.tagConditions,\n          },\n          ...convertTracingToRequestOptionsBase(updatedOptions),\n        }\n      );\n      this._leaseId = proposedLeaseId;\n      return response;\n    } catch (e: any) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * To free the lease if it is no longer needed so that another client may\n   * immediately acquire a lease against the container or the blob.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n   * and\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n   *\n   * @param options - option to configure lease management operations.\n   * @returns Response data for release lease operation.\n   */\n  public async releaseLease(options: LeaseOperationOptions = {}): Promise<LeaseOperationResponse> {\n    const { span, updatedOptions } = createSpan(\"BlobLeaseClient-releaseLease\", options);\n\n    if (\n      this._isContainer &&\n      ((options.conditions?.ifMatch && options.conditions?.ifMatch !== ETagNone) ||\n        (options.conditions?.ifNoneMatch && options.conditions?.ifNoneMatch !== ETagNone) ||\n        options.conditions?.tagConditions)\n    ) {\n      throw new RangeError(\n        \"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\"\n      );\n    }\n\n    try {\n      return await this._containerOrBlobOperation.releaseLease(this._leaseId, {\n        abortSignal: options.abortSignal,\n        modifiedAccessConditions: {\n          ...options.conditions,\n          ifTags: options.conditions?.tagConditions,\n        },\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n    } catch (e: any) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * To renew the lease.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n   * and\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n   *\n   * @param options - Optional option to configure lease management operations.\n   * @returns Response data for renew lease operation.\n   */\n  public async renewLease(options: LeaseOperationOptions = {}): Promise<Lease> {\n    const { span, updatedOptions } = createSpan(\"BlobLeaseClient-renewLease\", options);\n\n    if (\n      this._isContainer &&\n      ((options.conditions?.ifMatch && options.conditions?.ifMatch !== ETagNone) ||\n        (options.conditions?.ifNoneMatch && options.conditions?.ifNoneMatch !== ETagNone) ||\n        options.conditions?.tagConditions)\n    ) {\n      throw new RangeError(\n        \"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\"\n      );\n    }\n\n    try {\n      return await this._containerOrBlobOperation.renewLease(this._leaseId, {\n        abortSignal: options.abortSignal,\n        modifiedAccessConditions: {\n          ...options.conditions,\n          ifTags: options.conditions?.tagConditions,\n        },\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n    } catch (e: any) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * To end the lease but ensure that another client cannot acquire a new lease\n   * until the current lease period has expired.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n   * and\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n   *\n   * @param breakPeriod - Break period\n   * @param options - Optional options to configure lease management operations.\n   * @returns Response data for break lease operation.\n   */\n  public async breakLease(\n    breakPeriod: number,\n    options: LeaseOperationOptions = {}\n  ): Promise<LeaseOperationResponse> {\n    const { span, updatedOptions } = createSpan(\"BlobLeaseClient-breakLease\", options);\n\n    if (\n      this._isContainer &&\n      ((options.conditions?.ifMatch && options.conditions?.ifMatch !== ETagNone) ||\n        (options.conditions?.ifNoneMatch && options.conditions?.ifNoneMatch !== ETagNone) ||\n        options.conditions?.tagConditions)\n    ) {\n      throw new RangeError(\n        \"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\"\n      );\n    }\n\n    try {\n      const operationOptions: ContainerBreakLeaseOptionalParams = {\n        abortSignal: options.abortSignal,\n        breakPeriod,\n        modifiedAccessConditions: {\n          ...options.conditions,\n          ifTags: options.conditions?.tagConditions,\n        },\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      };\n      return await this._containerOrBlobOperation.breakLease(operationOptions);\n    } catch (e: any) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _classCallCheck from \"/Users/tbeckett/Documents/geo-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tbeckett/Documents/geo-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/tbeckett/Documents/geo-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/tbeckett/Documents/geo-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { BaseRequestPolicy } from \"./requestPolicy\";\n/**\n * Creates a policy that signs outgoing requests by calling to the provided `authenticationProvider`'s `signRequest` method.\n * @param authenticationProvider - The authentication provider.\n * @returns An instance of the {@link SigningPolicy}.\n */\nexport function signingPolicy(authenticationProvider) {\n  return {\n    create: function create(nextPolicy, options) {\n      return new SigningPolicy(nextPolicy, options, authenticationProvider);\n    }\n  };\n}\n/**\n * A policy that signs outgoing requests by calling to the provided `authenticationProvider`'s `signRequest` method.\n */\nexport var SigningPolicy = /*#__PURE__*/function (_BaseRequestPolicy) {\n  _inherits(SigningPolicy, _BaseRequestPolicy);\n  var _super = _createSuper(SigningPolicy);\n  function SigningPolicy(nextPolicy, options, authenticationProvider) {\n    var _this;\n    _classCallCheck(this, SigningPolicy);\n    _this = _super.call(this, nextPolicy, options);\n    _this.authenticationProvider = authenticationProvider;\n    return _this;\n  }\n  _createClass(SigningPolicy, [{\n    key: \"signRequest\",\n    value: function signRequest(request) {\n      return this.authenticationProvider.signRequest(request);\n    }\n  }, {\n    key: \"sendRequest\",\n    value: function sendRequest(request) {\n      var _this2 = this;\n      return this.signRequest(request).then(function (nextRequest) {\n        return _this2._nextPolicy.sendRequest(nextRequest);\n      });\n    }\n  }]);\n  return SigningPolicy;\n}(BaseRequestPolicy);","map":{"version":3,"mappings":";;;;AAAA;AACA;AAEA,SACEA,iBAAiB,QAIZ,iBAAiB;AAKxB;;;;;AAKA,OAAM,SAAUC,aAAa,CAC3BC,sBAAgD;EAEhD,OAAO;IACLC,MAAM,EAAE,gBAACC,UAAyB,EAAEC,OAA6B,EAAI;MACnE,OAAO,IAAIC,aAAa,CAACF,UAAU,EAAEC,OAAO,EAAEH,sBAAsB,CAAC;IACvE;GACD;AACH;AAEA;;;AAGA,WAAaI,aAAc;EAAA;EAAA;EACzB,uBACEF,UAAyB,EACzBC,OAA6B,EACtBH,sBAAgD;IAAA;IAAA;IAEvD,0BAAME,UAAU,EAAEC,OAAO;IAFlB,4BAAsB,GAAtBH,sBAAsB;IAA0B;EAGzD;EAAC;IAAA;IAAA,OAED,qBAAYK,OAAwB;MAClC,OAAO,IAAI,CAACL,sBAAsB,CAACM,WAAW,CAACD,OAAO,CAAC;IACzD;EAAC;IAAA;IAAA,OAEM,qBAAYA,OAAwB;MAAA;MACzC,OAAO,IAAI,CAACC,WAAW,CAACD,OAAO,CAAC,CAACE,IAAI,CAAC,UAACC,WAAW;QAAA,OAChD,MAAI,CAACC,WAAW,CAACC,WAAW,CAACF,WAAW,CAAC;MAAA,EAC1C;IACH;EAAC;EAAA;AAAA,EAjBgCV,iBAAiB","names":["BaseRequestPolicy","signingPolicy","authenticationProvider","create","nextPolicy","options","SigningPolicy","request","signRequest","then","nextRequest","_nextPolicy","sendRequest"],"sourceRoot":"","sources":["../../../src/policies/signingPolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n} from \"./requestPolicy\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { ServiceClientCredentials } from \"../credentials/serviceClientCredentials\";\nimport { WebResourceLike } from \"../webResource\";\n\n/**\n * Creates a policy that signs outgoing requests by calling to the provided `authenticationProvider`'s `signRequest` method.\n * @param authenticationProvider - The authentication provider.\n * @returns An instance of the {@link SigningPolicy}.\n */\nexport function signingPolicy(\n  authenticationProvider: ServiceClientCredentials\n): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new SigningPolicy(nextPolicy, options, authenticationProvider);\n    },\n  };\n}\n\n/**\n * A policy that signs outgoing requests by calling to the provided `authenticationProvider`'s `signRequest` method.\n */\nexport class SigningPolicy extends BaseRequestPolicy {\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    public authenticationProvider: ServiceClientCredentials\n  ) {\n    super(nextPolicy, options);\n  }\n\n  signRequest(request: WebResourceLike): Promise<WebResourceLike> {\n    return this.authenticationProvider.signRequest(request);\n  }\n\n  public sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    return this.signRequest(request).then((nextRequest) =>\n      this._nextPolicy.sendRequest(nextRequest)\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
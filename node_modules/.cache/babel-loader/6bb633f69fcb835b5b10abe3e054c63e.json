{"ast":null,"code":"import _asyncToGenerator from \"/Users/tbeckett/Documents/Azure dev/Azure Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/tbeckett/Documents/Azure dev/Azure Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tbeckett/Documents/Azure dev/Azure Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/tbeckett/Documents/Azure dev/Azure Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/tbeckett/Documents/Azure dev/Azure Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport * as utils from \"../util/utils\";\nimport { BaseRequestPolicy } from \"./requestPolicy\";\nimport { delay } from \"@azure/core-util\";\nexport function rpRegistrationPolicy() {\n  var retryTimeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 30;\n  return {\n    create: function create(nextPolicy, options) {\n      return new RPRegistrationPolicy(nextPolicy, options, retryTimeout);\n    }\n  };\n}\nexport var RPRegistrationPolicy = /*#__PURE__*/function (_BaseRequestPolicy) {\n  _inherits(RPRegistrationPolicy, _BaseRequestPolicy);\n  var _super = _createSuper(RPRegistrationPolicy);\n  function RPRegistrationPolicy(nextPolicy, options) {\n    var _this;\n    var _retryTimeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 30;\n    _classCallCheck(this, RPRegistrationPolicy);\n    _this = _super.call(this, nextPolicy, options);\n    _this._retryTimeout = _retryTimeout;\n    return _this;\n  }\n  _createClass(RPRegistrationPolicy, [{\n    key: \"sendRequest\",\n    value: function sendRequest(request) {\n      var _this2 = this;\n      return this._nextPolicy.sendRequest(request.clone()).then(function (response) {\n        return registerIfNeeded(_this2, request, response);\n      });\n    }\n  }]);\n  return RPRegistrationPolicy;\n}(BaseRequestPolicy);\nfunction registerIfNeeded(policy, request, response) {\n  if (response.status === 409) {\n    var rpName = checkRPNotRegisteredError(response.bodyAsText);\n    if (rpName) {\n      var urlPrefix = extractSubscriptionUrl(request.url);\n      return registerRP(policy, urlPrefix, rpName, request)\n      // Autoregistration of ${provider} failed for some reason. We will not return this error\n      // instead will return the initial response with 409 status code back to the user.\n      // do nothing here as we are returning the original response at the end of this method.\n      .catch(function () {\n        return false;\n      }).then(function (registrationStatus) {\n        if (registrationStatus) {\n          // Retry the original request. We have to change the x-ms-client-request-id\n          // otherwise Azure endpoint will return the initial 409 (cached) response.\n          request.headers.set(\"x-ms-client-request-id\", utils.generateUuid());\n          return policy._nextPolicy.sendRequest(request.clone());\n        }\n        return response;\n      });\n    }\n  }\n  return Promise.resolve(response);\n}\n/**\n * Reuses the headers of the original request and url (if specified).\n * @param originalRequest - The original request\n * @param reuseUrlToo - Should the url from the original request be reused as well. Default false.\n * @returns A new request object with desired headers.\n */\nfunction getRequestEssentials(originalRequest) {\n  var reuseUrlToo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var reqOptions = originalRequest.clone();\n  if (reuseUrlToo) {\n    reqOptions.url = originalRequest.url;\n  }\n  // We have to change the x-ms-client-request-id otherwise Azure endpoint\n  // will return the initial 409 (cached) response.\n  reqOptions.headers.set(\"x-ms-client-request-id\", utils.generateUuid());\n  // Set content-type to application/json\n  reqOptions.headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  return reqOptions;\n}\n/**\n * Validates the error code and message associated with 409 response status code. If it matches to that of\n * RP not registered then it returns the name of the RP else returns undefined.\n * @param body - The response body received after making the original request.\n * @returns The name of the RP if condition is satisfied else undefined.\n */\nfunction checkRPNotRegisteredError(body) {\n  var result, responseBody;\n  if (body) {\n    try {\n      responseBody = JSON.parse(body);\n    } catch (err) {\n      // do nothing;\n    }\n    if (responseBody && responseBody.error && responseBody.error.message && responseBody.error.code && responseBody.error.code === \"MissingSubscriptionRegistration\") {\n      var matchRes = responseBody.error.message.match(/.*'(.*)'/i);\n      if (matchRes) {\n        result = matchRes.pop();\n      }\n    }\n  }\n  return result;\n}\n/**\n * Extracts the first part of the URL, just after subscription:\n * https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/\n * @param url - The original request url\n * @returns The url prefix as explained above.\n */\nfunction extractSubscriptionUrl(url) {\n  var result;\n  var matchRes = url.match(/.*\\/subscriptions\\/[a-f0-9-]+\\//gi);\n  if (matchRes && matchRes[0]) {\n    result = matchRes[0];\n  } else {\n    throw new Error(\"Unable to extract subscriptionId from the given url - \".concat(url, \".\"));\n  }\n  return result;\n}\n/**\n * Registers the given provider.\n * @param policy - The RPRegistrationPolicy this function is being called against.\n * @param urlPrefix - https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/\n * @param provider - The provider name to be registered.\n * @param originalRequest - The original request sent by the user that returned a 409 response\n * with a message that the provider is not registered.\n */\nfunction registerRP(_x, _x2, _x3, _x4) {\n  return _registerRP.apply(this, arguments);\n}\n/**\n * Polls the registration status of the provider that was registered. Polling happens at an interval of 30 seconds.\n * Polling will happen till the registrationState property of the response body is \"Registered\".\n * @param policy - The RPRegistrationPolicy this function is being called against.\n * @param url - The request url for polling\n * @param originalRequest - The original request sent by the user that returned a 409 response\n * with a message that the provider is not registered.\n * @returns True if RP Registration is successful.\n */\nfunction _registerRP() {\n  _registerRP = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(policy, urlPrefix, provider, originalRequest) {\n    var postUrl, getUrl, reqOptions, response;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            postUrl = \"\".concat(urlPrefix, \"providers/\").concat(provider, \"/register?api-version=2016-02-01\");\n            getUrl = \"\".concat(urlPrefix, \"providers/\").concat(provider, \"?api-version=2016-02-01\");\n            reqOptions = getRequestEssentials(originalRequest);\n            reqOptions.method = \"POST\";\n            reqOptions.url = postUrl;\n            _context.next = 7;\n            return policy._nextPolicy.sendRequest(reqOptions);\n          case 7:\n            response = _context.sent;\n            if (!(response.status !== 200)) {\n              _context.next = 10;\n              break;\n            }\n            throw new Error(\"Autoregistration of \".concat(provider, \" failed. Please try registering manually.\"));\n          case 10:\n            return _context.abrupt(\"return\", getRegistrationStatus(policy, getUrl, originalRequest));\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _registerRP.apply(this, arguments);\n}\nfunction getRegistrationStatus(_x5, _x6, _x7) {\n  return _getRegistrationStatus.apply(this, arguments);\n}\nfunction _getRegistrationStatus() {\n  _getRegistrationStatus = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(policy, url, originalRequest) {\n    var reqOptions, res, obj;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            reqOptions = getRequestEssentials(originalRequest);\n            reqOptions.url = url;\n            reqOptions.method = \"GET\";\n            _context2.next = 5;\n            return policy._nextPolicy.sendRequest(reqOptions);\n          case 5:\n            res = _context2.sent;\n            obj = res.parsedBody;\n            if (!(res.parsedBody && obj.registrationState && obj.registrationState === \"Registered\")) {\n              _context2.next = 11;\n              break;\n            }\n            return _context2.abrupt(\"return\", true);\n          case 11:\n            _context2.next = 13;\n            return delay(policy._retryTimeout * 1000);\n          case 13:\n            return _context2.abrupt(\"return\", getRegistrationStatus(policy, url, originalRequest));\n          case 14:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getRegistrationStatus.apply(this, arguments);\n}","map":{"version":3,"mappings":"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","names":["utils","BaseRequestPolicy","delay","rpRegistrationPolicy","retryTimeout","create","nextPolicy","options","RPRegistrationPolicy","_retryTimeout","request","_nextPolicy","sendRequest","clone","then","response","registerIfNeeded","policy","status","rpName","checkRPNotRegisteredError","bodyAsText","urlPrefix","extractSubscriptionUrl","url","registerRP","catch","registrationStatus","headers","set","generateUuid","Promise","resolve","getRequestEssentials","originalRequest","reuseUrlToo","reqOptions","body","result","responseBody","JSON","parse","err","error","message","code","matchRes","match","pop","Error","provider","postUrl","getUrl","method","getRegistrationStatus","res","obj","parsedBody","registrationState"],"sourceRoot":"","sources":["../../../src/policies/rpRegistrationPolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport * as utils from \"../util/utils\";\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n} from \"./requestPolicy\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { WebResourceLike } from \"../webResource\";\nimport { delay } from \"@azure/core-util\";\n\nexport function rpRegistrationPolicy(retryTimeout = 30): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new RPRegistrationPolicy(nextPolicy, options, retryTimeout);\n    },\n  };\n}\n\nexport class RPRegistrationPolicy extends BaseRequestPolicy {\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    readonly _retryTimeout = 30\n  ) {\n    super(nextPolicy, options);\n  }\n\n  public sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    return this._nextPolicy\n      .sendRequest(request.clone())\n      .then((response) => registerIfNeeded(this, request, response));\n  }\n}\n\nfunction registerIfNeeded(\n  policy: RPRegistrationPolicy,\n  request: WebResourceLike,\n  response: HttpOperationResponse\n): Promise<HttpOperationResponse> {\n  if (response.status === 409) {\n    const rpName = checkRPNotRegisteredError(response.bodyAsText as string);\n    if (rpName) {\n      const urlPrefix = extractSubscriptionUrl(request.url);\n      return (\n        registerRP(policy, urlPrefix, rpName, request)\n          // Autoregistration of ${provider} failed for some reason. We will not return this error\n          // instead will return the initial response with 409 status code back to the user.\n          // do nothing here as we are returning the original response at the end of this method.\n          .catch(() => false)\n          .then((registrationStatus) => {\n            if (registrationStatus) {\n              // Retry the original request. We have to change the x-ms-client-request-id\n              // otherwise Azure endpoint will return the initial 409 (cached) response.\n              request.headers.set(\"x-ms-client-request-id\", utils.generateUuid());\n              return policy._nextPolicy.sendRequest(request.clone());\n            }\n            return response;\n          })\n      );\n    }\n  }\n\n  return Promise.resolve(response);\n}\n\n/**\n * Reuses the headers of the original request and url (if specified).\n * @param originalRequest - The original request\n * @param reuseUrlToo - Should the url from the original request be reused as well. Default false.\n * @returns A new request object with desired headers.\n */\nfunction getRequestEssentials(\n  originalRequest: WebResourceLike,\n  reuseUrlToo = false\n): WebResourceLike {\n  const reqOptions: WebResourceLike = originalRequest.clone();\n  if (reuseUrlToo) {\n    reqOptions.url = originalRequest.url;\n  }\n\n  // We have to change the x-ms-client-request-id otherwise Azure endpoint\n  // will return the initial 409 (cached) response.\n  reqOptions.headers.set(\"x-ms-client-request-id\", utils.generateUuid());\n\n  // Set content-type to application/json\n  reqOptions.headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n\n  return reqOptions;\n}\n\n/**\n * Validates the error code and message associated with 409 response status code. If it matches to that of\n * RP not registered then it returns the name of the RP else returns undefined.\n * @param body - The response body received after making the original request.\n * @returns The name of the RP if condition is satisfied else undefined.\n */\nfunction checkRPNotRegisteredError(body: string): string {\n  let result, responseBody;\n  if (body) {\n    try {\n      responseBody = JSON.parse(body);\n    } catch (err: any) {\n      // do nothing;\n    }\n    if (\n      responseBody &&\n      responseBody.error &&\n      responseBody.error.message &&\n      responseBody.error.code &&\n      responseBody.error.code === \"MissingSubscriptionRegistration\"\n    ) {\n      const matchRes = responseBody.error.message.match(/.*'(.*)'/i);\n      if (matchRes) {\n        result = matchRes.pop();\n      }\n    }\n  }\n  return result;\n}\n\n/**\n * Extracts the first part of the URL, just after subscription:\n * https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/\n * @param url - The original request url\n * @returns The url prefix as explained above.\n */\nfunction extractSubscriptionUrl(url: string): string {\n  let result;\n  const matchRes = url.match(/.*\\/subscriptions\\/[a-f0-9-]+\\//gi);\n  if (matchRes && matchRes[0]) {\n    result = matchRes[0];\n  } else {\n    throw new Error(`Unable to extract subscriptionId from the given url - ${url}.`);\n  }\n  return result;\n}\n\n/**\n * Registers the given provider.\n * @param policy - The RPRegistrationPolicy this function is being called against.\n * @param urlPrefix - https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/\n * @param provider - The provider name to be registered.\n * @param originalRequest - The original request sent by the user that returned a 409 response\n * with a message that the provider is not registered.\n */\nasync function registerRP(\n  policy: RPRegistrationPolicy,\n  urlPrefix: string,\n  provider: string,\n  originalRequest: WebResourceLike\n): Promise<boolean> {\n  const postUrl = `${urlPrefix}providers/${provider}/register?api-version=2016-02-01`;\n  const getUrl = `${urlPrefix}providers/${provider}?api-version=2016-02-01`;\n  const reqOptions = getRequestEssentials(originalRequest);\n  reqOptions.method = \"POST\";\n  reqOptions.url = postUrl;\n\n  const response = await policy._nextPolicy.sendRequest(reqOptions);\n  if (response.status !== 200) {\n    throw new Error(`Autoregistration of ${provider} failed. Please try registering manually.`);\n  }\n  return getRegistrationStatus(policy, getUrl, originalRequest);\n}\n\n/**\n * Polls the registration status of the provider that was registered. Polling happens at an interval of 30 seconds.\n * Polling will happen till the registrationState property of the response body is \"Registered\".\n * @param policy - The RPRegistrationPolicy this function is being called against.\n * @param url - The request url for polling\n * @param originalRequest - The original request sent by the user that returned a 409 response\n * with a message that the provider is not registered.\n * @returns True if RP Registration is successful.\n */\nasync function getRegistrationStatus(\n  policy: RPRegistrationPolicy,\n  url: string,\n  originalRequest: WebResourceLike\n): Promise<boolean> {\n  const reqOptions: any = getRequestEssentials(originalRequest);\n  reqOptions.url = url;\n  reqOptions.method = \"GET\";\n\n  const res = await policy._nextPolicy.sendRequest(reqOptions);\n  const obj = res.parsedBody;\n  if (res.parsedBody && obj.registrationState && obj.registrationState === \"Registered\") {\n    return true;\n  } else {\n    await delay(policy._retryTimeout * 1000);\n    return getRegistrationStatus(policy, url, originalRequest);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
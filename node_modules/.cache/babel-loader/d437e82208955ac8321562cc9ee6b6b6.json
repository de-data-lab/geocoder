{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * @hidden\n */\nvar CryptoUtils = /** @class */function () {\n  function CryptoUtils() {}\n  /**\n   * Creates a new random GUID\n   * @returns string (GUID)\n   */\n  CryptoUtils.createNewGuid = function () {\n    /*\n     * RFC4122: The version 4 UUID is meant for generating UUIDs from truly-random or\n     * pseudo-random numbers.\n     * The algorithm is as follows:\n     *     Set the two most significant bits (bits 6 and 7) of the\n     *        clock_seq_hi_and_reserved to zero and one, respectively.\n     *     Set the four most significant bits (bits 12 through 15) of the\n     *        time_hi_and_version field to the 4-bit version number from\n     *        Section 4.1.3. Version4\n     *     Set all the other bits to randomly (or pseudo-randomly) chosen\n     *     values.\n     * UUID                   = time-low \"-\" time-mid \"-\"time-high-and-version \"-\"clock-seq-reserved and low(2hexOctet)\"-\" node\n     * time-low               = 4hexOctet\n     * time-mid               = 2hexOctet\n     * time-high-and-version  = 2hexOctet\n     * clock-seq-and-reserved = hexOctet:\n     * clock-seq-low          = hexOctet\n     * node                   = 6hexOctet\n     * Format: xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\n     * y could be 1000, 1001, 1010, 1011 since most significant two bits needs to be 10\n     * y values are 8, 9, A, B\n     */\n    var cryptoObj = window.crypto; // for IE 11\n    if (cryptoObj && cryptoObj.getRandomValues) {\n      var buffer = new Uint8Array(16);\n      cryptoObj.getRandomValues(buffer);\n      // buffer[6] and buffer[7] represents the time_hi_and_version field. We will set the four most significant bits (4 through 7) of buffer[6] to represent decimal number 4 (UUID version number).\n      buffer[6] |= 0x40; // buffer[6] | 01000000 will set the 6 bit to 1.\n      buffer[6] &= 0x4f; // buffer[6] & 01001111 will set the 4, 5, and 7 bit to 0 such that bits 4-7 == 0100 = \"4\".\n      // buffer[8] represents the clock_seq_hi_and_reserved field. We will set the two most significant bits (6 and 7) of the clock_seq_hi_and_reserved to zero and one, respectively.\n      buffer[8] |= 0x80; // buffer[8] | 10000000 will set the 7 bit to 1.\n      buffer[8] &= 0xbf; // buffer[8] & 10111111 will set the 6 bit to 0.\n      return CryptoUtils.decimalToHex(buffer[0]) + CryptoUtils.decimalToHex(buffer[1]) + CryptoUtils.decimalToHex(buffer[2]) + CryptoUtils.decimalToHex(buffer[3]) + \"-\" + CryptoUtils.decimalToHex(buffer[4]) + CryptoUtils.decimalToHex(buffer[5]) + \"-\" + CryptoUtils.decimalToHex(buffer[6]) + CryptoUtils.decimalToHex(buffer[7]) + \"-\" + CryptoUtils.decimalToHex(buffer[8]) + CryptoUtils.decimalToHex(buffer[9]) + \"-\" + CryptoUtils.decimalToHex(buffer[10]) + CryptoUtils.decimalToHex(buffer[11]) + CryptoUtils.decimalToHex(buffer[12]) + CryptoUtils.decimalToHex(buffer[13]) + CryptoUtils.decimalToHex(buffer[14]) + CryptoUtils.decimalToHex(buffer[15]);\n    } else {\n      var guidHolder = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\";\n      var hex = \"0123456789abcdef\";\n      var r = 0;\n      var guidResponse = \"\";\n      for (var i = 0; i < 36; i++) {\n        if (guidHolder[i] !== \"-\" && guidHolder[i] !== \"4\") {\n          // each x and y needs to be random\n          r = Math.random() * 16 | 0;\n        }\n        if (guidHolder[i] === \"x\") {\n          guidResponse += hex[r];\n        } else if (guidHolder[i] === \"y\") {\n          // clock-seq-and-reserved first hex is filtered and remaining hex values are random\n          r &= 0x3; // bit and with 0011 to set pos 2 to zero ?0??\n          r |= 0x8; // set pos 3 to 1 as 1???\n          guidResponse += hex[r];\n        } else {\n          guidResponse += guidHolder[i];\n        }\n      }\n      return guidResponse;\n    }\n  };\n  /**\n   * verifies if a string is  GUID\n   * @param guid\n   */\n  CryptoUtils.isGuid = function (guid) {\n    var regexGuid = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n    return regexGuid.test(guid);\n  };\n  /**\n   * Decimal to Hex\n   *\n   * @param num\n   */\n  CryptoUtils.decimalToHex = function (num) {\n    var hex = num.toString(16);\n    while (hex.length < 2) {\n      hex = \"0\" + hex;\n    }\n    return hex;\n  };\n  // See: https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#Solution_4_%E2%80%93_escaping_the_string_before_encoding_it\n  /**\n   * encoding string to base64 - platform specific check\n   *\n   * @param input\n   */\n  CryptoUtils.base64Encode = function (input) {\n    return btoa(encodeURIComponent(input).replace(/%([0-9A-F]{2})/g, function toSolidBytes(match, p1) {\n      return String.fromCharCode(Number(\"0x\" + p1));\n    }));\n  };\n  /**\n   * Decodes a base64 encoded string.\n   *\n   * @param input\n   */\n  CryptoUtils.base64Decode = function (input) {\n    var encodedString = input.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    switch (encodedString.length % 4) {\n      case 0:\n        break;\n      case 2:\n        encodedString += \"==\";\n        break;\n      case 3:\n        encodedString += \"=\";\n        break;\n      default:\n        throw new Error(\"Invalid base64 string\");\n    }\n    return decodeURIComponent(atob(encodedString).split(\"\").map(function (c) {\n      return \"%\" + (\"00\" + c.charCodeAt(0).toString(16)).slice(-2);\n    }).join(\"\"));\n  };\n  /**\n   * deserialize a string\n   *\n   * @param query\n   */\n  CryptoUtils.deserialize = function (query) {\n    var match; // Regex for replacing addition symbol with a space\n    var pl = /\\+/g;\n    var search = /([^&=]+)=([^&]*)/g;\n    var decode = function (s) {\n      return decodeURIComponent(s.replace(pl, \" \"));\n    };\n    var obj = {};\n    match = search.exec(query);\n    while (match) {\n      obj[decode(match[1])] = decode(match[2]);\n      match = search.exec(query);\n    }\n    return obj;\n  };\n  return CryptoUtils;\n}();\nexport { CryptoUtils };","map":{"version":3,"mappings":"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","names":["CryptoUtils","cryptoObj","window","crypto","getRandomValues","buffer","Uint8Array","decimalToHex","guidHolder","hex","r","guidResponse","i","Math","random","guid","regexGuid","test","num","toString","length","input","btoa","encodeURIComponent","replace","toSolidBytes","match","p1","String","fromCharCode","Number","encodedString","Error","decodeURIComponent","atob","split","map","c","charCodeAt","slice","join","query","pl","search","decode","s","obj","exec"],"sourceRoot":"","sources":["../../src/utils/CryptoUtils.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}
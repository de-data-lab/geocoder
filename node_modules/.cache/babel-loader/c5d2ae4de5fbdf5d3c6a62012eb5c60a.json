{"ast":null,"code":"import _asyncToGenerator from \"/Users/tbeckett/Documents/TI - Project Info/JavaScript_end_to_end_client_file_upload_to_Azure_Storage_Blobs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { initOperation, pollOperation } from \"../poller/operation\";\nimport { logger } from \"../logger\";\nfunction getOperationLocationPollingUrl(inputs) {\n  var azureAsyncOperation = inputs.azureAsyncOperation,\n    operationLocation = inputs.operationLocation;\n  return operationLocation !== null && operationLocation !== void 0 ? operationLocation : azureAsyncOperation;\n}\nfunction getLocationHeader(rawResponse) {\n  return rawResponse.headers[\"location\"];\n}\nfunction getOperationLocationHeader(rawResponse) {\n  return rawResponse.headers[\"operation-location\"];\n}\nfunction getAzureAsyncOperationHeader(rawResponse) {\n  return rawResponse.headers[\"azure-asyncoperation\"];\n}\nfunction findResourceLocation(inputs) {\n  var location = inputs.location,\n    requestMethod = inputs.requestMethod,\n    requestPath = inputs.requestPath,\n    resourceLocationConfig = inputs.resourceLocationConfig;\n  switch (requestMethod) {\n    case \"PUT\":\n      {\n        return requestPath;\n      }\n    case \"DELETE\":\n      {\n        return undefined;\n      }\n    default:\n      {\n        switch (resourceLocationConfig) {\n          case \"azure-async-operation\":\n            {\n              return undefined;\n            }\n          case \"original-uri\":\n            {\n              return requestPath;\n            }\n          case \"location\":\n          default:\n            {\n              return location;\n            }\n        }\n      }\n  }\n}\nexport function inferLroMode(inputs) {\n  var rawResponse = inputs.rawResponse,\n    requestMethod = inputs.requestMethod,\n    requestPath = inputs.requestPath,\n    resourceLocationConfig = inputs.resourceLocationConfig;\n  var operationLocation = getOperationLocationHeader(rawResponse);\n  var azureAsyncOperation = getAzureAsyncOperationHeader(rawResponse);\n  var pollingUrl = getOperationLocationPollingUrl({\n    operationLocation: operationLocation,\n    azureAsyncOperation: azureAsyncOperation\n  });\n  var location = getLocationHeader(rawResponse);\n  var normalizedRequestMethod = requestMethod === null || requestMethod === void 0 ? void 0 : requestMethod.toLocaleUpperCase();\n  if (pollingUrl !== undefined) {\n    return {\n      mode: \"OperationLocation\",\n      operationLocation: pollingUrl,\n      resourceLocation: findResourceLocation({\n        requestMethod: normalizedRequestMethod,\n        location: location,\n        requestPath: requestPath,\n        resourceLocationConfig: resourceLocationConfig\n      })\n    };\n  } else if (location !== undefined) {\n    return {\n      mode: \"ResourceLocation\",\n      operationLocation: location\n    };\n  } else if (normalizedRequestMethod === \"PUT\" && requestPath) {\n    return {\n      mode: \"Body\",\n      operationLocation: requestPath\n    };\n  } else {\n    return undefined;\n  }\n}\nfunction transformStatus(inputs) {\n  var status = inputs.status,\n    statusCode = inputs.statusCode;\n  if (typeof status !== \"string\" && status !== undefined) {\n    throw new Error(\"Polling was unsuccessful. Expected status to have a string value or no value but it has instead: \".concat(status, \". This doesn't necessarily indicate the operation has failed. Check your Azure subscription or resource status for more information.\"));\n  }\n  switch (status === null || status === void 0 ? void 0 : status.toLocaleLowerCase()) {\n    case undefined:\n      return toOperationStatus(statusCode);\n    case \"succeeded\":\n      return \"succeeded\";\n    case \"failed\":\n      return \"failed\";\n    case \"running\":\n    case \"accepted\":\n    case \"started\":\n    case \"canceling\":\n    case \"cancelling\":\n      return \"running\";\n    case \"canceled\":\n    case \"cancelled\":\n      return \"canceled\";\n    default:\n      {\n        logger.warning(\"LRO: unrecognized operation status: \".concat(status));\n        return status;\n      }\n  }\n}\nfunction getStatus(rawResponse) {\n  var _a;\n  var _ref = (_a = rawResponse.body) !== null && _a !== void 0 ? _a : {},\n    status = _ref.status;\n  return transformStatus({\n    status: status,\n    statusCode: rawResponse.statusCode\n  });\n}\nfunction getProvisioningState(rawResponse) {\n  var _a, _b;\n  var _ref2 = (_a = rawResponse.body) !== null && _a !== void 0 ? _a : {},\n    properties = _ref2.properties,\n    provisioningState = _ref2.provisioningState;\n  var status = (_b = properties === null || properties === void 0 ? void 0 : properties.provisioningState) !== null && _b !== void 0 ? _b : provisioningState;\n  return transformStatus({\n    status: status,\n    statusCode: rawResponse.statusCode\n  });\n}\nfunction toOperationStatus(statusCode) {\n  if (statusCode === 202) {\n    return \"running\";\n  } else if (statusCode < 300) {\n    return \"succeeded\";\n  } else {\n    return \"failed\";\n  }\n}\nexport function parseRetryAfter(_ref3) {\n  var rawResponse = _ref3.rawResponse;\n  var retryAfter = rawResponse.headers[\"retry-after\"];\n  if (retryAfter !== undefined) {\n    // Retry-After header value is either in HTTP date format, or in seconds\n    var retryAfterInSeconds = parseInt(retryAfter);\n    return isNaN(retryAfterInSeconds) ? calculatePollingIntervalFromDate(new Date(retryAfter)) : retryAfterInSeconds * 1000;\n  }\n  return undefined;\n}\nfunction calculatePollingIntervalFromDate(retryAfterDate) {\n  var timeNow = Math.floor(new Date().getTime());\n  var retryAfterTime = retryAfterDate.getTime();\n  if (timeNow < retryAfterTime) {\n    return retryAfterTime - timeNow;\n  }\n  return undefined;\n}\nexport function getStatusFromInitialResponse(inputs) {\n  var response = inputs.response,\n    state = inputs.state,\n    operationLocation = inputs.operationLocation;\n  function helper() {\n    var _a;\n    var mode = (_a = state.config.metadata) === null || _a === void 0 ? void 0 : _a[\"mode\"];\n    switch (mode) {\n      case undefined:\n        return toOperationStatus(response.rawResponse.statusCode);\n      case \"Body\":\n        return getOperationStatus(response, state);\n      default:\n        return \"running\";\n    }\n  }\n  var status = helper();\n  return status === \"running\" && operationLocation === undefined ? \"succeeded\" : status;\n}\n/**\n * Initiates the long-running operation.\n */\nexport function initHttpOperation(_x) {\n  return _initHttpOperation.apply(this, arguments);\n}\nfunction _initHttpOperation() {\n  _initHttpOperation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(inputs) {\n    var stateProxy, resourceLocationConfig, processResult, lro, setErrorAsResult;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            stateProxy = inputs.stateProxy, resourceLocationConfig = inputs.resourceLocationConfig, processResult = inputs.processResult, lro = inputs.lro, setErrorAsResult = inputs.setErrorAsResult;\n            return _context2.abrupt(\"return\", initOperation({\n              init: function () {\n                var _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n                  var response, config;\n                  return _regeneratorRuntime().wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _context.next = 2;\n                          return lro.sendInitialRequest();\n                        case 2:\n                          response = _context.sent;\n                          config = inferLroMode({\n                            rawResponse: response.rawResponse,\n                            requestPath: lro.requestPath,\n                            requestMethod: lro.requestMethod,\n                            resourceLocationConfig: resourceLocationConfig\n                          });\n                          return _context.abrupt(\"return\", Object.assign({\n                            response: response,\n                            operationLocation: config === null || config === void 0 ? void 0 : config.operationLocation,\n                            resourceLocation: config === null || config === void 0 ? void 0 : config.resourceLocation\n                          }, (config === null || config === void 0 ? void 0 : config.mode) ? {\n                            metadata: {\n                              mode: config.mode\n                            }\n                          } : {}));\n                        case 5:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }));\n                function init() {\n                  return _init.apply(this, arguments);\n                }\n                return init;\n              }(),\n              stateProxy: stateProxy,\n              processResult: processResult ? function (_ref7, state) {\n                var flatResponse = _ref7.flatResponse;\n                return processResult(flatResponse, state);\n              } : function (_ref8) {\n                var flatResponse = _ref8.flatResponse;\n                return flatResponse;\n              },\n              getOperationStatus: getStatusFromInitialResponse,\n              setErrorAsResult: setErrorAsResult\n            }));\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _initHttpOperation.apply(this, arguments);\n}\nexport function getOperationLocation(_ref4, state) {\n  var rawResponse = _ref4.rawResponse;\n  var _a;\n  var mode = (_a = state.config.metadata) === null || _a === void 0 ? void 0 : _a[\"mode\"];\n  switch (mode) {\n    case \"OperationLocation\":\n      {\n        return getOperationLocationPollingUrl({\n          operationLocation: getOperationLocationHeader(rawResponse),\n          azureAsyncOperation: getAzureAsyncOperationHeader(rawResponse)\n        });\n      }\n    case \"ResourceLocation\":\n      {\n        return getLocationHeader(rawResponse);\n      }\n    case \"Body\":\n    default:\n      {\n        return undefined;\n      }\n  }\n}\nexport function getOperationStatus(_ref5, state) {\n  var rawResponse = _ref5.rawResponse;\n  var _a;\n  var mode = (_a = state.config.metadata) === null || _a === void 0 ? void 0 : _a[\"mode\"];\n  switch (mode) {\n    case \"OperationLocation\":\n      {\n        return getStatus(rawResponse);\n      }\n    case \"ResourceLocation\":\n      {\n        return toOperationStatus(rawResponse.statusCode);\n      }\n    case \"Body\":\n      {\n        return getProvisioningState(rawResponse);\n      }\n    default:\n      throw new Error(\"Internal error: Unexpected operation mode: \".concat(mode));\n  }\n}\nexport function getResourceLocation(_ref6, state) {\n  var flatResponse = _ref6.flatResponse;\n  if (typeof flatResponse === \"object\") {\n    var resourceLocation = flatResponse.resourceLocation;\n    if (resourceLocation !== undefined) {\n      state.config.resourceLocation = resourceLocation;\n    }\n  }\n  return state.config.resourceLocation;\n}\n/** Polls the long-running operation. */\nexport function pollHttpOperation(_x2) {\n  return _pollHttpOperation.apply(this, arguments);\n}\nfunction _pollHttpOperation() {\n  _pollHttpOperation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(inputs) {\n    var lro, stateProxy, options, processResult, updateState, setDelay, state, setErrorAsResult;\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            lro = inputs.lro, stateProxy = inputs.stateProxy, options = inputs.options, processResult = inputs.processResult, updateState = inputs.updateState, setDelay = inputs.setDelay, state = inputs.state, setErrorAsResult = inputs.setErrorAsResult;\n            return _context4.abrupt(\"return\", pollOperation({\n              state: state,\n              stateProxy: stateProxy,\n              setDelay: setDelay,\n              processResult: processResult ? function (_ref9, inputState) {\n                var flatResponse = _ref9.flatResponse;\n                return processResult(flatResponse, inputState);\n              } : function (_ref10) {\n                var flatResponse = _ref10.flatResponse;\n                return flatResponse;\n              },\n              updateState: updateState,\n              getPollingInterval: parseRetryAfter,\n              getOperationLocation: getOperationLocation,\n              getOperationStatus: getOperationStatus,\n              getResourceLocation: getResourceLocation,\n              options: options,\n              /**\n               * The expansion here is intentional because `lro` could be an object that\n               * references an inner this, so we need to preserve a reference to it.\n               */\n              poll: function () {\n                var _poll = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(location, inputOptions) {\n                  return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          return _context3.abrupt(\"return\", lro.sendPollRequest(location, inputOptions));\n                        case 1:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  }, _callee3);\n                }));\n                function poll(_x3, _x4) {\n                  return _poll.apply(this, arguments);\n                }\n                return poll;\n              }(),\n              setErrorAsResult: setErrorAsResult\n            }));\n          case 2:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _pollHttpOperation.apply(this, arguments);\n}","map":{"version":3,"mappings":"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","names":["initOperation","pollOperation","logger","getOperationLocationPollingUrl","inputs","azureAsyncOperation","operationLocation","getLocationHeader","rawResponse","headers","getOperationLocationHeader","getAzureAsyncOperationHeader","findResourceLocation","location","requestMethod","requestPath","resourceLocationConfig","undefined","inferLroMode","pollingUrl","normalizedRequestMethod","toLocaleUpperCase","mode","resourceLocation","transformStatus","status","statusCode","Error","toLocaleLowerCase","toOperationStatus","warning","getStatus","body","getProvisioningState","properties","provisioningState","parseRetryAfter","retryAfter","retryAfterInSeconds","parseInt","isNaN","calculatePollingIntervalFromDate","Date","retryAfterDate","timeNow","Math","floor","getTime","retryAfterTime","getStatusFromInitialResponse","response","state","helper","config","metadata","getOperationStatus","initHttpOperation","stateProxy","processResult","lro","setErrorAsResult","init","sendInitialRequest","Object","flatResponse","getOperationLocation","getResourceLocation","pollHttpOperation","options","updateState","setDelay","inputState","getPollingInterval","poll","inputOptions","sendPollRequest"],"sourceRoot":"","sources":["../../../src/http/operation.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  HttpOperationMode,\n  LongRunningOperation,\n  LroResourceLocationConfig,\n  LroResponse,\n  RawResponse,\n  ResponseBody,\n} from \"./models\";\nimport {\n  OperationConfig,\n  OperationStatus,\n  RestorableOperationState,\n  StateProxy,\n} from \"../poller/models\";\nimport { initOperation, pollOperation } from \"../poller/operation\";\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport { logger } from \"../logger\";\n\nfunction getOperationLocationPollingUrl(inputs: {\n  operationLocation?: string;\n  azureAsyncOperation?: string;\n}): string | undefined {\n  const { azureAsyncOperation, operationLocation } = inputs;\n  return operationLocation ?? azureAsyncOperation;\n}\n\nfunction getLocationHeader(rawResponse: RawResponse): string | undefined {\n  return rawResponse.headers[\"location\"];\n}\n\nfunction getOperationLocationHeader(rawResponse: RawResponse): string | undefined {\n  return rawResponse.headers[\"operation-location\"];\n}\n\nfunction getAzureAsyncOperationHeader(rawResponse: RawResponse): string | undefined {\n  return rawResponse.headers[\"azure-asyncoperation\"];\n}\n\nfunction findResourceLocation(inputs: {\n  requestMethod?: string;\n  location?: string;\n  requestPath?: string;\n  resourceLocationConfig?: LroResourceLocationConfig;\n}): string | undefined {\n  const { location, requestMethod, requestPath, resourceLocationConfig } = inputs;\n  switch (requestMethod) {\n    case \"PUT\": {\n      return requestPath;\n    }\n    case \"DELETE\": {\n      return undefined;\n    }\n    default: {\n      switch (resourceLocationConfig) {\n        case \"azure-async-operation\": {\n          return undefined;\n        }\n        case \"original-uri\": {\n          return requestPath;\n        }\n        case \"location\":\n        default: {\n          return location;\n        }\n      }\n    }\n  }\n}\n\nexport function inferLroMode(inputs: {\n  rawResponse: RawResponse;\n  requestPath?: string;\n  requestMethod?: string;\n  resourceLocationConfig?: LroResourceLocationConfig;\n}): (OperationConfig & { mode: HttpOperationMode }) | undefined {\n  const { rawResponse, requestMethod, requestPath, resourceLocationConfig } = inputs;\n  const operationLocation = getOperationLocationHeader(rawResponse);\n  const azureAsyncOperation = getAzureAsyncOperationHeader(rawResponse);\n  const pollingUrl = getOperationLocationPollingUrl({ operationLocation, azureAsyncOperation });\n  const location = getLocationHeader(rawResponse);\n  const normalizedRequestMethod = requestMethod?.toLocaleUpperCase();\n  if (pollingUrl !== undefined) {\n    return {\n      mode: \"OperationLocation\",\n      operationLocation: pollingUrl,\n      resourceLocation: findResourceLocation({\n        requestMethod: normalizedRequestMethod,\n        location,\n        requestPath,\n        resourceLocationConfig,\n      }),\n    };\n  } else if (location !== undefined) {\n    return {\n      mode: \"ResourceLocation\",\n      operationLocation: location,\n    };\n  } else if (normalizedRequestMethod === \"PUT\" && requestPath) {\n    return {\n      mode: \"Body\",\n      operationLocation: requestPath,\n    };\n  } else {\n    return undefined;\n  }\n}\n\nfunction transformStatus(inputs: { status: unknown; statusCode: number }): OperationStatus {\n  const { status, statusCode } = inputs;\n  if (typeof status !== \"string\" && status !== undefined) {\n    throw new Error(\n      `Polling was unsuccessful. Expected status to have a string value or no value but it has instead: ${status}. This doesn't necessarily indicate the operation has failed. Check your Azure subscription or resource status for more information.`\n    );\n  }\n  switch (status?.toLocaleLowerCase()) {\n    case undefined:\n      return toOperationStatus(statusCode);\n    case \"succeeded\":\n      return \"succeeded\";\n    case \"failed\":\n      return \"failed\";\n    case \"running\":\n    case \"accepted\":\n    case \"started\":\n    case \"canceling\":\n    case \"cancelling\":\n      return \"running\";\n    case \"canceled\":\n    case \"cancelled\":\n      return \"canceled\";\n    default: {\n      logger.warning(`LRO: unrecognized operation status: ${status}`);\n      return status as OperationStatus;\n    }\n  }\n}\n\nfunction getStatus(rawResponse: RawResponse): OperationStatus {\n  const { status } = (rawResponse.body as ResponseBody) ?? {};\n  return transformStatus({ status, statusCode: rawResponse.statusCode });\n}\n\nfunction getProvisioningState(rawResponse: RawResponse): OperationStatus {\n  const { properties, provisioningState } = (rawResponse.body as ResponseBody) ?? {};\n  const status = properties?.provisioningState ?? provisioningState;\n  return transformStatus({ status, statusCode: rawResponse.statusCode });\n}\n\nfunction toOperationStatus(statusCode: number): OperationStatus {\n  if (statusCode === 202) {\n    return \"running\";\n  } else if (statusCode < 300) {\n    return \"succeeded\";\n  } else {\n    return \"failed\";\n  }\n}\n\nexport function parseRetryAfter<T>({ rawResponse }: LroResponse<T>): number | undefined {\n  const retryAfter: string | undefined = rawResponse.headers[\"retry-after\"];\n  if (retryAfter !== undefined) {\n    // Retry-After header value is either in HTTP date format, or in seconds\n    const retryAfterInSeconds = parseInt(retryAfter);\n    return isNaN(retryAfterInSeconds)\n      ? calculatePollingIntervalFromDate(new Date(retryAfter))\n      : retryAfterInSeconds * 1000;\n  }\n  return undefined;\n}\n\nfunction calculatePollingIntervalFromDate(retryAfterDate: Date): number | undefined {\n  const timeNow = Math.floor(new Date().getTime());\n  const retryAfterTime = retryAfterDate.getTime();\n  if (timeNow < retryAfterTime) {\n    return retryAfterTime - timeNow;\n  }\n  return undefined;\n}\n\nexport function getStatusFromInitialResponse<TState>(inputs: {\n  response: LroResponse<unknown>;\n  state: RestorableOperationState<TState>;\n  operationLocation?: string;\n}): OperationStatus {\n  const { response, state, operationLocation } = inputs;\n  function helper(): OperationStatus {\n    const mode = state.config.metadata?.[\"mode\"];\n    switch (mode) {\n      case undefined:\n        return toOperationStatus(response.rawResponse.statusCode);\n      case \"Body\":\n        return getOperationStatus(response, state);\n      default:\n        return \"running\";\n    }\n  }\n  const status = helper();\n  return status === \"running\" && operationLocation === undefined ? \"succeeded\" : status;\n}\n\n/**\n * Initiates the long-running operation.\n */\nexport async function initHttpOperation<TResult, TState>(inputs: {\n  stateProxy: StateProxy<TState, TResult>;\n  resourceLocationConfig?: LroResourceLocationConfig;\n  processResult?: (result: unknown, state: TState) => TResult;\n  setErrorAsResult: boolean;\n  lro: LongRunningOperation;\n}): Promise<RestorableOperationState<TState>> {\n  const { stateProxy, resourceLocationConfig, processResult, lro, setErrorAsResult } = inputs;\n  return initOperation({\n    init: async () => {\n      const response = await lro.sendInitialRequest();\n      const config = inferLroMode({\n        rawResponse: response.rawResponse,\n        requestPath: lro.requestPath,\n        requestMethod: lro.requestMethod,\n        resourceLocationConfig,\n      });\n      return {\n        response,\n        operationLocation: config?.operationLocation,\n        resourceLocation: config?.resourceLocation,\n        ...(config?.mode ? { metadata: { mode: config.mode } } : {}),\n      };\n    },\n    stateProxy,\n    processResult: processResult\n      ? ({ flatResponse }, state) => processResult(flatResponse, state)\n      : ({ flatResponse }) => flatResponse as TResult,\n    getOperationStatus: getStatusFromInitialResponse,\n    setErrorAsResult,\n  });\n}\n\nexport function getOperationLocation<TState>(\n  { rawResponse }: LroResponse,\n  state: RestorableOperationState<TState>\n): string | undefined {\n  const mode = state.config.metadata?.[\"mode\"];\n  switch (mode) {\n    case \"OperationLocation\": {\n      return getOperationLocationPollingUrl({\n        operationLocation: getOperationLocationHeader(rawResponse),\n        azureAsyncOperation: getAzureAsyncOperationHeader(rawResponse),\n      });\n    }\n    case \"ResourceLocation\": {\n      return getLocationHeader(rawResponse);\n    }\n    case \"Body\":\n    default: {\n      return undefined;\n    }\n  }\n}\n\nexport function getOperationStatus<TState>(\n  { rawResponse }: LroResponse,\n  state: RestorableOperationState<TState>\n): OperationStatus {\n  const mode = state.config.metadata?.[\"mode\"];\n  switch (mode) {\n    case \"OperationLocation\": {\n      return getStatus(rawResponse);\n    }\n    case \"ResourceLocation\": {\n      return toOperationStatus(rawResponse.statusCode);\n    }\n    case \"Body\": {\n      return getProvisioningState(rawResponse);\n    }\n    default:\n      throw new Error(`Internal error: Unexpected operation mode: ${mode}`);\n  }\n}\n\nexport function getResourceLocation<TState>(\n  { flatResponse }: LroResponse,\n  state: RestorableOperationState<TState>\n): string | undefined {\n  if (typeof flatResponse === \"object\") {\n    const resourceLocation = (flatResponse as { resourceLocation?: string }).resourceLocation;\n    if (resourceLocation !== undefined) {\n      state.config.resourceLocation = resourceLocation;\n    }\n  }\n  return state.config.resourceLocation;\n}\n\n/** Polls the long-running operation. */\nexport async function pollHttpOperation<TState, TResult>(inputs: {\n  lro: LongRunningOperation;\n  stateProxy: StateProxy<TState, TResult>;\n  processResult?: (result: unknown, state: TState) => TResult;\n  updateState?: (state: TState, lastResponse: LroResponse) => void;\n  isDone?: (lastResponse: LroResponse, state: TState) => boolean;\n  setDelay: (intervalInMs: number) => void;\n  options?: { abortSignal?: AbortSignalLike };\n  state: RestorableOperationState<TState>;\n  setErrorAsResult: boolean;\n}): Promise<void> {\n  const {\n    lro,\n    stateProxy,\n    options,\n    processResult,\n    updateState,\n    setDelay,\n    state,\n    setErrorAsResult,\n  } = inputs;\n  return pollOperation({\n    state,\n    stateProxy,\n    setDelay,\n    processResult: processResult\n      ? ({ flatResponse }, inputState) => processResult(flatResponse, inputState)\n      : ({ flatResponse }) => flatResponse as TResult,\n    updateState,\n    getPollingInterval: parseRetryAfter,\n    getOperationLocation,\n    getOperationStatus,\n    getResourceLocation,\n    options,\n    /**\n     * The expansion here is intentional because `lro` could be an object that\n     * references an inner this, so we need to preserve a reference to it.\n     */\n    poll: async (location, inputOptions) => lro.sendPollRequest(location, inputOptions),\n    setErrorAsResult,\n  });\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { HttpHeaders, isNode, URLBuilder } from \"@azure/core-http\";\nimport { DevelopmentConnectionString, HeaderConstants, PathStylePorts, URLConstants } from \"./constants\";\n/**\n * Reserved URL characters must be properly escaped for Storage services like Blob or File.\n *\n * ## URL encode and escape strategy for JS SDKs\n *\n * When customers pass a URL string into XxxClient classes constructor, the URL string may already be URL encoded or not.\n * But before sending to Azure Storage server, the URL must be encoded. However, it's hard for a SDK to guess whether the URL\n * string has been encoded or not. We have 2 potential strategies, and chose strategy two for the XxxClient constructors.\n *\n * ### Strategy One: Assume the customer URL string is not encoded, and always encode URL string in SDK.\n *\n * This is what legacy V2 SDK does, simple and works for most of the cases.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b:\",\n *   SDK will encode it to \"http://account.blob.core.windows.net/con/b%3A\" and send to server. A blob named \"b:\" will be created.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b%3A\",\n *   SDK will encode it to \"http://account.blob.core.windows.net/con/b%253A\" and send to server. A blob named \"b%3A\" will be created.\n *\n * But this strategy will make it not possible to create a blob with \"?\" in it's name. Because when customer URL string is\n * \"http://account.blob.core.windows.net/con/blob?name\", the \"?name\" will be treated as URL paramter instead of blob name.\n * If customer URL string is \"http://account.blob.core.windows.net/con/blob%3Fname\", a blob named \"blob%3Fname\" will be created.\n * V2 SDK doesn't have this issue because it doesn't allow customer pass in a full URL, it accepts a separate blob name and encodeURIComponent for it.\n * We cannot accept a SDK cannot create a blob name with \"?\". So we implement strategy two:\n *\n * ### Strategy Two: SDK doesn't assume the URL has been encoded or not. It will just escape the special characters.\n *\n * This is what V10 Blob Go SDK does. It accepts a URL type in Go, and call url.EscapedPath() to escape the special chars unescaped.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b:\",\n *   SDK will escape \":\" like \"http://account.blob.core.windows.net/con/b%3A\" and send to server. A blob named \"b:\" will be created.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b%3A\",\n *   There is no special characters, so send \"http://account.blob.core.windows.net/con/b%3A\" to server. A blob named \"b:\" will be created.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b%253A\",\n *   There is no special characters, so send \"http://account.blob.core.windows.net/con/b%253A\" to server. A blob named \"b%3A\" will be created.\n *\n * This strategy gives us flexibility to create with any special characters. But \"%\" will be treated as a special characters, if the URL string\n * is not encoded, there shouldn't a \"%\" in the URL string, otherwise the URL is not a valid URL.\n * If customer needs to create a blob with \"%\" in it's blob name, use \"%25\" instead of \"%\". Just like above 3rd sample.\n * And following URL strings are invalid:\n * - \"http://account.blob.core.windows.net/con/b%\"\n * - \"http://account.blob.core.windows.net/con/b%2\"\n * - \"http://account.blob.core.windows.net/con/b%G\"\n *\n * Another special character is \"?\", use \"%2F\" to represent a blob name with \"?\" in a URL string.\n *\n * ### Strategy for containerName, blobName or other specific XXXName parameters in methods such as `containerClient.getBlobClient(blobName)`\n *\n * We will apply strategy one, and call encodeURIComponent for these parameters like blobName. Because what customers passes in is a plain name instead of a URL.\n *\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/naming-and-referencing-containers--blobs--and-metadata\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/naming-and-referencing-shares--directories--files--and-metadata\n *\n * @param url -\n */\nexport function escapeURLPath(url) {\n  const urlParsed = URLBuilder.parse(url);\n  let path = urlParsed.getPath();\n  path = path || \"/\";\n  path = escape(path);\n  urlParsed.setPath(path);\n  return urlParsed.toString();\n}\nfunction getProxyUriFromDevConnString(connectionString) {\n  // Development Connection String\n  // https://docs.microsoft.com/en-us/azure/storage/common/storage-configure-connection-string#connect-to-the-emulator-account-using-the-well-known-account-name-and-key\n  let proxyUri = \"\";\n  if (connectionString.search(\"DevelopmentStorageProxyUri=\") !== -1) {\n    // CONNECTION_STRING=UseDevelopmentStorage=true;DevelopmentStorageProxyUri=http://myProxyUri\n    const matchCredentials = connectionString.split(\";\");\n    for (const element of matchCredentials) {\n      if (element.trim().startsWith(\"DevelopmentStorageProxyUri=\")) {\n        proxyUri = element.trim().match(\"DevelopmentStorageProxyUri=(.*)\")[1];\n      }\n    }\n  }\n  return proxyUri;\n}\nexport function getValueInConnString(connectionString, argument) {\n  const elements = connectionString.split(\";\");\n  for (const element of elements) {\n    if (element.trim().startsWith(argument)) {\n      return element.trim().match(argument + \"=(.*)\")[1];\n    }\n  }\n  return \"\";\n}\n/**\n * Extracts the parts of an Azure Storage account connection string.\n *\n * @param connectionString - Connection string.\n * @returns String key value pairs of the storage account's url and credentials.\n */\nexport function extractConnectionStringParts(connectionString) {\n  let proxyUri = \"\";\n  if (connectionString.startsWith(\"UseDevelopmentStorage=true\")) {\n    // Development connection string\n    proxyUri = getProxyUriFromDevConnString(connectionString);\n    connectionString = DevelopmentConnectionString;\n  }\n  // Matching BlobEndpoint in the Account connection string\n  let blobEndpoint = getValueInConnString(connectionString, \"BlobEndpoint\");\n  // Slicing off '/' at the end if exists\n  // (The methods that use `extractConnectionStringParts` expect the url to not have `/` at the end)\n  blobEndpoint = blobEndpoint.endsWith(\"/\") ? blobEndpoint.slice(0, -1) : blobEndpoint;\n  if (connectionString.search(\"DefaultEndpointsProtocol=\") !== -1 && connectionString.search(\"AccountKey=\") !== -1) {\n    // Account connection string\n    let defaultEndpointsProtocol = \"\";\n    let accountName = \"\";\n    let accountKey = Buffer.from(\"accountKey\", \"base64\");\n    let endpointSuffix = \"\";\n    // Get account name and key\n    accountName = getValueInConnString(connectionString, \"AccountName\");\n    accountKey = Buffer.from(getValueInConnString(connectionString, \"AccountKey\"), \"base64\");\n    if (!blobEndpoint) {\n      // BlobEndpoint is not present in the Account connection string\n      // Can be obtained from `${defaultEndpointsProtocol}://${accountName}.blob.${endpointSuffix}`\n      defaultEndpointsProtocol = getValueInConnString(connectionString, \"DefaultEndpointsProtocol\");\n      const protocol = defaultEndpointsProtocol.toLowerCase();\n      if (protocol !== \"https\" && protocol !== \"http\") {\n        throw new Error(\"Invalid DefaultEndpointsProtocol in the provided Connection String. Expecting 'https' or 'http'\");\n      }\n      endpointSuffix = getValueInConnString(connectionString, \"EndpointSuffix\");\n      if (!endpointSuffix) {\n        throw new Error(\"Invalid EndpointSuffix in the provided Connection String\");\n      }\n      blobEndpoint = `${defaultEndpointsProtocol}://${accountName}.blob.${endpointSuffix}`;\n    }\n    if (!accountName) {\n      throw new Error(\"Invalid AccountName in the provided Connection String\");\n    } else if (accountKey.length === 0) {\n      throw new Error(\"Invalid AccountKey in the provided Connection String\");\n    }\n    return {\n      kind: \"AccountConnString\",\n      url: blobEndpoint,\n      accountName,\n      accountKey,\n      proxyUri\n    };\n  } else {\n    // SAS connection string\n    const accountSas = getValueInConnString(connectionString, \"SharedAccessSignature\");\n    const accountName = getAccountNameFromUrl(blobEndpoint);\n    if (!blobEndpoint) {\n      throw new Error(\"Invalid BlobEndpoint in the provided SAS Connection String\");\n    } else if (!accountSas) {\n      throw new Error(\"Invalid SharedAccessSignature in the provided SAS Connection String\");\n    }\n    return {\n      kind: \"SASConnString\",\n      url: blobEndpoint,\n      accountName,\n      accountSas\n    };\n  }\n}\n/**\n * Internal escape method implemented Strategy Two mentioned in escapeURL() description.\n *\n * @param text -\n */\nfunction escape(text) {\n  return encodeURIComponent(text).replace(/%2F/g, \"/\") // Don't escape for \"/\"\n  .replace(/'/g, \"%27\") // Escape for \"'\"\n  .replace(/\\+/g, \"%20\").replace(/%25/g, \"%\"); // Revert encoded \"%\"\n}\n/**\n * Append a string to URL path. Will remove duplicated \"/\" in front of the string\n * when URL path ends with a \"/\".\n *\n * @param url - Source URL string\n * @param name - String to be appended to URL\n * @returns An updated URL string\n */\nexport function appendToURLPath(url, name) {\n  const urlParsed = URLBuilder.parse(url);\n  let path = urlParsed.getPath();\n  path = path ? path.endsWith(\"/\") ? `${path}${name}` : `${path}/${name}` : name;\n  urlParsed.setPath(path);\n  return urlParsed.toString();\n}\n/**\n * Set URL parameter name and value. If name exists in URL parameters, old value\n * will be replaced by name key. If not provide value, the parameter will be deleted.\n *\n * @param url - Source URL string\n * @param name - Parameter name\n * @param value - Parameter value\n * @returns An updated URL string\n */\nexport function setURLParameter(url, name, value) {\n  const urlParsed = URLBuilder.parse(url);\n  urlParsed.setQueryParameter(name, value);\n  return urlParsed.toString();\n}\n/**\n * Get URL parameter by name.\n *\n * @param url -\n * @param name -\n */\nexport function getURLParameter(url, name) {\n  const urlParsed = URLBuilder.parse(url);\n  return urlParsed.getQueryParameterValue(name);\n}\n/**\n * Set URL host.\n *\n * @param url - Source URL string\n * @param host - New host string\n * @returns An updated URL string\n */\nexport function setURLHost(url, host) {\n  const urlParsed = URLBuilder.parse(url);\n  urlParsed.setHost(host);\n  return urlParsed.toString();\n}\n/**\n * Get URL path from an URL string.\n *\n * @param url - Source URL string\n */\nexport function getURLPath(url) {\n  const urlParsed = URLBuilder.parse(url);\n  return urlParsed.getPath();\n}\n/**\n * Get URL scheme from an URL string.\n *\n * @param url - Source URL string\n */\nexport function getURLScheme(url) {\n  const urlParsed = URLBuilder.parse(url);\n  return urlParsed.getScheme();\n}\n/**\n * Get URL path and query from an URL string.\n *\n * @param url - Source URL string\n */\nexport function getURLPathAndQuery(url) {\n  const urlParsed = URLBuilder.parse(url);\n  const pathString = urlParsed.getPath();\n  if (!pathString) {\n    throw new RangeError(\"Invalid url without valid path.\");\n  }\n  let queryString = urlParsed.getQuery() || \"\";\n  queryString = queryString.trim();\n  if (queryString !== \"\") {\n    queryString = queryString.startsWith(\"?\") ? queryString : `?${queryString}`; // Ensure query string start with '?'\n  }\n\n  return `${pathString}${queryString}`;\n}\n/**\n * Get URL query key value pairs from an URL string.\n *\n * @param url -\n */\nexport function getURLQueries(url) {\n  let queryString = URLBuilder.parse(url).getQuery();\n  if (!queryString) {\n    return {};\n  }\n  queryString = queryString.trim();\n  queryString = queryString.startsWith(\"?\") ? queryString.substr(1) : queryString;\n  let querySubStrings = queryString.split(\"&\");\n  querySubStrings = querySubStrings.filter(value => {\n    const indexOfEqual = value.indexOf(\"=\");\n    const lastIndexOfEqual = value.lastIndexOf(\"=\");\n    return indexOfEqual > 0 && indexOfEqual === lastIndexOfEqual && lastIndexOfEqual < value.length - 1;\n  });\n  const queries = {};\n  for (const querySubString of querySubStrings) {\n    const splitResults = querySubString.split(\"=\");\n    const key = splitResults[0];\n    const value = splitResults[1];\n    queries[key] = value;\n  }\n  return queries;\n}\n/**\n * Append a string to URL query.\n *\n * @param url - Source URL string.\n * @param queryParts - String to be appended to the URL query.\n * @returns An updated URL string.\n */\nexport function appendToURLQuery(url, queryParts) {\n  const urlParsed = URLBuilder.parse(url);\n  let query = urlParsed.getQuery();\n  if (query) {\n    query += \"&\" + queryParts;\n  } else {\n    query = queryParts;\n  }\n  urlParsed.setQuery(query);\n  return urlParsed.toString();\n}\n/**\n * Rounds a date off to seconds.\n *\n * @param date -\n * @param withMilliseconds - If true, YYYY-MM-DDThh:mm:ss.fffffffZ will be returned;\n *                                          If false, YYYY-MM-DDThh:mm:ssZ will be returned.\n * @returns Date string in ISO8061 format, with or without 7 milliseconds component\n */\nexport function truncatedISO8061Date(date) {\n  let withMilliseconds = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  // Date.toISOString() will return like \"2018-10-29T06:34:36.139Z\"\n  const dateString = date.toISOString();\n  return withMilliseconds ? dateString.substring(0, dateString.length - 1) + \"0000\" + \"Z\" : dateString.substring(0, dateString.length - 5) + \"Z\";\n}\n/**\n * Base64 encode.\n *\n * @param content -\n */\nexport function base64encode(content) {\n  return !isNode ? btoa(content) : Buffer.from(content).toString(\"base64\");\n}\n/**\n * Base64 decode.\n *\n * @param encodedString -\n */\nexport function base64decode(encodedString) {\n  return !isNode ? atob(encodedString) : Buffer.from(encodedString, \"base64\").toString();\n}\n/**\n * Generate a 64 bytes base64 block ID string.\n *\n * @param blockIndex -\n */\nexport function generateBlockID(blockIDPrefix, blockIndex) {\n  // To generate a 64 bytes base64 string, source string should be 48\n  const maxSourceStringLength = 48;\n  // A blob can have a maximum of 100,000 uncommitted blocks at any given time\n  const maxBlockIndexLength = 6;\n  const maxAllowedBlockIDPrefixLength = maxSourceStringLength - maxBlockIndexLength;\n  if (blockIDPrefix.length > maxAllowedBlockIDPrefixLength) {\n    blockIDPrefix = blockIDPrefix.slice(0, maxAllowedBlockIDPrefixLength);\n  }\n  const res = blockIDPrefix + padStart(blockIndex.toString(), maxSourceStringLength - blockIDPrefix.length, \"0\");\n  return base64encode(res);\n}\n/**\n * Delay specified time interval.\n *\n * @param timeInMs -\n * @param aborter -\n * @param abortError -\n */\nexport async function delay(timeInMs, aborter, abortError) {\n  return new Promise((resolve, reject) => {\n    /* eslint-disable-next-line prefer-const */\n    let timeout;\n    const abortHandler = () => {\n      if (timeout !== undefined) {\n        clearTimeout(timeout);\n      }\n      reject(abortError);\n    };\n    const resolveHandler = () => {\n      if (aborter !== undefined) {\n        aborter.removeEventListener(\"abort\", abortHandler);\n      }\n      resolve();\n    };\n    timeout = setTimeout(resolveHandler, timeInMs);\n    if (aborter !== undefined) {\n      aborter.addEventListener(\"abort\", abortHandler);\n    }\n  });\n}\n/**\n * String.prototype.padStart()\n *\n * @param currentString -\n * @param targetLength -\n * @param padString -\n */\nexport function padStart(currentString, targetLength) {\n  let padString = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \" \";\n  // @ts-expect-error: TS doesn't know this code needs to run downlevel sometimes\n  if (String.prototype.padStart) {\n    return currentString.padStart(targetLength, padString);\n  }\n  padString = padString || \" \";\n  if (currentString.length > targetLength) {\n    return currentString;\n  } else {\n    targetLength = targetLength - currentString.length;\n    if (targetLength > padString.length) {\n      padString += padString.repeat(targetLength / padString.length);\n    }\n    return padString.slice(0, targetLength) + currentString;\n  }\n}\nexport function sanitizeURL(url) {\n  let safeURL = url;\n  if (getURLParameter(safeURL, URLConstants.Parameters.SIGNATURE)) {\n    safeURL = setURLParameter(safeURL, URLConstants.Parameters.SIGNATURE, \"*****\");\n  }\n  return safeURL;\n}\nexport function sanitizeHeaders(originalHeader) {\n  const headers = new HttpHeaders();\n  for (const header of originalHeader.headersArray()) {\n    if (header.name.toLowerCase() === HeaderConstants.AUTHORIZATION.toLowerCase()) {\n      headers.set(header.name, \"*****\");\n    } else if (header.name.toLowerCase() === HeaderConstants.X_MS_COPY_SOURCE) {\n      headers.set(header.name, sanitizeURL(header.value));\n    } else {\n      headers.set(header.name, header.value);\n    }\n  }\n  return headers;\n}\n/**\n * If two strings are equal when compared case insensitive.\n *\n * @param str1 -\n * @param str2 -\n */\nexport function iEqual(str1, str2) {\n  return str1.toLocaleLowerCase() === str2.toLocaleLowerCase();\n}\n/**\n * Extracts account name from the url\n * @param url - url to extract the account name from\n * @returns with the account name\n */\nexport function getAccountNameFromUrl(url) {\n  const parsedUrl = URLBuilder.parse(url);\n  let accountName;\n  try {\n    if (parsedUrl.getHost().split(\".\")[1] === \"blob\") {\n      // `${defaultEndpointsProtocol}://${accountName}.blob.${endpointSuffix}`;\n      accountName = parsedUrl.getHost().split(\".\")[0];\n    } else if (isIpEndpointStyle(parsedUrl)) {\n      // IPv4/IPv6 address hosts... Example - http://192.0.0.10:10001/devstoreaccount1/\n      // Single word domain without a [dot] in the endpoint... Example - http://localhost:10001/devstoreaccount1/\n      // .getPath() -> /devstoreaccount1/\n      accountName = parsedUrl.getPath().split(\"/\")[1];\n    } else {\n      // Custom domain case: \"https://customdomain.com/containername/blob\".\n      accountName = \"\";\n    }\n    return accountName;\n  } catch (error) {\n    throw new Error(\"Unable to extract accountName with provided information.\");\n  }\n}\nexport function isIpEndpointStyle(parsedUrl) {\n  if (parsedUrl.getHost() === undefined) {\n    return false;\n  }\n  const host = parsedUrl.getHost() + (parsedUrl.getPort() === undefined ? \"\" : \":\" + parsedUrl.getPort());\n  // Case 1: Ipv6, use a broad regex to find out candidates whose host contains two ':'.\n  // Case 2: localhost(:port), use broad regex to match port part.\n  // Case 3: Ipv4, use broad regex which just check if host contains Ipv4.\n  // For valid host please refer to https://man7.org/linux/man-pages/man7/hostname.7.html.\n  return /^.*:.*:.*$|^localhost(:[0-9]+)?$|^(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])(\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])){3}(:[0-9]+)?$/.test(host) || parsedUrl.getPort() !== undefined && PathStylePorts.includes(parsedUrl.getPort());\n}\n/**\n * Convert Tags to encoded string.\n *\n * @param tags -\n */\nexport function toBlobTagsString(tags) {\n  if (tags === undefined) {\n    return undefined;\n  }\n  const tagPairs = [];\n  for (const key in tags) {\n    if (Object.prototype.hasOwnProperty.call(tags, key)) {\n      const value = tags[key];\n      tagPairs.push(`${encodeURIComponent(key)}=${encodeURIComponent(value)}`);\n    }\n  }\n  return tagPairs.join(\"&\");\n}\n/**\n * Convert Tags type to BlobTags.\n *\n * @param tags -\n */\nexport function toBlobTags(tags) {\n  if (tags === undefined) {\n    return undefined;\n  }\n  const res = {\n    blobTagSet: []\n  };\n  for (const key in tags) {\n    if (Object.prototype.hasOwnProperty.call(tags, key)) {\n      const value = tags[key];\n      res.blobTagSet.push({\n        key,\n        value\n      });\n    }\n  }\n  return res;\n}\n/**\n * Covert BlobTags to Tags type.\n *\n * @param tags -\n */\nexport function toTags(tags) {\n  if (tags === undefined) {\n    return undefined;\n  }\n  const res = {};\n  for (const blobTag of tags.blobTagSet) {\n    res[blobTag.key] = blobTag.value;\n  }\n  return res;\n}\n/**\n * Convert BlobQueryTextConfiguration to QuerySerialization type.\n *\n * @param textConfiguration -\n */\nexport function toQuerySerialization(textConfiguration) {\n  if (textConfiguration === undefined) {\n    return undefined;\n  }\n  switch (textConfiguration.kind) {\n    case \"csv\":\n      return {\n        format: {\n          type: \"delimited\",\n          delimitedTextConfiguration: {\n            columnSeparator: textConfiguration.columnSeparator || \",\",\n            fieldQuote: textConfiguration.fieldQuote || \"\",\n            recordSeparator: textConfiguration.recordSeparator,\n            escapeChar: textConfiguration.escapeCharacter || \"\",\n            headersPresent: textConfiguration.hasHeaders || false\n          }\n        }\n      };\n    case \"json\":\n      return {\n        format: {\n          type: \"json\",\n          jsonTextConfiguration: {\n            recordSeparator: textConfiguration.recordSeparator\n          }\n        }\n      };\n    case \"arrow\":\n      return {\n        format: {\n          type: \"arrow\",\n          arrowConfiguration: {\n            schema: textConfiguration.schema\n          }\n        }\n      };\n    case \"parquet\":\n      return {\n        format: {\n          type: \"parquet\"\n        }\n      };\n    default:\n      throw Error(\"Invalid BlobQueryTextConfiguration.\");\n  }\n}\nexport function parseObjectReplicationRecord(objectReplicationRecord) {\n  if (!objectReplicationRecord) {\n    return undefined;\n  }\n  if (\"policy-id\" in objectReplicationRecord) {\n    // If the dictionary contains a key with policy id, we are not required to do any parsing since\n    // the policy id should already be stored in the ObjectReplicationDestinationPolicyId.\n    return undefined;\n  }\n  const orProperties = [];\n  for (const key in objectReplicationRecord) {\n    const ids = key.split(\"_\");\n    const policyPrefix = \"or-\";\n    if (ids[0].startsWith(policyPrefix)) {\n      ids[0] = ids[0].substring(policyPrefix.length);\n    }\n    const rule = {\n      ruleId: ids[1],\n      replicationStatus: objectReplicationRecord[key]\n    };\n    const policyIndex = orProperties.findIndex(policy => policy.policyId === ids[0]);\n    if (policyIndex > -1) {\n      orProperties[policyIndex].rules.push(rule);\n    } else {\n      orProperties.push({\n        policyId: ids[0],\n        rules: [rule]\n      });\n    }\n  }\n  return orProperties;\n}\n/**\n * Attach a TokenCredential to an object.\n *\n * @param thing -\n * @param credential -\n */\nexport function attachCredential(thing, credential) {\n  thing.credential = credential;\n  return thing;\n}\nexport function httpAuthorizationToString(httpAuthorization) {\n  return httpAuthorization ? httpAuthorization.scheme + \" \" + httpAuthorization.value : undefined;\n}\nexport function BlobNameToString(name) {\n  if (name.encoded) {\n    return decodeURIComponent(name.content);\n  } else {\n    return name.content;\n  }\n}\nexport function ConvertInternalResponseOfListBlobFlat(internalResponse) {\n  return Object.assign(Object.assign({}, internalResponse), {\n    segment: {\n      blobItems: internalResponse.segment.blobItems.map(blobItemInteral => {\n        const blobItem = Object.assign(Object.assign({}, blobItemInteral), {\n          name: BlobNameToString(blobItemInteral.name)\n        });\n        return blobItem;\n      })\n    }\n  });\n}\nexport function ConvertInternalResponseOfListBlobHierarchy(internalResponse) {\n  var _a;\n  return Object.assign(Object.assign({}, internalResponse), {\n    segment: {\n      blobPrefixes: (_a = internalResponse.segment.blobPrefixes) === null || _a === void 0 ? void 0 : _a.map(blobPrefixInternal => {\n        const blobPrefix = {\n          name: BlobNameToString(blobPrefixInternal.name)\n        };\n        return blobPrefix;\n      }),\n      blobItems: internalResponse.segment.blobItems.map(blobItemInteral => {\n        const blobItem = Object.assign(Object.assign({}, blobItemInteral), {\n          name: BlobNameToString(blobItemInteral.name)\n        });\n        return blobItem;\n      })\n    }\n  });\n}\nfunction decodeBase64String(value) {\n  if (isNode) {\n    return Buffer.from(value, \"base64\");\n  } else {\n    const byteString = atob(value);\n    const arr = new Uint8Array(byteString.length);\n    for (let i = 0; i < byteString.length; i++) {\n      arr[i] = byteString.charCodeAt(i);\n    }\n    return arr;\n  }\n}\nfunction ParseBoolean(content) {\n  if (content === undefined) return undefined;\n  if (content === \"true\") return true;\n  if (content === \"false\") return false;\n  return undefined;\n}\nfunction ParseBlobName(blobNameInXML) {\n  if (blobNameInXML[\"$\"] !== undefined && blobNameInXML[\"#\"] !== undefined) {\n    return {\n      encoded: ParseBoolean(blobNameInXML[\"$\"][\"Encoded\"]),\n      content: blobNameInXML[\"#\"]\n    };\n  } else {\n    return {\n      encoded: false,\n      content: blobNameInXML\n    };\n  }\n}\nfunction ParseBlobProperties(blobPropertiesInXML) {\n  const blobProperties = blobPropertiesInXML;\n  if (blobPropertiesInXML[\"Creation-Time\"]) {\n    blobProperties.createdOn = new Date(blobPropertiesInXML[\"Creation-Time\"]);\n    delete blobProperties[\"Creation-Time\"];\n  }\n  if (blobPropertiesInXML[\"Last-Modified\"]) {\n    blobProperties.lastModified = new Date(blobPropertiesInXML[\"Last-Modified\"]);\n    delete blobProperties[\"Last-Modified\"];\n  }\n  if (blobPropertiesInXML[\"Etag\"]) {\n    blobProperties.etag = blobPropertiesInXML[\"Etag\"];\n    delete blobProperties[\"Etag\"];\n  }\n  if (blobPropertiesInXML[\"Content-Length\"]) {\n    blobProperties.contentLength = parseFloat(blobPropertiesInXML[\"Content-Length\"]);\n    delete blobProperties[\"Content-Length\"];\n  }\n  if (blobPropertiesInXML[\"Content-Type\"]) {\n    blobProperties.contentType = blobPropertiesInXML[\"Content-Type\"];\n    delete blobProperties[\"Content-Type\"];\n  }\n  if (blobPropertiesInXML[\"Content-Encoding\"]) {\n    blobProperties.contentEncoding = blobPropertiesInXML[\"Content-Encoding\"];\n    delete blobProperties[\"Content-Encoding\"];\n  }\n  if (blobPropertiesInXML[\"Content-Language\"]) {\n    blobProperties.contentLanguage = blobPropertiesInXML[\"Content-Language\"];\n    delete blobProperties[\"Content-Language\"];\n  }\n  if (blobPropertiesInXML[\"Content-MD5\"]) {\n    blobProperties.contentMD5 = decodeBase64String(blobPropertiesInXML[\"Content-MD5\"]);\n    delete blobProperties[\"Content-MD5\"];\n  }\n  if (blobPropertiesInXML[\"Content-Disposition\"]) {\n    blobProperties.contentDisposition = blobPropertiesInXML[\"Content-Disposition\"];\n    delete blobProperties[\"Content-Disposition\"];\n  }\n  if (blobPropertiesInXML[\"Cache-Control\"]) {\n    blobProperties.cacheControl = blobPropertiesInXML[\"Cache-Control\"];\n    delete blobProperties[\"Cache-Control\"];\n  }\n  if (blobPropertiesInXML[\"x-ms-blob-sequence-number\"]) {\n    blobProperties.blobSequenceNumber = parseFloat(blobPropertiesInXML[\"x-ms-blob-sequence-number\"]);\n    delete blobProperties[\"x-ms-blob-sequence-number\"];\n  }\n  if (blobPropertiesInXML[\"BlobType\"]) {\n    blobProperties.blobType = blobPropertiesInXML[\"BlobType\"];\n    delete blobProperties[\"BlobType\"];\n  }\n  if (blobPropertiesInXML[\"LeaseStatus\"]) {\n    blobProperties.leaseStatus = blobPropertiesInXML[\"LeaseStatus\"];\n    delete blobProperties[\"LeaseStatus\"];\n  }\n  if (blobPropertiesInXML[\"LeaseState\"]) {\n    blobProperties.leaseState = blobPropertiesInXML[\"LeaseState\"];\n    delete blobProperties[\"LeaseState\"];\n  }\n  if (blobPropertiesInXML[\"LeaseDuration\"]) {\n    blobProperties.leaseDuration = blobPropertiesInXML[\"LeaseDuration\"];\n    delete blobProperties[\"LeaseDuration\"];\n  }\n  if (blobPropertiesInXML[\"CopyId\"]) {\n    blobProperties.copyId = blobPropertiesInXML[\"CopyId\"];\n    delete blobProperties[\"CopyId\"];\n  }\n  if (blobPropertiesInXML[\"CopyStatus\"]) {\n    blobProperties.copyStatus = blobPropertiesInXML[\"CopyStatus\"];\n    delete blobProperties[\"CopyStatus\"];\n  }\n  if (blobPropertiesInXML[\"CopySource\"]) {\n    blobProperties.copySource = blobPropertiesInXML[\"CopySource\"];\n    delete blobProperties[\"CopySource\"];\n  }\n  if (blobPropertiesInXML[\"CopyProgress\"]) {\n    blobProperties.copyProgress = blobPropertiesInXML[\"CopyProgress\"];\n    delete blobProperties[\"CopyProgress\"];\n  }\n  if (blobPropertiesInXML[\"CopyCompletionTime\"]) {\n    blobProperties.copyCompletedOn = new Date(blobPropertiesInXML[\"CopyCompletionTime\"]);\n    delete blobProperties[\"CopyCompletionTime\"];\n  }\n  if (blobPropertiesInXML[\"CopyStatusDescription\"]) {\n    blobProperties.copyStatusDescription = blobPropertiesInXML[\"CopyStatusDescription\"];\n    delete blobProperties[\"CopyStatusDescription\"];\n  }\n  if (blobPropertiesInXML[\"ServerEncrypted\"]) {\n    blobProperties.serverEncrypted = ParseBoolean(blobPropertiesInXML[\"ServerEncrypted\"]);\n    delete blobProperties[\"ServerEncrypted\"];\n  }\n  if (blobPropertiesInXML[\"IncrementalCopy\"]) {\n    blobProperties.incrementalCopy = ParseBoolean(blobPropertiesInXML[\"IncrementalCopy\"]);\n    delete blobProperties[\"IncrementalCopy\"];\n  }\n  if (blobPropertiesInXML[\"DestinationSnapshot\"]) {\n    blobProperties.destinationSnapshot = blobPropertiesInXML[\"DestinationSnapshot\"];\n    delete blobProperties[\"DestinationSnapshot\"];\n  }\n  if (blobPropertiesInXML[\"DeletedTime\"]) {\n    blobProperties.deletedOn = new Date(blobPropertiesInXML[\"DeletedTime\"]);\n    delete blobProperties[\"DeletedTime\"];\n  }\n  if (blobPropertiesInXML[\"RemainingRetentionDays\"]) {\n    blobProperties.remainingRetentionDays = parseFloat(blobPropertiesInXML[\"RemainingRetentionDays\"]);\n    delete blobProperties[\"RemainingRetentionDays\"];\n  }\n  if (blobPropertiesInXML[\"AccessTier\"]) {\n    blobProperties.accessTier = blobPropertiesInXML[\"AccessTier\"];\n    delete blobProperties[\"AccessTier\"];\n  }\n  if (blobPropertiesInXML[\"AccessTierInferred\"]) {\n    blobProperties.accessTierInferred = ParseBoolean(blobPropertiesInXML[\"AccessTierInferred\"]);\n    delete blobProperties[\"AccessTierInferred\"];\n  }\n  if (blobPropertiesInXML[\"ArchiveStatus\"]) {\n    blobProperties.archiveStatus = blobPropertiesInXML[\"ArchiveStatus\"];\n    delete blobProperties[\"ArchiveStatus\"];\n  }\n  if (blobPropertiesInXML[\"CustomerProvidedKeySha256\"]) {\n    blobProperties.customerProvidedKeySha256 = blobPropertiesInXML[\"CustomerProvidedKeySha256\"];\n    delete blobProperties[\"CustomerProvidedKeySha256\"];\n  }\n  if (blobPropertiesInXML[\"EncryptionScope\"]) {\n    blobProperties.encryptionScope = blobPropertiesInXML[\"EncryptionScope\"];\n    delete blobProperties[\"EncryptionScope\"];\n  }\n  if (blobPropertiesInXML[\"AccessTierChangeTime\"]) {\n    blobProperties.accessTierChangedOn = new Date(blobPropertiesInXML[\"AccessTierChangeTime\"]);\n    delete blobProperties[\"AccessTierChangeTime\"];\n  }\n  if (blobPropertiesInXML[\"TagCount\"]) {\n    blobProperties.tagCount = parseFloat(blobPropertiesInXML[\"TagCount\"]);\n    delete blobProperties[\"TagCount\"];\n  }\n  if (blobPropertiesInXML[\"Expiry-Time\"]) {\n    blobProperties.expiresOn = new Date(blobPropertiesInXML[\"Expiry-Time\"]);\n    delete blobProperties[\"Expiry-Time\"];\n  }\n  if (blobPropertiesInXML[\"Sealed\"]) {\n    blobProperties.isSealed = ParseBoolean(blobPropertiesInXML[\"Sealed\"]);\n    delete blobProperties[\"Sealed\"];\n  }\n  if (blobPropertiesInXML[\"RehydratePriority\"]) {\n    blobProperties.rehydratePriority = blobPropertiesInXML[\"RehydratePriority\"];\n    delete blobProperties[\"RehydratePriority\"];\n  }\n  if (blobPropertiesInXML[\"LastAccessTime\"]) {\n    blobProperties.lastAccessedOn = new Date(blobPropertiesInXML[\"LastAccessTime\"]);\n    delete blobProperties[\"LastAccessTime\"];\n  }\n  if (blobPropertiesInXML[\"ImmutabilityPolicyUntilDate\"]) {\n    blobProperties.immutabilityPolicyExpiresOn = new Date(blobPropertiesInXML[\"ImmutabilityPolicyUntilDate\"]);\n    delete blobProperties[\"ImmutabilityPolicyUntilDate\"];\n  }\n  if (blobPropertiesInXML[\"ImmutabilityPolicyMode\"]) {\n    blobProperties.immutabilityPolicyMode = blobPropertiesInXML[\"ImmutabilityPolicyMode\"];\n    delete blobProperties[\"ImmutabilityPolicyMode\"];\n  }\n  if (blobPropertiesInXML[\"LegalHold\"]) {\n    blobProperties.legalHold = ParseBoolean(blobPropertiesInXML[\"LegalHold\"]);\n    delete blobProperties[\"LegalHold\"];\n  }\n  return blobProperties;\n}\nfunction ParseBlobItem(blobInXML) {\n  const blobItem = blobInXML;\n  blobItem.properties = ParseBlobProperties(blobInXML[\"Properties\"]);\n  delete blobItem[\"Properties\"];\n  blobItem.name = ParseBlobName(blobInXML[\"Name\"]);\n  delete blobItem[\"Name\"];\n  blobItem.deleted = ParseBoolean(blobInXML[\"Deleted\"]);\n  delete blobItem[\"Deleted\"];\n  if (blobInXML[\"Snapshot\"]) {\n    blobItem.snapshot = blobInXML[\"Snapshot\"];\n    delete blobItem[\"Snapshot\"];\n  }\n  if (blobInXML[\"VersionId\"]) {\n    blobItem.versionId = blobInXML[\"VersionId\"];\n    delete blobItem[\"VersionId\"];\n  }\n  if (blobInXML[\"IsCurrentVersion\"]) {\n    blobItem.isCurrentVersion = ParseBoolean(blobInXML[\"IsCurrentVersion\"]);\n    delete blobItem[\"IsCurrentVersion\"];\n  }\n  if (blobInXML[\"Metadata\"]) {\n    blobItem.metadata = blobInXML[\"Metadata\"];\n    delete blobItem[\"Metadata\"];\n  }\n  if (blobInXML[\"Tags\"]) {\n    blobItem.blobTags = ParseBlobTags(blobInXML[\"Tags\"]);\n    delete blobItem[\"Tags\"];\n  }\n  if (blobInXML[\"OrMetadata\"]) {\n    blobItem.objectReplicationMetadata = blobInXML[\"OrMetadata\"];\n    delete blobItem[\"OrMetadata\"];\n  }\n  if (blobInXML[\"HasVersionsOnly\"]) {\n    blobItem.hasVersionsOnly = ParseBoolean(blobInXML[\"HasVersionsOnly\"]);\n    delete blobItem[\"HasVersionsOnly\"];\n  }\n  return blobItem;\n}\nfunction ParseBlobPrefix(blobPrefixInXML) {\n  return {\n    name: ParseBlobName(blobPrefixInXML[\"Name\"])\n  };\n}\nfunction ParseBlobTag(blobTagInXML) {\n  return {\n    key: blobTagInXML[\"Key\"],\n    value: blobTagInXML[\"Value\"]\n  };\n}\nfunction ParseBlobTags(blobTagsInXML) {\n  if (blobTagsInXML === undefined || blobTagsInXML[\"TagSet\"] === undefined || blobTagsInXML[\"TagSet\"][\"Tag\"] === undefined) {\n    return undefined;\n  }\n  const blobTagSet = [];\n  if (blobTagsInXML[\"TagSet\"][\"Tag\"] instanceof Array) {\n    blobTagsInXML[\"TagSet\"][\"Tag\"].forEach(blobTagInXML => {\n      blobTagSet.push(ParseBlobTag(blobTagInXML));\n    });\n  } else {\n    blobTagSet.push(ParseBlobTag(blobTagsInXML[\"TagSet\"][\"Tag\"]));\n  }\n  return {\n    blobTagSet: blobTagSet\n  };\n}\nexport function ProcessBlobItems(blobArrayInXML) {\n  const blobItems = [];\n  if (blobArrayInXML instanceof Array) {\n    blobArrayInXML.forEach(blobInXML => {\n      blobItems.push(ParseBlobItem(blobInXML));\n    });\n  } else {\n    blobItems.push(ParseBlobItem(blobArrayInXML));\n  }\n  return blobItems;\n}\nexport function ProcessBlobPrefixes(blobPrefixesInXML) {\n  const blobPrefixes = [];\n  if (blobPrefixesInXML instanceof Array) {\n    blobPrefixesInXML.forEach(blobPrefixInXML => {\n      blobPrefixes.push(ParseBlobPrefix(blobPrefixInXML));\n    });\n  } else {\n    blobPrefixes.push(ParseBlobPrefix(blobPrefixesInXML));\n  }\n  return blobPrefixes;\n}\nexport function* ExtractPageRangeInfoItems(getPageRangesSegment) {\n  let pageRange = [];\n  let clearRange = [];\n  if (getPageRangesSegment.pageRange) pageRange = getPageRangesSegment.pageRange;\n  if (getPageRangesSegment.clearRange) clearRange = getPageRangesSegment.clearRange;\n  let pageRangeIndex = 0;\n  let clearRangeIndex = 0;\n  while (pageRangeIndex < pageRange.length && clearRangeIndex < clearRange.length) {\n    if (pageRange[pageRangeIndex].start < clearRange[clearRangeIndex].start) {\n      yield {\n        start: pageRange[pageRangeIndex].start,\n        end: pageRange[pageRangeIndex].end,\n        isClear: false\n      };\n      ++pageRangeIndex;\n    } else {\n      yield {\n        start: clearRange[clearRangeIndex].start,\n        end: clearRange[clearRangeIndex].end,\n        isClear: true\n      };\n      ++clearRangeIndex;\n    }\n  }\n  for (; pageRangeIndex < pageRange.length; ++pageRangeIndex) {\n    yield {\n      start: pageRange[pageRangeIndex].start,\n      end: pageRange[pageRangeIndex].end,\n      isClear: false\n    };\n  }\n  for (; clearRangeIndex < clearRange.length; ++clearRangeIndex) {\n    yield {\n      start: clearRange[clearRangeIndex].start,\n      end: clearRange[clearRangeIndex].end,\n      isClear: true\n    };\n  }\n}\n/**\n * Escape the blobName but keep path separator ('/').\n */\nexport function EscapePath(blobName) {\n  const split = blobName.split(\"/\");\n  for (let i = 0; i < split.length; i++) {\n    split[i] = encodeURIComponent(split[i]);\n  }\n  return split.join(\"/\");\n}","map":{"version":3,"mappings":"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","names":["HttpHeaders","isNode","URLBuilder","DevelopmentConnectionString","HeaderConstants","PathStylePorts","URLConstants","escapeURLPath","url","urlParsed","parse","path","getPath","escape","setPath","toString","getProxyUriFromDevConnString","connectionString","proxyUri","search","matchCredentials","split","element","trim","startsWith","match","getValueInConnString","argument","elements","extractConnectionStringParts","blobEndpoint","endsWith","slice","defaultEndpointsProtocol","accountName","accountKey","Buffer","from","endpointSuffix","protocol","toLowerCase","Error","length","kind","accountSas","getAccountNameFromUrl","text","encodeURIComponent","replace","appendToURLPath","name","setURLParameter","value","setQueryParameter","getURLParameter","getQueryParameterValue","setURLHost","host","setHost","getURLPath","getURLScheme","getScheme","getURLPathAndQuery","pathString","RangeError","queryString","getQuery","getURLQueries","substr","querySubStrings","filter","indexOfEqual","indexOf","lastIndexOfEqual","lastIndexOf","queries","querySubString","splitResults","key","appendToURLQuery","queryParts","query","setQuery","truncatedISO8061Date","date","withMilliseconds","dateString","toISOString","substring","base64encode","content","btoa","base64decode","encodedString","atob","generateBlockID","blockIDPrefix","blockIndex","maxSourceStringLength","maxBlockIndexLength","maxAllowedBlockIDPrefixLength","res","padStart","delay","timeInMs","aborter","abortError","Promise","resolve","reject","timeout","abortHandler","undefined","clearTimeout","resolveHandler","removeEventListener","setTimeout","addEventListener","currentString","targetLength","padString","String","prototype","repeat","sanitizeURL","safeURL","Parameters","SIGNATURE","sanitizeHeaders","originalHeader","headers","header","headersArray","AUTHORIZATION","set","X_MS_COPY_SOURCE","iEqual","str1","str2","toLocaleLowerCase","parsedUrl","getHost","isIpEndpointStyle","error","getPort","test","includes","toBlobTagsString","tags","tagPairs","Object","hasOwnProperty","call","push","join","toBlobTags","blobTagSet","toTags","blobTag","toQuerySerialization","textConfiguration","format","type","delimitedTextConfiguration","columnSeparator","fieldQuote","recordSeparator","escapeChar","escapeCharacter","headersPresent","hasHeaders","jsonTextConfiguration","arrowConfiguration","schema","parseObjectReplicationRecord","objectReplicationRecord","orProperties","ids","policyPrefix","rule","ruleId","replicationStatus","policyIndex","findIndex","policy","policyId","rules","attachCredential","thing","credential","httpAuthorizationToString","httpAuthorization","scheme","BlobNameToString","encoded","decodeURIComponent","ConvertInternalResponseOfListBlobFlat","internalResponse","segment","blobItems","map","blobItemInteral","blobItem","ConvertInternalResponseOfListBlobHierarchy","blobPrefixes","blobPrefixInternal","blobPrefix","decodeBase64String","byteString","arr","Uint8Array","i","charCodeAt","ParseBoolean","ParseBlobName","blobNameInXML","ParseBlobProperties","blobPropertiesInXML","blobProperties","createdOn","Date","lastModified","etag","contentLength","parseFloat","contentType","contentEncoding","contentLanguage","contentMD5","contentDisposition","cacheControl","blobSequenceNumber","blobType","leaseStatus","leaseState","leaseDuration","copyId","copyStatus","copySource","copyProgress","copyCompletedOn","copyStatusDescription","serverEncrypted","incrementalCopy","destinationSnapshot","deletedOn","remainingRetentionDays","accessTier","accessTierInferred","archiveStatus","customerProvidedKeySha256","encryptionScope","accessTierChangedOn","tagCount","expiresOn","isSealed","rehydratePriority","lastAccessedOn","immutabilityPolicyExpiresOn","immutabilityPolicyMode","legalHold","ParseBlobItem","blobInXML","properties","deleted","snapshot","versionId","isCurrentVersion","metadata","blobTags","ParseBlobTags","objectReplicationMetadata","hasVersionsOnly","ParseBlobPrefix","blobPrefixInXML","ParseBlobTag","blobTagInXML","blobTagsInXML","Array","forEach","ProcessBlobItems","blobArrayInXML","ProcessBlobPrefixes","blobPrefixesInXML","ExtractPageRangeInfoItems","getPageRangesSegment","pageRange","clearRange","pageRangeIndex","clearRangeIndex","start","end","isClear","EscapePath","blobName"],"sources":["/Users/yupenglei/Documents/geo-react/node_modules/@azure/storage-blob/src/utils/utils.common.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport { HttpHeaders, isNode, URLBuilder, TokenCredential } from \"@azure/core-http\";\n\nimport {\n  BlobQueryArrowConfiguration,\n  BlobQueryCsvTextConfiguration,\n  BlobQueryJsonTextConfiguration,\n  BlobQueryParquetConfiguration,\n} from \"../Clients\";\nimport {\n  QuerySerialization,\n  BlobTags,\n  BlobName,\n  ListBlobsFlatSegmentResponse,\n  ListBlobsHierarchySegmentResponse,\n  BlobItemInternal,\n  BlobPrefix,\n  BlobType,\n  LeaseStatusType,\n  LeaseStateType,\n  LeaseDurationType,\n  CopyStatusType,\n  AccessTier,\n  ArchiveStatus,\n  RehydratePriority,\n  BlobImmutabilityPolicyMode,\n  BlobTag,\n  PageRange,\n  ClearRange,\n  BlobPropertiesInternal,\n} from \"../generated/src/models\";\nimport {\n  DevelopmentConnectionString,\n  HeaderConstants,\n  PathStylePorts,\n  URLConstants,\n} from \"./constants\";\nimport {\n  Tags,\n  ObjectReplicationPolicy,\n  ObjectReplicationRule,\n  ObjectReplicationStatus,\n  HttpAuthorization,\n} from \"../models\";\nimport {\n  ListBlobsFlatSegmentResponseModel,\n  BlobItemInternal as BlobItemInternalModel,\n  ListBlobsHierarchySegmentResponseModel,\n  BlobPrefix as BlobPrefixModel,\n  PageBlobGetPageRangesDiffResponseModel,\n  PageRangeInfo,\n} from \"../generatedModels\";\n\n/**\n * Reserved URL characters must be properly escaped for Storage services like Blob or File.\n *\n * ## URL encode and escape strategy for JS SDKs\n *\n * When customers pass a URL string into XxxClient classes constructor, the URL string may already be URL encoded or not.\n * But before sending to Azure Storage server, the URL must be encoded. However, it's hard for a SDK to guess whether the URL\n * string has been encoded or not. We have 2 potential strategies, and chose strategy two for the XxxClient constructors.\n *\n * ### Strategy One: Assume the customer URL string is not encoded, and always encode URL string in SDK.\n *\n * This is what legacy V2 SDK does, simple and works for most of the cases.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b:\",\n *   SDK will encode it to \"http://account.blob.core.windows.net/con/b%3A\" and send to server. A blob named \"b:\" will be created.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b%3A\",\n *   SDK will encode it to \"http://account.blob.core.windows.net/con/b%253A\" and send to server. A blob named \"b%3A\" will be created.\n *\n * But this strategy will make it not possible to create a blob with \"?\" in it's name. Because when customer URL string is\n * \"http://account.blob.core.windows.net/con/blob?name\", the \"?name\" will be treated as URL paramter instead of blob name.\n * If customer URL string is \"http://account.blob.core.windows.net/con/blob%3Fname\", a blob named \"blob%3Fname\" will be created.\n * V2 SDK doesn't have this issue because it doesn't allow customer pass in a full URL, it accepts a separate blob name and encodeURIComponent for it.\n * We cannot accept a SDK cannot create a blob name with \"?\". So we implement strategy two:\n *\n * ### Strategy Two: SDK doesn't assume the URL has been encoded or not. It will just escape the special characters.\n *\n * This is what V10 Blob Go SDK does. It accepts a URL type in Go, and call url.EscapedPath() to escape the special chars unescaped.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b:\",\n *   SDK will escape \":\" like \"http://account.blob.core.windows.net/con/b%3A\" and send to server. A blob named \"b:\" will be created.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b%3A\",\n *   There is no special characters, so send \"http://account.blob.core.windows.net/con/b%3A\" to server. A blob named \"b:\" will be created.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b%253A\",\n *   There is no special characters, so send \"http://account.blob.core.windows.net/con/b%253A\" to server. A blob named \"b%3A\" will be created.\n *\n * This strategy gives us flexibility to create with any special characters. But \"%\" will be treated as a special characters, if the URL string\n * is not encoded, there shouldn't a \"%\" in the URL string, otherwise the URL is not a valid URL.\n * If customer needs to create a blob with \"%\" in it's blob name, use \"%25\" instead of \"%\". Just like above 3rd sample.\n * And following URL strings are invalid:\n * - \"http://account.blob.core.windows.net/con/b%\"\n * - \"http://account.blob.core.windows.net/con/b%2\"\n * - \"http://account.blob.core.windows.net/con/b%G\"\n *\n * Another special character is \"?\", use \"%2F\" to represent a blob name with \"?\" in a URL string.\n *\n * ### Strategy for containerName, blobName or other specific XXXName parameters in methods such as `containerClient.getBlobClient(blobName)`\n *\n * We will apply strategy one, and call encodeURIComponent for these parameters like blobName. Because what customers passes in is a plain name instead of a URL.\n *\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/naming-and-referencing-containers--blobs--and-metadata\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/naming-and-referencing-shares--directories--files--and-metadata\n *\n * @param url -\n */\nexport function escapeURLPath(url: string): string {\n  const urlParsed = URLBuilder.parse(url);\n\n  let path = urlParsed.getPath();\n  path = path || \"/\";\n\n  path = escape(path);\n  urlParsed.setPath(path);\n\n  return urlParsed.toString();\n}\n\nexport interface ConnectionString {\n  kind: \"AccountConnString\" | \"SASConnString\";\n  url: string;\n  accountName: string;\n  accountKey?: any;\n  accountSas?: string;\n  proxyUri?: string; // Development Connection String may contain proxyUri\n}\n\nfunction getProxyUriFromDevConnString(connectionString: string): string {\n  // Development Connection String\n  // https://docs.microsoft.com/en-us/azure/storage/common/storage-configure-connection-string#connect-to-the-emulator-account-using-the-well-known-account-name-and-key\n  let proxyUri = \"\";\n  if (connectionString.search(\"DevelopmentStorageProxyUri=\") !== -1) {\n    // CONNECTION_STRING=UseDevelopmentStorage=true;DevelopmentStorageProxyUri=http://myProxyUri\n    const matchCredentials = connectionString.split(\";\");\n    for (const element of matchCredentials) {\n      if (element.trim().startsWith(\"DevelopmentStorageProxyUri=\")) {\n        proxyUri = element.trim().match(\"DevelopmentStorageProxyUri=(.*)\")![1];\n      }\n    }\n  }\n  return proxyUri;\n}\n\nexport function getValueInConnString(\n  connectionString: string,\n  argument:\n    | \"BlobEndpoint\"\n    | \"AccountName\"\n    | \"AccountKey\"\n    | \"DefaultEndpointsProtocol\"\n    | \"EndpointSuffix\"\n    | \"SharedAccessSignature\"\n): string {\n  const elements = connectionString.split(\";\");\n  for (const element of elements) {\n    if (element.trim().startsWith(argument)) {\n      return element.trim().match(argument + \"=(.*)\")![1];\n    }\n  }\n  return \"\";\n}\n\n/**\n * Extracts the parts of an Azure Storage account connection string.\n *\n * @param connectionString - Connection string.\n * @returns String key value pairs of the storage account's url and credentials.\n */\nexport function extractConnectionStringParts(connectionString: string): ConnectionString {\n  let proxyUri = \"\";\n\n  if (connectionString.startsWith(\"UseDevelopmentStorage=true\")) {\n    // Development connection string\n    proxyUri = getProxyUriFromDevConnString(connectionString);\n    connectionString = DevelopmentConnectionString;\n  }\n\n  // Matching BlobEndpoint in the Account connection string\n  let blobEndpoint = getValueInConnString(connectionString, \"BlobEndpoint\");\n  // Slicing off '/' at the end if exists\n  // (The methods that use `extractConnectionStringParts` expect the url to not have `/` at the end)\n  blobEndpoint = blobEndpoint.endsWith(\"/\") ? blobEndpoint.slice(0, -1) : blobEndpoint;\n\n  if (\n    connectionString.search(\"DefaultEndpointsProtocol=\") !== -1 &&\n    connectionString.search(\"AccountKey=\") !== -1\n  ) {\n    // Account connection string\n\n    let defaultEndpointsProtocol = \"\";\n    let accountName = \"\";\n    let accountKey = Buffer.from(\"accountKey\", \"base64\");\n    let endpointSuffix = \"\";\n\n    // Get account name and key\n    accountName = getValueInConnString(connectionString, \"AccountName\");\n    accountKey = Buffer.from(getValueInConnString(connectionString, \"AccountKey\"), \"base64\");\n\n    if (!blobEndpoint) {\n      // BlobEndpoint is not present in the Account connection string\n      // Can be obtained from `${defaultEndpointsProtocol}://${accountName}.blob.${endpointSuffix}`\n\n      defaultEndpointsProtocol = getValueInConnString(connectionString, \"DefaultEndpointsProtocol\");\n      const protocol = defaultEndpointsProtocol!.toLowerCase();\n      if (protocol !== \"https\" && protocol !== \"http\") {\n        throw new Error(\n          \"Invalid DefaultEndpointsProtocol in the provided Connection String. Expecting 'https' or 'http'\"\n        );\n      }\n\n      endpointSuffix = getValueInConnString(connectionString, \"EndpointSuffix\");\n      if (!endpointSuffix) {\n        throw new Error(\"Invalid EndpointSuffix in the provided Connection String\");\n      }\n      blobEndpoint = `${defaultEndpointsProtocol}://${accountName}.blob.${endpointSuffix}`;\n    }\n\n    if (!accountName) {\n      throw new Error(\"Invalid AccountName in the provided Connection String\");\n    } else if (accountKey.length === 0) {\n      throw new Error(\"Invalid AccountKey in the provided Connection String\");\n    }\n\n    return {\n      kind: \"AccountConnString\",\n      url: blobEndpoint,\n      accountName,\n      accountKey,\n      proxyUri,\n    };\n  } else {\n    // SAS connection string\n\n    const accountSas = getValueInConnString(connectionString, \"SharedAccessSignature\");\n    const accountName = getAccountNameFromUrl(blobEndpoint);\n    if (!blobEndpoint) {\n      throw new Error(\"Invalid BlobEndpoint in the provided SAS Connection String\");\n    } else if (!accountSas) {\n      throw new Error(\"Invalid SharedAccessSignature in the provided SAS Connection String\");\n    }\n\n    return { kind: \"SASConnString\", url: blobEndpoint, accountName, accountSas };\n  }\n}\n\n/**\n * Internal escape method implemented Strategy Two mentioned in escapeURL() description.\n *\n * @param text -\n */\nfunction escape(text: string): string {\n  return encodeURIComponent(text)\n    .replace(/%2F/g, \"/\") // Don't escape for \"/\"\n    .replace(/'/g, \"%27\") // Escape for \"'\"\n    .replace(/\\+/g, \"%20\")\n    .replace(/%25/g, \"%\"); // Revert encoded \"%\"\n}\n\n/**\n * Append a string to URL path. Will remove duplicated \"/\" in front of the string\n * when URL path ends with a \"/\".\n *\n * @param url - Source URL string\n * @param name - String to be appended to URL\n * @returns An updated URL string\n */\nexport function appendToURLPath(url: string, name: string): string {\n  const urlParsed = URLBuilder.parse(url);\n\n  let path = urlParsed.getPath();\n  path = path ? (path.endsWith(\"/\") ? `${path}${name}` : `${path}/${name}`) : name;\n  urlParsed.setPath(path);\n\n  return urlParsed.toString();\n}\n\n/**\n * Set URL parameter name and value. If name exists in URL parameters, old value\n * will be replaced by name key. If not provide value, the parameter will be deleted.\n *\n * @param url - Source URL string\n * @param name - Parameter name\n * @param value - Parameter value\n * @returns An updated URL string\n */\nexport function setURLParameter(url: string, name: string, value?: string): string {\n  const urlParsed = URLBuilder.parse(url);\n  urlParsed.setQueryParameter(name, value);\n  return urlParsed.toString();\n}\n\n/**\n * Get URL parameter by name.\n *\n * @param url -\n * @param name -\n */\nexport function getURLParameter(url: string, name: string): string | string[] | undefined {\n  const urlParsed = URLBuilder.parse(url);\n  return urlParsed.getQueryParameterValue(name);\n}\n\n/**\n * Set URL host.\n *\n * @param url - Source URL string\n * @param host - New host string\n * @returns An updated URL string\n */\nexport function setURLHost(url: string, host: string): string {\n  const urlParsed = URLBuilder.parse(url);\n  urlParsed.setHost(host);\n  return urlParsed.toString();\n}\n\n/**\n * Get URL path from an URL string.\n *\n * @param url - Source URL string\n */\nexport function getURLPath(url: string): string | undefined {\n  const urlParsed = URLBuilder.parse(url);\n  return urlParsed.getPath();\n}\n\n/**\n * Get URL scheme from an URL string.\n *\n * @param url - Source URL string\n */\nexport function getURLScheme(url: string): string | undefined {\n  const urlParsed = URLBuilder.parse(url);\n  return urlParsed.getScheme();\n}\n\n/**\n * Get URL path and query from an URL string.\n *\n * @param url - Source URL string\n */\nexport function getURLPathAndQuery(url: string): string | undefined {\n  const urlParsed = URLBuilder.parse(url);\n  const pathString = urlParsed.getPath();\n  if (!pathString) {\n    throw new RangeError(\"Invalid url without valid path.\");\n  }\n\n  let queryString = urlParsed.getQuery() || \"\";\n  queryString = queryString.trim();\n  if (queryString !== \"\") {\n    queryString = queryString.startsWith(\"?\") ? queryString : `?${queryString}`; // Ensure query string start with '?'\n  }\n\n  return `${pathString}${queryString}`;\n}\n\n/**\n * Get URL query key value pairs from an URL string.\n *\n * @param url -\n */\nexport function getURLQueries(url: string): { [key: string]: string } {\n  let queryString = URLBuilder.parse(url).getQuery();\n  if (!queryString) {\n    return {};\n  }\n\n  queryString = queryString.trim();\n  queryString = queryString.startsWith(\"?\") ? queryString.substr(1) : queryString;\n\n  let querySubStrings: string[] = queryString.split(\"&\");\n  querySubStrings = querySubStrings.filter((value: string) => {\n    const indexOfEqual = value.indexOf(\"=\");\n    const lastIndexOfEqual = value.lastIndexOf(\"=\");\n    return (\n      indexOfEqual > 0 && indexOfEqual === lastIndexOfEqual && lastIndexOfEqual < value.length - 1\n    );\n  });\n\n  const queries: { [key: string]: string } = {};\n  for (const querySubString of querySubStrings) {\n    const splitResults = querySubString.split(\"=\");\n    const key: string = splitResults[0];\n    const value: string = splitResults[1];\n    queries[key] = value;\n  }\n\n  return queries;\n}\n\n/**\n * Append a string to URL query.\n *\n * @param url - Source URL string.\n * @param queryParts - String to be appended to the URL query.\n * @returns An updated URL string.\n */\nexport function appendToURLQuery(url: string, queryParts: string): string {\n  const urlParsed = URLBuilder.parse(url);\n\n  let query = urlParsed.getQuery();\n  if (query) {\n    query += \"&\" + queryParts;\n  } else {\n    query = queryParts;\n  }\n\n  urlParsed.setQuery(query);\n  return urlParsed.toString();\n}\n\n/**\n * Rounds a date off to seconds.\n *\n * @param date -\n * @param withMilliseconds - If true, YYYY-MM-DDThh:mm:ss.fffffffZ will be returned;\n *                                          If false, YYYY-MM-DDThh:mm:ssZ will be returned.\n * @returns Date string in ISO8061 format, with or without 7 milliseconds component\n */\nexport function truncatedISO8061Date(date: Date, withMilliseconds: boolean = true): string {\n  // Date.toISOString() will return like \"2018-10-29T06:34:36.139Z\"\n  const dateString = date.toISOString();\n\n  return withMilliseconds\n    ? dateString.substring(0, dateString.length - 1) + \"0000\" + \"Z\"\n    : dateString.substring(0, dateString.length - 5) + \"Z\";\n}\n\n/**\n * Base64 encode.\n *\n * @param content -\n */\nexport function base64encode(content: string): string {\n  return !isNode ? btoa(content) : Buffer.from(content).toString(\"base64\");\n}\n\n/**\n * Base64 decode.\n *\n * @param encodedString -\n */\nexport function base64decode(encodedString: string): string {\n  return !isNode ? atob(encodedString) : Buffer.from(encodedString, \"base64\").toString();\n}\n\n/**\n * Generate a 64 bytes base64 block ID string.\n *\n * @param blockIndex -\n */\nexport function generateBlockID(blockIDPrefix: string, blockIndex: number): string {\n  // To generate a 64 bytes base64 string, source string should be 48\n  const maxSourceStringLength = 48;\n\n  // A blob can have a maximum of 100,000 uncommitted blocks at any given time\n  const maxBlockIndexLength = 6;\n\n  const maxAllowedBlockIDPrefixLength = maxSourceStringLength - maxBlockIndexLength;\n\n  if (blockIDPrefix.length > maxAllowedBlockIDPrefixLength) {\n    blockIDPrefix = blockIDPrefix.slice(0, maxAllowedBlockIDPrefixLength);\n  }\n  const res =\n    blockIDPrefix +\n    padStart(blockIndex.toString(), maxSourceStringLength - blockIDPrefix.length, \"0\");\n  return base64encode(res);\n}\n\n/**\n * Delay specified time interval.\n *\n * @param timeInMs -\n * @param aborter -\n * @param abortError -\n */\nexport async function delay(\n  timeInMs: number,\n  aborter?: AbortSignalLike,\n  abortError?: Error\n): Promise<void> {\n  return new Promise<void>((resolve, reject) => {\n    /* eslint-disable-next-line prefer-const */\n    let timeout: any;\n\n    const abortHandler = () => {\n      if (timeout !== undefined) {\n        clearTimeout(timeout);\n      }\n      reject(abortError);\n    };\n\n    const resolveHandler = () => {\n      if (aborter !== undefined) {\n        aborter.removeEventListener(\"abort\", abortHandler);\n      }\n      resolve();\n    };\n\n    timeout = setTimeout(resolveHandler, timeInMs);\n\n    if (aborter !== undefined) {\n      aborter.addEventListener(\"abort\", abortHandler);\n    }\n  });\n}\n\n/**\n * String.prototype.padStart()\n *\n * @param currentString -\n * @param targetLength -\n * @param padString -\n */\nexport function padStart(\n  currentString: string,\n  targetLength: number,\n  padString: string = \" \"\n): string {\n  // @ts-expect-error: TS doesn't know this code needs to run downlevel sometimes\n  if (String.prototype.padStart) {\n    return currentString.padStart(targetLength, padString);\n  }\n\n  padString = padString || \" \";\n  if (currentString.length > targetLength) {\n    return currentString;\n  } else {\n    targetLength = targetLength - currentString.length;\n    if (targetLength > padString.length) {\n      padString += padString.repeat(targetLength / padString.length);\n    }\n    return padString.slice(0, targetLength) + currentString;\n  }\n}\n\nexport function sanitizeURL(url: string): string {\n  let safeURL: string = url;\n  if (getURLParameter(safeURL, URLConstants.Parameters.SIGNATURE)) {\n    safeURL = setURLParameter(safeURL, URLConstants.Parameters.SIGNATURE, \"*****\");\n  }\n\n  return safeURL;\n}\n\nexport function sanitizeHeaders(originalHeader: HttpHeaders): HttpHeaders {\n  const headers: HttpHeaders = new HttpHeaders();\n  for (const header of originalHeader.headersArray()) {\n    if (header.name.toLowerCase() === HeaderConstants.AUTHORIZATION.toLowerCase()) {\n      headers.set(header.name, \"*****\");\n    } else if (header.name.toLowerCase() === HeaderConstants.X_MS_COPY_SOURCE) {\n      headers.set(header.name, sanitizeURL(header.value));\n    } else {\n      headers.set(header.name, header.value);\n    }\n  }\n\n  return headers;\n}\n/**\n * If two strings are equal when compared case insensitive.\n *\n * @param str1 -\n * @param str2 -\n */\nexport function iEqual(str1: string, str2: string): boolean {\n  return str1.toLocaleLowerCase() === str2.toLocaleLowerCase();\n}\n\n/**\n * Extracts account name from the url\n * @param url - url to extract the account name from\n * @returns with the account name\n */\nexport function getAccountNameFromUrl(url: string): string {\n  const parsedUrl: URLBuilder = URLBuilder.parse(url);\n  let accountName;\n  try {\n    if (parsedUrl.getHost()!.split(\".\")[1] === \"blob\") {\n      // `${defaultEndpointsProtocol}://${accountName}.blob.${endpointSuffix}`;\n      accountName = parsedUrl.getHost()!.split(\".\")[0];\n    } else if (isIpEndpointStyle(parsedUrl)) {\n      // IPv4/IPv6 address hosts... Example - http://192.0.0.10:10001/devstoreaccount1/\n      // Single word domain without a [dot] in the endpoint... Example - http://localhost:10001/devstoreaccount1/\n      // .getPath() -> /devstoreaccount1/\n      accountName = parsedUrl.getPath()!.split(\"/\")[1];\n    } else {\n      // Custom domain case: \"https://customdomain.com/containername/blob\".\n      accountName = \"\";\n    }\n    return accountName;\n  } catch (error: any) {\n    throw new Error(\"Unable to extract accountName with provided information.\");\n  }\n}\n\nexport function isIpEndpointStyle(parsedUrl: URLBuilder): boolean {\n  if (parsedUrl.getHost() === undefined) {\n    return false;\n  }\n\n  const host =\n    parsedUrl.getHost()! + (parsedUrl.getPort() === undefined ? \"\" : \":\" + parsedUrl.getPort());\n\n  // Case 1: Ipv6, use a broad regex to find out candidates whose host contains two ':'.\n  // Case 2: localhost(:port), use broad regex to match port part.\n  // Case 3: Ipv4, use broad regex which just check if host contains Ipv4.\n  // For valid host please refer to https://man7.org/linux/man-pages/man7/hostname.7.html.\n  return (\n    /^.*:.*:.*$|^localhost(:[0-9]+)?$|^(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])(\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])){3}(:[0-9]+)?$/.test(\n      host\n    ) ||\n    (parsedUrl.getPort() !== undefined && PathStylePorts.includes(parsedUrl.getPort()!))\n  );\n}\n\n/**\n * Convert Tags to encoded string.\n *\n * @param tags -\n */\nexport function toBlobTagsString(tags?: Tags): string | undefined {\n  if (tags === undefined) {\n    return undefined;\n  }\n\n  const tagPairs = [];\n  for (const key in tags) {\n    if (Object.prototype.hasOwnProperty.call(tags, key)) {\n      const value = tags[key];\n      tagPairs.push(`${encodeURIComponent(key)}=${encodeURIComponent(value)}`);\n    }\n  }\n\n  return tagPairs.join(\"&\");\n}\n\n/**\n * Convert Tags type to BlobTags.\n *\n * @param tags -\n */\nexport function toBlobTags(tags?: Tags): BlobTags | undefined {\n  if (tags === undefined) {\n    return undefined;\n  }\n\n  const res: BlobTags = {\n    blobTagSet: [],\n  };\n\n  for (const key in tags) {\n    if (Object.prototype.hasOwnProperty.call(tags, key)) {\n      const value = tags[key];\n      res.blobTagSet.push({\n        key,\n        value,\n      });\n    }\n  }\n  return res;\n}\n\n/**\n * Covert BlobTags to Tags type.\n *\n * @param tags -\n */\nexport function toTags(tags?: BlobTags): Tags | undefined {\n  if (tags === undefined) {\n    return undefined;\n  }\n\n  const res: Tags = {};\n  for (const blobTag of tags.blobTagSet) {\n    res[blobTag.key] = blobTag.value;\n  }\n  return res;\n}\n\n/**\n * Convert BlobQueryTextConfiguration to QuerySerialization type.\n *\n * @param textConfiguration -\n */\nexport function toQuerySerialization(\n  textConfiguration?:\n    | BlobQueryJsonTextConfiguration\n    | BlobQueryCsvTextConfiguration\n    | BlobQueryArrowConfiguration\n    | BlobQueryParquetConfiguration\n): QuerySerialization | undefined {\n  if (textConfiguration === undefined) {\n    return undefined;\n  }\n\n  switch (textConfiguration.kind) {\n    case \"csv\":\n      return {\n        format: {\n          type: \"delimited\",\n          delimitedTextConfiguration: {\n            columnSeparator: textConfiguration.columnSeparator || \",\",\n            fieldQuote: textConfiguration.fieldQuote || \"\",\n            recordSeparator: textConfiguration.recordSeparator,\n            escapeChar: textConfiguration.escapeCharacter || \"\",\n            headersPresent: textConfiguration.hasHeaders || false,\n          },\n        },\n      };\n    case \"json\":\n      return {\n        format: {\n          type: \"json\",\n          jsonTextConfiguration: {\n            recordSeparator: textConfiguration.recordSeparator,\n          },\n        },\n      };\n    case \"arrow\":\n      return {\n        format: {\n          type: \"arrow\",\n          arrowConfiguration: {\n            schema: textConfiguration.schema,\n          },\n        },\n      };\n    case \"parquet\":\n      return {\n        format: {\n          type: \"parquet\",\n        },\n      };\n\n    default:\n      throw Error(\"Invalid BlobQueryTextConfiguration.\");\n  }\n}\n\nexport function parseObjectReplicationRecord(\n  objectReplicationRecord?: Record<string, string>\n): ObjectReplicationPolicy[] | undefined {\n  if (!objectReplicationRecord) {\n    return undefined;\n  }\n\n  if (\"policy-id\" in objectReplicationRecord) {\n    // If the dictionary contains a key with policy id, we are not required to do any parsing since\n    // the policy id should already be stored in the ObjectReplicationDestinationPolicyId.\n    return undefined;\n  }\n\n  const orProperties: ObjectReplicationPolicy[] = [];\n  for (const key in objectReplicationRecord) {\n    const ids = key.split(\"_\");\n    const policyPrefix = \"or-\";\n    if (ids[0].startsWith(policyPrefix)) {\n      ids[0] = ids[0].substring(policyPrefix.length);\n    }\n    const rule: ObjectReplicationRule = {\n      ruleId: ids[1],\n      replicationStatus: objectReplicationRecord[key] as ObjectReplicationStatus,\n    };\n    const policyIndex = orProperties.findIndex((policy) => policy.policyId === ids[0]);\n    if (policyIndex > -1) {\n      orProperties[policyIndex].rules.push(rule);\n    } else {\n      orProperties.push({\n        policyId: ids[0],\n        rules: [rule],\n      });\n    }\n  }\n  return orProperties;\n}\n\n/**\n * Attach a TokenCredential to an object.\n *\n * @param thing -\n * @param credential -\n */\nexport function attachCredential<T>(thing: T, credential: TokenCredential): T {\n  (thing as any).credential = credential;\n  return thing;\n}\n\nexport function httpAuthorizationToString(\n  httpAuthorization?: HttpAuthorization\n): string | undefined {\n  return httpAuthorization ? httpAuthorization.scheme + \" \" + httpAuthorization.value : undefined;\n}\n\nexport function BlobNameToString(name: BlobName): string {\n  if (name.encoded) {\n    return decodeURIComponent(name.content!);\n  } else {\n    return name.content!;\n  }\n}\n\nexport function ConvertInternalResponseOfListBlobFlat(\n  internalResponse: ListBlobsFlatSegmentResponse\n): ListBlobsFlatSegmentResponseModel {\n  return {\n    ...internalResponse,\n    segment: {\n      blobItems: internalResponse.segment.blobItems.map((blobItemInteral) => {\n        const blobItem: BlobItemInternalModel = {\n          ...blobItemInteral,\n          name: BlobNameToString(blobItemInteral.name),\n        };\n        return blobItem;\n      }),\n    },\n  };\n}\n\nexport function ConvertInternalResponseOfListBlobHierarchy(\n  internalResponse: ListBlobsHierarchySegmentResponse\n): ListBlobsHierarchySegmentResponseModel {\n  return {\n    ...internalResponse,\n    segment: {\n      blobPrefixes: internalResponse.segment.blobPrefixes?.map((blobPrefixInternal) => {\n        const blobPrefix: BlobPrefixModel = {\n          name: BlobNameToString(blobPrefixInternal.name),\n        };\n        return blobPrefix;\n      }),\n      blobItems: internalResponse.segment.blobItems.map((blobItemInteral) => {\n        const blobItem: BlobItemInternalModel = {\n          ...blobItemInteral,\n          name: BlobNameToString(blobItemInteral.name),\n        };\n        return blobItem;\n      }),\n    },\n  };\n}\n\nfunction decodeBase64String(value: string): Uint8Array {\n  if (isNode) {\n    return Buffer.from(value, \"base64\");\n  } else {\n    const byteString = atob(value);\n    const arr = new Uint8Array(byteString.length);\n    for (let i = 0; i < byteString.length; i++) {\n      arr[i] = byteString.charCodeAt(i);\n    }\n    return arr;\n  }\n}\n\nfunction ParseBoolean(content: any) {\n  if (content === undefined) return undefined;\n  if (content === \"true\") return true;\n  if (content === \"false\") return false;\n  return undefined;\n}\n\nfunction ParseBlobName(blobNameInXML: any): BlobName {\n  if (blobNameInXML[\"$\"] !== undefined && blobNameInXML[\"#\"] !== undefined) {\n    return {\n      encoded: ParseBoolean(blobNameInXML[\"$\"][\"Encoded\"]),\n      content: blobNameInXML[\"#\"] as string,\n    };\n  } else {\n    return {\n      encoded: false,\n      content: blobNameInXML as string,\n    };\n  }\n}\n\nfunction ParseBlobProperties(blobPropertiesInXML: any): BlobPropertiesInternal {\n  const blobProperties = blobPropertiesInXML;\n  if (blobPropertiesInXML[\"Creation-Time\"]) {\n    blobProperties.createdOn = new Date(blobPropertiesInXML[\"Creation-Time\"] as string);\n    delete blobProperties[\"Creation-Time\"];\n  }\n\n  if (blobPropertiesInXML[\"Last-Modified\"]) {\n    blobProperties.lastModified = new Date(blobPropertiesInXML[\"Last-Modified\"] as string);\n    delete blobProperties[\"Last-Modified\"];\n  }\n\n  if (blobPropertiesInXML[\"Etag\"]) {\n    blobProperties.etag = blobPropertiesInXML[\"Etag\"] as string;\n    delete blobProperties[\"Etag\"];\n  }\n\n  if (blobPropertiesInXML[\"Content-Length\"]) {\n    blobProperties.contentLength = parseFloat(blobPropertiesInXML[\"Content-Length\"] as string);\n    delete blobProperties[\"Content-Length\"];\n  }\n\n  if (blobPropertiesInXML[\"Content-Type\"]) {\n    blobProperties.contentType = blobPropertiesInXML[\"Content-Type\"] as string;\n    delete blobProperties[\"Content-Type\"];\n  }\n\n  if (blobPropertiesInXML[\"Content-Encoding\"]) {\n    blobProperties.contentEncoding = blobPropertiesInXML[\"Content-Encoding\"] as string;\n    delete blobProperties[\"Content-Encoding\"];\n  }\n\n  if (blobPropertiesInXML[\"Content-Language\"]) {\n    blobProperties.contentLanguage = blobPropertiesInXML[\"Content-Language\"] as string;\n    delete blobProperties[\"Content-Language\"];\n  }\n\n  if (blobPropertiesInXML[\"Content-MD5\"]) {\n    blobProperties.contentMD5 = decodeBase64String(blobPropertiesInXML[\"Content-MD5\"] as string);\n    delete blobProperties[\"Content-MD5\"];\n  }\n\n  if (blobPropertiesInXML[\"Content-Disposition\"]) {\n    blobProperties.contentDisposition = blobPropertiesInXML[\"Content-Disposition\"] as string;\n    delete blobProperties[\"Content-Disposition\"];\n  }\n\n  if (blobPropertiesInXML[\"Cache-Control\"]) {\n    blobProperties.cacheControl = blobPropertiesInXML[\"Cache-Control\"] as string;\n    delete blobProperties[\"Cache-Control\"];\n  }\n\n  if (blobPropertiesInXML[\"x-ms-blob-sequence-number\"]) {\n    blobProperties.blobSequenceNumber = parseFloat(\n      blobPropertiesInXML[\"x-ms-blob-sequence-number\"] as string\n    );\n    delete blobProperties[\"x-ms-blob-sequence-number\"];\n  }\n\n  if (blobPropertiesInXML[\"BlobType\"]) {\n    blobProperties.blobType = blobPropertiesInXML[\"BlobType\"] as BlobType;\n    delete blobProperties[\"BlobType\"];\n  }\n\n  if (blobPropertiesInXML[\"LeaseStatus\"]) {\n    blobProperties.leaseStatus = blobPropertiesInXML[\"LeaseStatus\"] as LeaseStatusType;\n    delete blobProperties[\"LeaseStatus\"];\n  }\n\n  if (blobPropertiesInXML[\"LeaseState\"]) {\n    blobProperties.leaseState = blobPropertiesInXML[\"LeaseState\"] as LeaseStateType;\n    delete blobProperties[\"LeaseState\"];\n  }\n\n  if (blobPropertiesInXML[\"LeaseDuration\"]) {\n    blobProperties.leaseDuration = blobPropertiesInXML[\"LeaseDuration\"] as LeaseDurationType;\n    delete blobProperties[\"LeaseDuration\"];\n  }\n\n  if (blobPropertiesInXML[\"CopyId\"]) {\n    blobProperties.copyId = blobPropertiesInXML[\"CopyId\"] as string;\n    delete blobProperties[\"CopyId\"];\n  }\n\n  if (blobPropertiesInXML[\"CopyStatus\"]) {\n    blobProperties.copyStatus = blobPropertiesInXML[\"CopyStatus\"] as CopyStatusType;\n    delete blobProperties[\"CopyStatus\"];\n  }\n\n  if (blobPropertiesInXML[\"CopySource\"]) {\n    blobProperties.copySource = blobPropertiesInXML[\"CopySource\"] as string;\n    delete blobProperties[\"CopySource\"];\n  }\n\n  if (blobPropertiesInXML[\"CopyProgress\"]) {\n    blobProperties.copyProgress = blobPropertiesInXML[\"CopyProgress\"] as string;\n    delete blobProperties[\"CopyProgress\"];\n  }\n\n  if (blobPropertiesInXML[\"CopyCompletionTime\"]) {\n    blobProperties.copyCompletedOn = new Date(blobPropertiesInXML[\"CopyCompletionTime\"] as string);\n    delete blobProperties[\"CopyCompletionTime\"];\n  }\n\n  if (blobPropertiesInXML[\"CopyStatusDescription\"]) {\n    blobProperties.copyStatusDescription = blobPropertiesInXML[\"CopyStatusDescription\"] as string;\n    delete blobProperties[\"CopyStatusDescription\"];\n  }\n\n  if (blobPropertiesInXML[\"ServerEncrypted\"]) {\n    blobProperties.serverEncrypted = ParseBoolean(blobPropertiesInXML[\"ServerEncrypted\"]);\n    delete blobProperties[\"ServerEncrypted\"];\n  }\n\n  if (blobPropertiesInXML[\"IncrementalCopy\"]) {\n    blobProperties.incrementalCopy = ParseBoolean(blobPropertiesInXML[\"IncrementalCopy\"]);\n    delete blobProperties[\"IncrementalCopy\"];\n  }\n\n  if (blobPropertiesInXML[\"DestinationSnapshot\"]) {\n    blobProperties.destinationSnapshot = blobPropertiesInXML[\"DestinationSnapshot\"] as string;\n    delete blobProperties[\"DestinationSnapshot\"];\n  }\n\n  if (blobPropertiesInXML[\"DeletedTime\"]) {\n    blobProperties.deletedOn = new Date(blobPropertiesInXML[\"DeletedTime\"] as string);\n    delete blobProperties[\"DeletedTime\"];\n  }\n\n  if (blobPropertiesInXML[\"RemainingRetentionDays\"]) {\n    blobProperties.remainingRetentionDays = parseFloat(\n      blobPropertiesInXML[\"RemainingRetentionDays\"] as string\n    );\n    delete blobProperties[\"RemainingRetentionDays\"];\n  }\n\n  if (blobPropertiesInXML[\"AccessTier\"]) {\n    blobProperties.accessTier = blobPropertiesInXML[\"AccessTier\"] as AccessTier;\n    delete blobProperties[\"AccessTier\"];\n  }\n\n  if (blobPropertiesInXML[\"AccessTierInferred\"]) {\n    blobProperties.accessTierInferred = ParseBoolean(blobPropertiesInXML[\"AccessTierInferred\"]);\n    delete blobProperties[\"AccessTierInferred\"];\n  }\n\n  if (blobPropertiesInXML[\"ArchiveStatus\"]) {\n    blobProperties.archiveStatus = blobPropertiesInXML[\"ArchiveStatus\"] as ArchiveStatus;\n    delete blobProperties[\"ArchiveStatus\"];\n  }\n\n  if (blobPropertiesInXML[\"CustomerProvidedKeySha256\"]) {\n    blobProperties.customerProvidedKeySha256 = blobPropertiesInXML[\n      \"CustomerProvidedKeySha256\"\n    ] as string;\n    delete blobProperties[\"CustomerProvidedKeySha256\"];\n  }\n\n  if (blobPropertiesInXML[\"EncryptionScope\"]) {\n    blobProperties.encryptionScope = blobPropertiesInXML[\"EncryptionScope\"] as string;\n    delete blobProperties[\"EncryptionScope\"];\n  }\n\n  if (blobPropertiesInXML[\"AccessTierChangeTime\"]) {\n    blobProperties.accessTierChangedOn = new Date(\n      blobPropertiesInXML[\"AccessTierChangeTime\"] as string\n    );\n    delete blobProperties[\"AccessTierChangeTime\"];\n  }\n\n  if (blobPropertiesInXML[\"TagCount\"]) {\n    blobProperties.tagCount = parseFloat(blobPropertiesInXML[\"TagCount\"] as string);\n    delete blobProperties[\"TagCount\"];\n  }\n\n  if (blobPropertiesInXML[\"Expiry-Time\"]) {\n    blobProperties.expiresOn = new Date(blobPropertiesInXML[\"Expiry-Time\"] as string);\n    delete blobProperties[\"Expiry-Time\"];\n  }\n\n  if (blobPropertiesInXML[\"Sealed\"]) {\n    blobProperties.isSealed = ParseBoolean(blobPropertiesInXML[\"Sealed\"]);\n    delete blobProperties[\"Sealed\"];\n  }\n\n  if (blobPropertiesInXML[\"RehydratePriority\"]) {\n    blobProperties.rehydratePriority = blobPropertiesInXML[\n      \"RehydratePriority\"\n    ] as RehydratePriority;\n    delete blobProperties[\"RehydratePriority\"];\n  }\n\n  if (blobPropertiesInXML[\"LastAccessTime\"]) {\n    blobProperties.lastAccessedOn = new Date(blobPropertiesInXML[\"LastAccessTime\"] as string);\n    delete blobProperties[\"LastAccessTime\"];\n  }\n\n  if (blobPropertiesInXML[\"ImmutabilityPolicyUntilDate\"]) {\n    blobProperties.immutabilityPolicyExpiresOn = new Date(\n      blobPropertiesInXML[\"ImmutabilityPolicyUntilDate\"] as string\n    );\n    delete blobProperties[\"ImmutabilityPolicyUntilDate\"];\n  }\n\n  if (blobPropertiesInXML[\"ImmutabilityPolicyMode\"]) {\n    blobProperties.immutabilityPolicyMode = blobPropertiesInXML[\n      \"ImmutabilityPolicyMode\"\n    ] as BlobImmutabilityPolicyMode;\n    delete blobProperties[\"ImmutabilityPolicyMode\"];\n  }\n\n  if (blobPropertiesInXML[\"LegalHold\"]) {\n    blobProperties.legalHold = ParseBoolean(blobPropertiesInXML[\"LegalHold\"]);\n    delete blobProperties[\"LegalHold\"];\n  }\n\n  return blobProperties;\n}\n\nfunction ParseBlobItem(blobInXML: any): BlobItemInternal {\n  const blobItem = blobInXML;\n  blobItem.properties = ParseBlobProperties(blobInXML[\"Properties\"]);\n  delete blobItem[\"Properties\"];\n\n  blobItem.name = ParseBlobName(blobInXML[\"Name\"]);\n  delete blobItem[\"Name\"];\n  blobItem.deleted = ParseBoolean(blobInXML[\"Deleted\"])!;\n  delete blobItem[\"Deleted\"];\n\n  if (blobInXML[\"Snapshot\"]) {\n    blobItem.snapshot = blobInXML[\"Snapshot\"] as string;\n    delete blobItem[\"Snapshot\"];\n  }\n\n  if (blobInXML[\"VersionId\"]) {\n    blobItem.versionId = blobInXML[\"VersionId\"] as string;\n    delete blobItem[\"VersionId\"];\n  }\n\n  if (blobInXML[\"IsCurrentVersion\"]) {\n    blobItem.isCurrentVersion = ParseBoolean(blobInXML[\"IsCurrentVersion\"]);\n    delete blobItem[\"IsCurrentVersion\"];\n  }\n\n  if (blobInXML[\"Metadata\"]) {\n    blobItem.metadata = blobInXML[\"Metadata\"];\n    delete blobItem[\"Metadata\"];\n  }\n\n  if (blobInXML[\"Tags\"]) {\n    blobItem.blobTags = ParseBlobTags(blobInXML[\"Tags\"]);\n    delete blobItem[\"Tags\"];\n  }\n\n  if (blobInXML[\"OrMetadata\"]) {\n    blobItem.objectReplicationMetadata = blobInXML[\"OrMetadata\"];\n    delete blobItem[\"OrMetadata\"];\n  }\n\n  if (blobInXML[\"HasVersionsOnly\"]) {\n    blobItem.hasVersionsOnly = ParseBoolean(blobInXML[\"HasVersionsOnly\"]);\n    delete blobItem[\"HasVersionsOnly\"];\n  }\n  return blobItem;\n}\n\nfunction ParseBlobPrefix(blobPrefixInXML: any): BlobPrefix {\n  return {\n    name: ParseBlobName(blobPrefixInXML[\"Name\"]),\n  };\n}\n\nfunction ParseBlobTag(blobTagInXML: any): BlobTag {\n  return {\n    key: blobTagInXML[\"Key\"],\n    value: blobTagInXML[\"Value\"],\n  };\n}\n\nfunction ParseBlobTags(blobTagsInXML: any): BlobTags | undefined {\n  if (\n    blobTagsInXML === undefined ||\n    blobTagsInXML[\"TagSet\"] === undefined ||\n    blobTagsInXML[\"TagSet\"][\"Tag\"] === undefined\n  ) {\n    return undefined;\n  }\n\n  const blobTagSet = [];\n  if (blobTagsInXML[\"TagSet\"][\"Tag\"] instanceof Array) {\n    blobTagsInXML[\"TagSet\"][\"Tag\"].forEach((blobTagInXML: any) => {\n      blobTagSet.push(ParseBlobTag(blobTagInXML));\n    });\n  } else {\n    blobTagSet.push(ParseBlobTag(blobTagsInXML[\"TagSet\"][\"Tag\"]));\n  }\n\n  return { blobTagSet: blobTagSet };\n}\n\nexport function ProcessBlobItems(blobArrayInXML: any[]): BlobItemInternal[] {\n  const blobItems = [];\n\n  if (blobArrayInXML instanceof Array) {\n    blobArrayInXML.forEach((blobInXML: any) => {\n      blobItems.push(ParseBlobItem(blobInXML));\n    });\n  } else {\n    blobItems.push(ParseBlobItem(blobArrayInXML));\n  }\n\n  return blobItems;\n}\n\nexport function ProcessBlobPrefixes(blobPrefixesInXML: any[]): BlobPrefix[] {\n  const blobPrefixes = [];\n\n  if (blobPrefixesInXML instanceof Array) {\n    blobPrefixesInXML.forEach((blobPrefixInXML: any) => {\n      blobPrefixes.push(ParseBlobPrefix(blobPrefixInXML));\n    });\n  } else {\n    blobPrefixes.push(ParseBlobPrefix(blobPrefixesInXML));\n  }\n\n  return blobPrefixes;\n}\n\nexport function* ExtractPageRangeInfoItems(\n  getPageRangesSegment: PageBlobGetPageRangesDiffResponseModel\n): IterableIterator<PageRangeInfo> {\n  let pageRange: PageRange[] = [];\n  let clearRange: ClearRange[] = [];\n\n  if (getPageRangesSegment.pageRange) pageRange = getPageRangesSegment.pageRange;\n  if (getPageRangesSegment.clearRange) clearRange = getPageRangesSegment.clearRange;\n\n  let pageRangeIndex = 0;\n  let clearRangeIndex = 0;\n\n  while (pageRangeIndex < pageRange.length && clearRangeIndex < clearRange.length) {\n    if (pageRange[pageRangeIndex].start < clearRange[clearRangeIndex].start) {\n      yield {\n        start: pageRange[pageRangeIndex].start,\n        end: pageRange[pageRangeIndex].end,\n        isClear: false,\n      };\n      ++pageRangeIndex;\n    } else {\n      yield {\n        start: clearRange[clearRangeIndex].start,\n        end: clearRange[clearRangeIndex].end,\n        isClear: true,\n      };\n      ++clearRangeIndex;\n    }\n  }\n\n  for (; pageRangeIndex < pageRange.length; ++pageRangeIndex) {\n    yield {\n      start: pageRange[pageRangeIndex].start,\n      end: pageRange[pageRangeIndex].end,\n      isClear: false,\n    };\n  }\n\n  for (; clearRangeIndex < clearRange.length; ++clearRangeIndex) {\n    yield {\n      start: clearRange[clearRangeIndex].start,\n      end: clearRange[clearRangeIndex].end,\n      isClear: true,\n    };\n  }\n}\n\n/**\n * Escape the blobName but keep path separator ('/').\n */\nexport function EscapePath(blobName: string): string {\n  const split = blobName.split(\"/\");\n  for (let i = 0; i < split.length; i++) {\n    split[i] = encodeURIComponent(split[i]);\n  }\n  return split.join(\"/\");\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _classCallCheck from \"/Users/tbeckett/Documents/geo-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tbeckett/Documents/geo-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * A collection of HttpHeaders that can be sent with a HTTP request.\n */\nfunction getHeaderKey(headerName) {\n  return headerName.toLowerCase();\n}\nexport function isHttpHeadersLike(object) {\n  if (object && typeof object === \"object\") {\n    var castObject = object;\n    if (typeof castObject.rawHeaders === \"function\" && typeof castObject.clone === \"function\" && typeof castObject.get === \"function\" && typeof castObject.set === \"function\" && typeof castObject.contains === \"function\" && typeof castObject.remove === \"function\" && typeof castObject.headersArray === \"function\" && typeof castObject.headerValues === \"function\" && typeof castObject.headerNames === \"function\" && typeof castObject.toJson === \"function\") {\n      return true;\n    }\n  }\n  return false;\n}\n/**\n * A collection of HTTP header key/value pairs.\n */\nexport var HttpHeaders = /*#__PURE__*/function () {\n  function HttpHeaders(rawHeaders) {\n    _classCallCheck(this, HttpHeaders);\n    this._headersMap = {};\n    if (rawHeaders) {\n      for (var headerName in rawHeaders) {\n        this.set(headerName, rawHeaders[headerName]);\n      }\n    }\n  }\n  /**\n   * Set a header in this collection with the provided name and value. The name is\n   * case-insensitive.\n   * @param headerName - The name of the header to set. This value is case-insensitive.\n   * @param headerValue - The value of the header to set.\n   */\n  _createClass(HttpHeaders, [{\n    key: \"set\",\n    value: function set(headerName, headerValue) {\n      this._headersMap[getHeaderKey(headerName)] = {\n        name: headerName,\n        value: headerValue.toString()\n      };\n    }\n    /**\n     * Get the header value for the provided header name, or undefined if no header exists in this\n     * collection with the provided name.\n     * @param headerName - The name of the header.\n     */\n  }, {\n    key: \"get\",\n    value: function get(headerName) {\n      var header = this._headersMap[getHeaderKey(headerName)];\n      return !header ? undefined : header.value;\n    }\n    /**\n     * Get whether or not this header collection contains a header entry for the provided header name.\n     */\n  }, {\n    key: \"contains\",\n    value: function contains(headerName) {\n      return !!this._headersMap[getHeaderKey(headerName)];\n    }\n    /**\n     * Remove the header with the provided headerName. Return whether or not the header existed and\n     * was removed.\n     * @param headerName - The name of the header to remove.\n     */\n  }, {\n    key: \"remove\",\n    value: function remove(headerName) {\n      var result = this.contains(headerName);\n      delete this._headersMap[getHeaderKey(headerName)];\n      return result;\n    }\n    /**\n     * Get the headers that are contained this collection as an object.\n     */\n  }, {\n    key: \"rawHeaders\",\n    value: function rawHeaders() {\n      return this.toJson({\n        preserveCase: true\n      });\n    }\n    /**\n     * Get the headers that are contained in this collection as an array.\n     */\n  }, {\n    key: \"headersArray\",\n    value: function headersArray() {\n      var headers = [];\n      for (var headerKey in this._headersMap) {\n        headers.push(this._headersMap[headerKey]);\n      }\n      return headers;\n    }\n    /**\n     * Get the header names that are contained in this collection.\n     */\n  }, {\n    key: \"headerNames\",\n    value: function headerNames() {\n      var headerNames = [];\n      var headers = this.headersArray();\n      for (var i = 0; i < headers.length; ++i) {\n        headerNames.push(headers[i].name);\n      }\n      return headerNames;\n    }\n    /**\n     * Get the header values that are contained in this collection.\n     */\n  }, {\n    key: \"headerValues\",\n    value: function headerValues() {\n      var headerValues = [];\n      var headers = this.headersArray();\n      for (var i = 0; i < headers.length; ++i) {\n        headerValues.push(headers[i].value);\n      }\n      return headerValues;\n    }\n    /**\n     * Get the JSON object representation of this HTTP header collection.\n     */\n  }, {\n    key: \"toJson\",\n    value: function toJson() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var result = {};\n      if (options.preserveCase) {\n        for (var headerKey in this._headersMap) {\n          var header = this._headersMap[headerKey];\n          result[header.name] = header.value;\n        }\n      } else {\n        for (var _headerKey in this._headersMap) {\n          var _header = this._headersMap[_headerKey];\n          result[getHeaderKey(_header.name)] = _header.value;\n        }\n      }\n      return result;\n    }\n    /**\n     * Get the string representation of this HTTP header collection.\n     */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return JSON.stringify(this.toJson({\n        preserveCase: true\n      }));\n    }\n    /**\n     * Create a deep clone/copy of this HttpHeaders collection.\n     */\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var resultPreservingCasing = {};\n      for (var headerKey in this._headersMap) {\n        var header = this._headersMap[headerKey];\n        resultPreservingCasing[header.name] = header.value;\n      }\n      return new HttpHeaders(resultPreservingCasing);\n    }\n  }]);\n  return HttpHeaders;\n}();","map":{"version":3,"mappings":"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","names":["getHeaderKey","headerName","toLowerCase","isHttpHeadersLike","object","castObject","rawHeaders","clone","get","set","contains","remove","headersArray","headerValues","headerNames","toJson","HttpHeaders","_headersMap","headerValue","name","value","toString","header","undefined","result","preserveCase","headers","headerKey","push","i","length","options","JSON","stringify","resultPreservingCasing"],"sourceRoot":"","sources":["../../src/httpHeaders.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * A collection of HttpHeaders that can be sent with a HTTP request.\n */\nfunction getHeaderKey(headerName: string): string {\n  return headerName.toLowerCase();\n}\n\n/**\n * An individual header within a HttpHeaders collection.\n */\nexport interface HttpHeader {\n  /**\n   * The name of the header.\n   */\n  name: string;\n\n  /**\n   * The value of the header.\n   */\n  value: string;\n}\n\n/**\n * A HttpHeaders collection represented as a simple JSON object.\n */\nexport type RawHttpHeaders = { [headerName: string]: string };\n\n/**\n * A collection of HTTP header key/value pairs.\n */\nexport interface HttpHeadersLike {\n  /**\n   * Set a header in this collection with the provided name and value. The name is\n   * case-insensitive.\n   * @param headerName - The name of the header to set. This value is case-insensitive.\n   * @param headerValue - The value of the header to set.\n   */\n  set(headerName: string, headerValue: string | number): void;\n  /**\n   * Get the header value for the provided header name, or undefined if no header exists in this\n   * collection with the provided name.\n   * @param headerName - The name of the header.\n   */\n  get(headerName: string): string | undefined;\n  /**\n   * Get whether or not this header collection contains a header entry for the provided header name.\n   */\n  contains(headerName: string): boolean;\n  /**\n   * Remove the header with the provided headerName. Return whether or not the header existed and\n   * was removed.\n   * @param headerName - The name of the header to remove.\n   */\n  remove(headerName: string): boolean;\n  /**\n   * Get the headers that are contained this collection as an object.\n   */\n  rawHeaders(): RawHttpHeaders;\n  /**\n   * Get the headers that are contained in this collection as an array.\n   */\n  headersArray(): HttpHeader[];\n  /**\n   * Get the header names that are contained in this collection.\n   */\n  headerNames(): string[];\n  /**\n   * Get the header values that are contained in this collection.\n   */\n  headerValues(): string[];\n  /**\n   * Create a deep clone/copy of this HttpHeaders collection.\n   */\n  clone(): HttpHeadersLike;\n  /**\n   * Get the JSON object representation of this HTTP header collection.\n   * The result is the same as `rawHeaders()`.\n   */\n  toJson(options?: { preserveCase?: boolean }): RawHttpHeaders;\n}\n\nexport function isHttpHeadersLike(object?: unknown): object is HttpHeadersLike {\n  if (object && typeof object === \"object\") {\n    const castObject = object as {\n      rawHeaders: unknown;\n      clone: unknown;\n      get: unknown;\n      set: unknown;\n      contains: unknown;\n      remove: unknown;\n      headersArray: unknown;\n      headerValues: unknown;\n      headerNames: unknown;\n      toJson: unknown;\n    };\n    if (\n      typeof castObject.rawHeaders === \"function\" &&\n      typeof castObject.clone === \"function\" &&\n      typeof castObject.get === \"function\" &&\n      typeof castObject.set === \"function\" &&\n      typeof castObject.contains === \"function\" &&\n      typeof castObject.remove === \"function\" &&\n      typeof castObject.headersArray === \"function\" &&\n      typeof castObject.headerValues === \"function\" &&\n      typeof castObject.headerNames === \"function\" &&\n      typeof castObject.toJson === \"function\"\n    ) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * A collection of HTTP header key/value pairs.\n */\nexport class HttpHeaders implements HttpHeadersLike {\n  private readonly _headersMap: { [headerKey: string]: HttpHeader };\n\n  constructor(rawHeaders?: RawHttpHeaders) {\n    this._headersMap = {};\n    if (rawHeaders) {\n      for (const headerName in rawHeaders) {\n        this.set(headerName, rawHeaders[headerName]);\n      }\n    }\n  }\n\n  /**\n   * Set a header in this collection with the provided name and value. The name is\n   * case-insensitive.\n   * @param headerName - The name of the header to set. This value is case-insensitive.\n   * @param headerValue - The value of the header to set.\n   */\n  public set(headerName: string, headerValue: string | number): void {\n    this._headersMap[getHeaderKey(headerName)] = {\n      name: headerName,\n      value: headerValue.toString(),\n    };\n  }\n\n  /**\n   * Get the header value for the provided header name, or undefined if no header exists in this\n   * collection with the provided name.\n   * @param headerName - The name of the header.\n   */\n  public get(headerName: string): string | undefined {\n    const header: HttpHeader = this._headersMap[getHeaderKey(headerName)];\n    return !header ? undefined : header.value;\n  }\n\n  /**\n   * Get whether or not this header collection contains a header entry for the provided header name.\n   */\n  public contains(headerName: string): boolean {\n    return !!this._headersMap[getHeaderKey(headerName)];\n  }\n\n  /**\n   * Remove the header with the provided headerName. Return whether or not the header existed and\n   * was removed.\n   * @param headerName - The name of the header to remove.\n   */\n  public remove(headerName: string): boolean {\n    const result: boolean = this.contains(headerName);\n    delete this._headersMap[getHeaderKey(headerName)];\n    return result;\n  }\n\n  /**\n   * Get the headers that are contained this collection as an object.\n   */\n  public rawHeaders(): RawHttpHeaders {\n    return this.toJson({ preserveCase: true });\n  }\n\n  /**\n   * Get the headers that are contained in this collection as an array.\n   */\n  public headersArray(): HttpHeader[] {\n    const headers: HttpHeader[] = [];\n    for (const headerKey in this._headersMap) {\n      headers.push(this._headersMap[headerKey]);\n    }\n    return headers;\n  }\n\n  /**\n   * Get the header names that are contained in this collection.\n   */\n  public headerNames(): string[] {\n    const headerNames: string[] = [];\n    const headers: HttpHeader[] = this.headersArray();\n    for (let i = 0; i < headers.length; ++i) {\n      headerNames.push(headers[i].name);\n    }\n    return headerNames;\n  }\n\n  /**\n   * Get the header values that are contained in this collection.\n   */\n  public headerValues(): string[] {\n    const headerValues: string[] = [];\n    const headers: HttpHeader[] = this.headersArray();\n    for (let i = 0; i < headers.length; ++i) {\n      headerValues.push(headers[i].value);\n    }\n    return headerValues;\n  }\n\n  /**\n   * Get the JSON object representation of this HTTP header collection.\n   */\n  public toJson(options: { preserveCase?: boolean } = {}): RawHttpHeaders {\n    const result: RawHttpHeaders = {};\n    if (options.preserveCase) {\n      for (const headerKey in this._headersMap) {\n        const header: HttpHeader = this._headersMap[headerKey];\n        result[header.name] = header.value;\n      }\n    } else {\n      for (const headerKey in this._headersMap) {\n        const header: HttpHeader = this._headersMap[headerKey];\n        result[getHeaderKey(header.name)] = header.value;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Get the string representation of this HTTP header collection.\n   */\n  public toString(): string {\n    return JSON.stringify(this.toJson({ preserveCase: true }));\n  }\n\n  /**\n   * Create a deep clone/copy of this HttpHeaders collection.\n   */\n  public clone(): HttpHeaders {\n    const resultPreservingCasing: RawHttpHeaders = {};\n    for (const headerKey in this._headersMap) {\n      const header: HttpHeader = this._headersMap[headerKey];\n      resultPreservingCasing[header.name] = header.value;\n    }\n    return new HttpHeaders(resultPreservingCasing);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { __awaiter, __generator } from \"tslib\";\nimport { XhrClient } from \"../XHRClient\";\nimport { AAD_INSTANCE_DISCOVERY_ENDPOINT, NetworkRequestType } from \"../utils/Constants\";\nimport { UrlUtils } from \"../utils/UrlUtils\";\nvar TrustedAuthority = /** @class */function () {\n  function TrustedAuthority() {}\n  /**\n   *\n   * @param validateAuthority\n   * @param knownAuthorities\n   */\n  TrustedAuthority.setTrustedAuthoritiesFromConfig = function (validateAuthority, knownAuthorities) {\n    if (validateAuthority && !this.getTrustedHostList().length) {\n      knownAuthorities.forEach(function (authority) {\n        TrustedAuthority.TrustedHostList.push(authority.toLowerCase());\n      });\n    }\n  };\n  /**\n   *\n   * @param telemetryManager\n   * @param correlationId\n   */\n  TrustedAuthority.getAliases = function (authorityToVerify, telemetryManager, correlationId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var client, httpMethod, instanceDiscoveryEndpoint, httpEvent;\n      return __generator(this, function (_a) {\n        client = new XhrClient();\n        httpMethod = NetworkRequestType.GET;\n        instanceDiscoveryEndpoint = \"\" + AAD_INSTANCE_DISCOVERY_ENDPOINT + authorityToVerify + \"oauth2/v2.0/authorize\";\n        httpEvent = telemetryManager.createAndStartHttpEvent(correlationId, httpMethod, instanceDiscoveryEndpoint, \"getAliases\");\n        return [2 /*return*/, client.sendRequestAsync(instanceDiscoveryEndpoint, httpMethod, true).then(function (response) {\n          httpEvent.httpResponseStatus = response.statusCode;\n          telemetryManager.stopEvent(httpEvent);\n          return response.body[\"metadata\"];\n        }).catch(function (err) {\n          httpEvent.serverErrorCode = err;\n          telemetryManager.stopEvent(httpEvent);\n          throw err;\n        })];\n      });\n    });\n  };\n  /**\n   *\n   * @param telemetryManager\n   * @param correlationId\n   */\n  TrustedAuthority.setTrustedAuthoritiesFromNetwork = function (authorityToVerify, telemetryManager, correlationId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var metadata, host;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.getAliases(authorityToVerify, telemetryManager, correlationId)];\n          case 1:\n            metadata = _a.sent();\n            metadata.forEach(function (entry) {\n              var authorities = entry[\"aliases\"];\n              authorities.forEach(function (authority) {\n                TrustedAuthority.TrustedHostList.push(authority.toLowerCase());\n              });\n            });\n            host = UrlUtils.GetUrlComponents(authorityToVerify).HostNameAndPort;\n            if (TrustedAuthority.getTrustedHostList().length && !TrustedAuthority.IsInTrustedHostList(host)) {\n              // Custom Domain scenario, host is trusted because Instance Discovery call succeeded\n              TrustedAuthority.TrustedHostList.push(host.toLowerCase());\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  TrustedAuthority.getTrustedHostList = function () {\n    return this.TrustedHostList;\n  };\n  /**\n   * Checks to see if the host is in a list of trusted hosts\n   * @param host\n   */\n  TrustedAuthority.IsInTrustedHostList = function (host) {\n    return this.TrustedHostList.indexOf(host.toLowerCase()) > -1;\n  };\n  TrustedAuthority.TrustedHostList = [];\n  return TrustedAuthority;\n}();\nexport { TrustedAuthority };","map":{"version":3,"mappings":"AAAA;;;;;AAMA,SAASA,SAAS,QAAqB,cAAc;AAErD,SAASC,+BAA+B,EAAEC,kBAAkB,QAAQ,oBAAoB;AACxF,SAASC,QAAQ,QAAQ,mBAAmB;AAE5C;EAAA,6BAwEA;EArEI;;;;;EAKcC,gDAA+B,GAA7C,UAA8CC,iBAA0B,EAAEC,gBAA+B;IACrG,IAAID,iBAAiB,IAAI,CAAC,IAAI,CAACE,kBAAkB,EAAE,CAACC,MAAM,EAAC;MACvDF,gBAAgB,CAACG,OAAO,CAAC,UAASC,SAAS;QACvCN,gBAAgB,CAACO,eAAe,CAACC,IAAI,CAACF,SAAS,CAACG,WAAW,EAAE,CAAC;MAClE,CAAC,CAAC;;EAEV,CAAC;EAED;;;;;EAKqBT,2BAAU,GAA/B,UAAgCU,iBAAyB,EAAEC,gBAAkC,EAAEC,aAAsB;;;;QAC3GC,MAAM,GAAc,IAAIjB,SAAS,EAAE;QAEnCkB,UAAU,GAAGhB,kBAAkB,CAACiB,GAAG;QACnCC,yBAAyB,GAAG,KAAGnB,+BAA+B,GAAGa,iBAAiB,0BAAuB;QACzGO,SAAS,GAAcN,gBAAgB,CAACO,uBAAuB,CAACN,aAAa,EAAEE,UAAU,EAAEE,yBAAyB,EAAE,YAAY,CAAC;QACzI,sBAAOH,MAAM,CAACM,gBAAgB,CAACH,yBAAyB,EAAEF,UAAU,EAAE,IAAI,CAAC,CACtEM,IAAI,CAAC,UAACC,QAAqB;UACxBJ,SAAS,CAACK,kBAAkB,GAAGD,QAAQ,CAACE,UAAU;UAClDZ,gBAAgB,CAACa,SAAS,CAACP,SAAS,CAAC;UACrC,OAAOI,QAAQ,CAACI,IAAI,CAAC,UAAU,CAAC;QACpC,CAAC,CAAC,CACDC,KAAK,CAAC,aAAG;UACNT,SAAS,CAACU,eAAe,GAAGC,GAAG;UAC/BjB,gBAAgB,CAACa,SAAS,CAACP,SAAS,CAAC;UACrC,MAAMW,GAAG;QACb,CAAC,CAAC;;;GACT;EAED;;;;;EAKoB5B,iDAAgC,GAApD,UAAqDU,iBAAyB,EAAEC,gBAAkC,EAAEC,aAAsB;;;;;;YACrH,qBAAM,IAAI,CAACiB,UAAU,CAACnB,iBAAiB,EAAEC,gBAAgB,EAAEC,aAAa,CAAC;;YAApFkB,QAAQ,GAAGC,SAAyE;YAC1FD,QAAQ,CAACzB,OAAO,CAAC,UAAS2B,KAAa;cACnC,IAAMC,WAAW,GAAkBD,KAAK,CAAC,SAAS,CAAC;cACnDC,WAAW,CAAC5B,OAAO,CAAC,UAASC,SAAiB;gBAC1CN,gBAAgB,CAACO,eAAe,CAACC,IAAI,CAACF,SAAS,CAACG,WAAW,EAAE,CAAC;cAClE,CAAC,CAAC;YACN,CAAC,CAAC;YAEIyB,IAAI,GAAGnC,QAAQ,CAACoC,gBAAgB,CAACzB,iBAAiB,CAAC,CAAC0B,eAAe;YACzE,IAAIpC,gBAAgB,CAACG,kBAAkB,EAAE,CAACC,MAAM,IAAI,CAACJ,gBAAgB,CAACqC,mBAAmB,CAACH,IAAI,CAAC,EAAC;cAC5F;cACAlC,gBAAgB,CAACO,eAAe,CAACC,IAAI,CAAC0B,IAAI,CAACzB,WAAW,EAAE,CAAC;;;;;;GAEhE;;EAEaT,mCAAkB,GAAhC;IACI,OAAO,IAAI,CAACO,eAAe;EAC/B,CAAC;EAED;;;;EAIcP,oCAAmB,GAAjC,UAAkCkC,IAAY;IAC1C,OAAO,IAAI,CAAC3B,eAAe,CAAC+B,OAAO,CAACJ,IAAI,CAACzB,WAAW,EAAE,CAAC,GAAG,CAAC,CAAC;EAChE,CAAC;EAtEcT,gCAAe,GAAkB,EAAE;EAuEtD,uBAAC;CAAA,EAxED;SAAaA,gBAAgB","names":["XhrClient","AAD_INSTANCE_DISCOVERY_ENDPOINT","NetworkRequestType","UrlUtils","TrustedAuthority","validateAuthority","knownAuthorities","getTrustedHostList","length","forEach","authority","TrustedHostList","push","toLowerCase","authorityToVerify","telemetryManager","correlationId","client","httpMethod","GET","instanceDiscoveryEndpoint","httpEvent","createAndStartHttpEvent","sendRequestAsync","then","response","httpResponseStatus","statusCode","stopEvent","body","catch","serverErrorCode","err","getAliases","metadata","_a","entry","authorities","host","GetUrlComponents","HostNameAndPort","IsInTrustedHostList","indexOf"],"sourceRoot":"","sources":["../../src/authority/TrustedAuthority.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}
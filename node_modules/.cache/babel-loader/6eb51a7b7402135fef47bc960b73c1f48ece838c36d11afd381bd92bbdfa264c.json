{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * Map an optional value through a function\n * @internal\n */\nconst maybemap = (value, f) => value === undefined ? undefined : f(value);\nconst INTERRUPTED = new Error(\"The poller is already stopped\");\n/**\n * A promise that delays resolution until a certain amount of time (in milliseconds) has passed, with facilities for\n * robust cancellation.\n *\n * ### Example:\n *\n * ```javascript\n * let toCancel;\n *\n * // Wait 20 seconds, and optionally allow the function to be cancelled.\n * await delayMs(20000, (cancel) => { toCancel = cancel });\n *\n * // ... if `toCancel` is called before the 20 second timer expires, then the delayMs promise will reject.\n * ```\n *\n * @internal\n * @param ms - the number of milliseconds to wait before resolving\n * @param cb - a callback that can provide the caller with a cancellation function\n */\nexport function delayMs(ms) {\n  let aborted = false;\n  let toReject;\n  return Object.assign(new Promise((resolve, reject) => {\n    let token;\n    toReject = () => {\n      maybemap(token, clearTimeout);\n      reject(INTERRUPTED);\n    };\n    // In the rare case that the operation is _already_ aborted, we will reject instantly. This could happen, for\n    // example, if the user calls the cancellation function immediately without yielding execution.\n    if (aborted) {\n      toReject();\n    } else {\n      token = setTimeout(resolve, ms);\n    }\n  }), {\n    cancel: () => {\n      aborted = true;\n      toReject === null || toReject === void 0 ? void 0 : toReject();\n    }\n  });\n}","map":{"version":3,"mappings":"AAAA;AACA;AAEA;;;;AAIA,MAAMA,QAAQ,GAAG,CAASC,KAAqB,EAAEC,CAAgB,KAC/DD,KAAK,KAAKE,SAAS,GAAGA,SAAS,GAAGD,CAAC,CAACD,KAAK,CAAC;AAI5C,MAAMG,WAAW,GAAG,IAAIC,KAAK,CAAC,+BAA+B,CAAC;AAa9D;;;;;;;;;;;;;;;;;;;AAmBA,OAAM,SAAUC,OAAO,CAACC,EAAU;EAChC,IAAIC,OAAO,GAAG,KAAK;EACnB,IAAIC,QAAkC;EAEtC,OAAOC,MAAM,CAACC,MAAM,CAClB,IAAIC,OAAO,CAAO,CAACC,OAAO,EAAEC,MAAM,KAAI;IACpC,IAAIC,KAAoC;IACxCN,QAAQ,GAAG,MAAK;MACdT,QAAQ,CAACe,KAAK,EAAEC,YAAY,CAAC;MAC7BF,MAAM,CAACV,WAAW,CAAC;IACrB,CAAC;IAED;IACA;IACA,IAAII,OAAO,EAAE;MACXC,QAAQ,EAAE;KACX,MAAM;MACLM,KAAK,GAAGE,UAAU,CAACJ,OAAO,EAAEN,EAAE,CAAC;;EAEnC,CAAC,CAAC,EACF;IACEW,MAAM,EAAE,MAAK;MACXV,OAAO,GAAG,IAAI;MACdC,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,EAAI;IACd;GACD,CACF;AACH","names":["maybemap","value","f","undefined","INTERRUPTED","Error","delayMs","ms","aborted","toReject","Object","assign","Promise","resolve","reject","token","clearTimeout","setTimeout","cancel"],"sources":["/Users/yupenglei/Documents/geo-react/node_modules/@azure/core-lro/src/poller/util/delayMs.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Map an optional value through a function\n * @internal\n */\nconst maybemap = <T1, T2>(value: T1 | undefined, f: (v: T1) => T2): T2 | undefined =>\n  value === undefined ? undefined : f(value);\n\ntype CancellationToken = Parameters<typeof clearTimeout>[0];\n\nconst INTERRUPTED = new Error(\"The poller is already stopped\");\n\n/**\n * A PromiseLike object that supports cancellation.\n * @internal\n */\ninterface CancelablePromiseLike<T> extends PromiseLike<T> {\n  /**\n   * Cancel the promise (cause it to reject).\n   */\n  cancel(): void;\n}\n\n/**\n * A promise that delays resolution until a certain amount of time (in milliseconds) has passed, with facilities for\n * robust cancellation.\n *\n * ### Example:\n *\n * ```javascript\n * let toCancel;\n *\n * // Wait 20 seconds, and optionally allow the function to be cancelled.\n * await delayMs(20000, (cancel) => { toCancel = cancel });\n *\n * // ... if `toCancel` is called before the 20 second timer expires, then the delayMs promise will reject.\n * ```\n *\n * @internal\n * @param ms - the number of milliseconds to wait before resolving\n * @param cb - a callback that can provide the caller with a cancellation function\n */\nexport function delayMs(ms: number): CancelablePromiseLike<void> {\n  let aborted = false;\n  let toReject: (() => void) | undefined;\n\n  return Object.assign(\n    new Promise<void>((resolve, reject) => {\n      let token: CancellationToken | undefined;\n      toReject = () => {\n        maybemap(token, clearTimeout);\n        reject(INTERRUPTED);\n      };\n\n      // In the rare case that the operation is _already_ aborted, we will reject instantly. This could happen, for\n      // example, if the user calls the cancellation function immediately without yielding execution.\n      if (aborted) {\n        toReject();\n      } else {\n        token = setTimeout(resolve, ms);\n      }\n    }),\n    {\n      cancel: () => {\n        aborted = true;\n        toReject?.();\n      },\n    }\n  );\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
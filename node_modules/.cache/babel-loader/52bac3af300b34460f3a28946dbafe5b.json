{"ast":null,"code":"import _defineProperty from \"/Users/tbeckett/Documents/geo-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from \"tslib\";\n/**\n * returns an async iterator that iterates over results. It also has a `byPage`\n * method that returns pages of items at once.\n *\n * @param pagedResult - an object that specifies how to get pages.\n * @returns a paged async iterator that iterates over results.\n */\nexport function getPagedAsyncIterator(pagedResult) {\n  var _ref2;\n  var _a;\n  var iter = getItemAsyncIterator(pagedResult);\n  return _ref2 = {\n    next: function next() {\n      return iter.next();\n    }\n  }, _defineProperty(_ref2, Symbol.asyncIterator, function () {\n    return this;\n  }), _defineProperty(_ref2, \"byPage\", (_a = pagedResult === null || pagedResult === void 0 ? void 0 : pagedResult.byPage) !== null && _a !== void 0 ? _a : function (settings) {\n    var _ref = settings !== null && settings !== void 0 ? settings : {},\n      continuationToken = _ref.continuationToken,\n      maxPageSize = _ref.maxPageSize;\n    return getPageAsyncIterator(pagedResult, {\n      pageLink: continuationToken,\n      maxPageSize: maxPageSize\n    });\n  }), _ref2;\n}\nfunction getItemAsyncIterator(pagedResult) {\n  return __asyncGenerator(this, arguments, /*#__PURE__*/_regeneratorRuntime().mark(function getItemAsyncIterator_1() {\n    var e_1, _a, e_2, _b, pages, firstVal, toElements, pages_1, pages_1_1, page, pages_2, pages_2_1, _page;\n    return _regeneratorRuntime().wrap(function getItemAsyncIterator_1$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            pages = getPageAsyncIterator(pagedResult);\n            _context.next = 3;\n            return __await(pages.next());\n          case 3:\n            firstVal = _context.sent;\n            if (Array.isArray(firstVal.value)) {\n              _context.next = 54;\n              break;\n            }\n            // can extract elements from this page\n            toElements = pagedResult.toElements;\n            if (!toElements) {\n              _context.next = 43;\n              break;\n            }\n            _context.t0 = __await;\n            return _context.delegateYield(__asyncDelegator(__asyncValues(toElements(firstVal.value))), \"t1\", 9);\n          case 9:\n            _context.t2 = _context.t1;\n            _context.next = 12;\n            return (0, _context.t0)(_context.t2);\n          case 12:\n            _context.prev = 12;\n            pages_1 = __asyncValues(pages);\n          case 14:\n            _context.next = 16;\n            return __await(pages_1.next());\n          case 16:\n            pages_1_1 = _context.sent;\n            if (pages_1_1.done) {\n              _context.next = 26;\n              break;\n            }\n            page = pages_1_1.value;\n            _context.t3 = __await;\n            return _context.delegateYield(__asyncDelegator(__asyncValues(toElements(page))), \"t4\", 21);\n          case 21:\n            _context.t5 = _context.t4;\n            _context.next = 24;\n            return (0, _context.t3)(_context.t5);\n          case 24:\n            _context.next = 14;\n            break;\n          case 26:\n            _context.next = 31;\n            break;\n          case 28:\n            _context.prev = 28;\n            _context.t6 = _context[\"catch\"](12);\n            e_1 = {\n              error: _context.t6\n            };\n          case 31:\n            _context.prev = 31;\n            _context.prev = 32;\n            if (!(pages_1_1 && !pages_1_1.done && (_a = pages_1.return))) {\n              _context.next = 36;\n              break;\n            }\n            _context.next = 36;\n            return __await(_a.call(pages_1));\n          case 36:\n            _context.prev = 36;\n            if (!e_1) {\n              _context.next = 39;\n              break;\n            }\n            throw e_1.error;\n          case 39:\n            return _context.finish(36);\n          case 40:\n            return _context.finish(31);\n          case 41:\n            _context.next = 52;\n            break;\n          case 43:\n            _context.next = 45;\n            return __await(firstVal.value);\n          case 45:\n            _context.next = 47;\n            return _context.sent;\n          case 47:\n            _context.t7 = __await;\n            return _context.delegateYield(__asyncDelegator(__asyncValues(pages)), \"t8\", 49);\n          case 49:\n            _context.t9 = _context.t8;\n            _context.next = 52;\n            return (0, _context.t7)(_context.t9);\n          case 52:\n            _context.next = 88;\n            break;\n          case 54:\n            _context.t10 = __await;\n            return _context.delegateYield(__asyncDelegator(__asyncValues(firstVal.value)), \"t11\", 56);\n          case 56:\n            _context.t12 = _context.t11;\n            _context.next = 59;\n            return (0, _context.t10)(_context.t12);\n          case 59:\n            _context.prev = 59;\n            pages_2 = __asyncValues(pages);\n          case 61:\n            _context.next = 63;\n            return __await(pages_2.next());\n          case 63:\n            pages_2_1 = _context.sent;\n            if (pages_2_1.done) {\n              _context.next = 73;\n              break;\n            }\n            _page = pages_2_1.value; // pages is of type `AsyncIterableIterator<TPage>` so `page` is of type `TPage`. In this branch,\n            // it must be the case that `TPage = TElement[]`\n            _context.t13 = __await;\n            return _context.delegateYield(__asyncDelegator(__asyncValues(_page)), \"t14\", 68);\n          case 68:\n            _context.t15 = _context.t14;\n            _context.next = 71;\n            return (0, _context.t13)(_context.t15);\n          case 71:\n            _context.next = 61;\n            break;\n          case 73:\n            _context.next = 78;\n            break;\n          case 75:\n            _context.prev = 75;\n            _context.t16 = _context[\"catch\"](59);\n            e_2 = {\n              error: _context.t16\n            };\n          case 78:\n            _context.prev = 78;\n            _context.prev = 79;\n            if (!(pages_2_1 && !pages_2_1.done && (_b = pages_2.return))) {\n              _context.next = 83;\n              break;\n            }\n            _context.next = 83;\n            return __await(_b.call(pages_2));\n          case 83:\n            _context.prev = 83;\n            if (!e_2) {\n              _context.next = 86;\n              break;\n            }\n            throw e_2.error;\n          case 86:\n            return _context.finish(83);\n          case 87:\n            return _context.finish(78);\n          case 88:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, getItemAsyncIterator_1, null, [[12, 28, 31, 41], [32,, 36, 40], [59, 75, 78, 88], [79,, 83, 87]]);\n  }));\n}\nfunction getPageAsyncIterator(pagedResult) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return __asyncGenerator(this, arguments, /*#__PURE__*/_regeneratorRuntime().mark(function getPageAsyncIterator_1() {\n    var pageLink, maxPageSize, response;\n    return _regeneratorRuntime().wrap(function getPageAsyncIterator_1$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            pageLink = options.pageLink, maxPageSize = options.maxPageSize;\n            _context2.next = 3;\n            return __await(pagedResult.getPage(pageLink !== null && pageLink !== void 0 ? pageLink : pagedResult.firstPageLink, maxPageSize));\n          case 3:\n            response = _context2.sent;\n            if (response) {\n              _context2.next = 8;\n              break;\n            }\n            _context2.next = 7;\n            return __await(void 0);\n          case 7:\n            return _context2.abrupt(\"return\", _context2.sent);\n          case 8:\n            _context2.next = 10;\n            return __await(response.page);\n          case 10:\n            _context2.next = 12;\n            return _context2.sent;\n          case 12:\n            if (!response.nextPageLink) {\n              _context2.next = 26;\n              break;\n            }\n            _context2.next = 15;\n            return __await(pagedResult.getPage(response.nextPageLink, maxPageSize));\n          case 15:\n            response = _context2.sent;\n            if (response) {\n              _context2.next = 20;\n              break;\n            }\n            _context2.next = 19;\n            return __await(void 0);\n          case 19:\n            return _context2.abrupt(\"return\", _context2.sent);\n          case 20:\n            _context2.next = 22;\n            return __await(response.page);\n          case 22:\n            _context2.next = 24;\n            return _context2.sent;\n          case 24:\n            _context2.next = 12;\n            break;\n          case 26:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, getPageAsyncIterator_1);\n  }));\n}","map":{"version":3,"mappings":"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","names":["getPagedAsyncIterator","pagedResult","iter","getItemAsyncIterator","next","Symbol","asyncIterator","byPage","settings","continuationToken","maxPageSize","getPageAsyncIterator","pageLink","pages","firstVal","Array","isArray","value","toElements","__await","__asyncDelegator","pages_1","pages_1_1","page","pages_2","pages_2_1","options","getPage","firstPageLink","response","nextPageLink"],"sourceRoot":"","sources":["../../src/getPagedAsyncIterator.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { PageSettings, PagedAsyncIterableIterator, PagedResult } from \"./models\";\n\n/**\n * returns an async iterator that iterates over results. It also has a `byPage`\n * method that returns pages of items at once.\n *\n * @param pagedResult - an object that specifies how to get pages.\n * @returns a paged async iterator that iterates over results.\n */\n\nexport function getPagedAsyncIterator<\n  TElement,\n  TPage = TElement[],\n  TPageSettings = PageSettings,\n  TLink = string\n>(\n  pagedResult: PagedResult<TPage, TPageSettings, TLink>\n): PagedAsyncIterableIterator<TElement, TPage, TPageSettings> {\n  const iter = getItemAsyncIterator<TElement, TPage, TLink, TPageSettings>(pagedResult);\n  return {\n    next() {\n      return iter.next();\n    },\n    [Symbol.asyncIterator]() {\n      return this;\n    },\n    byPage:\n      pagedResult?.byPage ??\n      (((settings?: PageSettings) => {\n        const { continuationToken, maxPageSize } = settings ?? {};\n        return getPageAsyncIterator(pagedResult, {\n          pageLink: continuationToken as unknown as TLink | undefined,\n          maxPageSize,\n        });\n      }) as unknown as (settings?: TPageSettings) => AsyncIterableIterator<TPage>),\n  };\n}\n\nasync function* getItemAsyncIterator<TElement, TPage, TLink, TPageSettings>(\n  pagedResult: PagedResult<TPage, TPageSettings, TLink>\n): AsyncIterableIterator<TElement> {\n  const pages = getPageAsyncIterator(pagedResult);\n  const firstVal = await pages.next();\n  // if the result does not have an array shape, i.e. TPage = TElement, then we return it as is\n  if (!Array.isArray(firstVal.value)) {\n    // can extract elements from this page\n    const { toElements } = pagedResult;\n    if (toElements) {\n      yield* toElements(firstVal.value) as TElement[];\n      for await (const page of pages) {\n        yield* toElements(page) as TElement[];\n      }\n    } else {\n      yield firstVal.value;\n      // `pages` is of type `AsyncIterableIterator<TPage>` but TPage = TElement in this case\n      yield* pages as unknown as AsyncIterableIterator<TElement>;\n    }\n  } else {\n    yield* firstVal.value;\n    for await (const page of pages) {\n      // pages is of type `AsyncIterableIterator<TPage>` so `page` is of type `TPage`. In this branch,\n      // it must be the case that `TPage = TElement[]`\n      yield* page as unknown as TElement[];\n    }\n  }\n}\n\nasync function* getPageAsyncIterator<TPage, TLink, TPageSettings>(\n  pagedResult: PagedResult<TPage, TPageSettings, TLink>,\n  options: {\n    maxPageSize?: number;\n    pageLink?: TLink;\n  } = {}\n): AsyncIterableIterator<TPage> {\n  const { pageLink, maxPageSize } = options;\n  let response = await pagedResult.getPage(pageLink ?? pagedResult.firstPageLink, maxPageSize);\n  if (!response) {\n    return;\n  }\n  yield response.page;\n  while (response.nextPageLink) {\n    response = await pagedResult.getPage(response.nextPageLink, maxPageSize);\n    if (!response) {\n      return;\n    }\n    yield response.page;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
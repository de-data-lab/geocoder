{"ast":null,"code":"import _asyncToGenerator from \"/Users/tbeckett/Documents/geo-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/tbeckett/Documents/geo-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tbeckett/Documents/geo-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/tbeckett/Documents/geo-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/tbeckett/Documents/geo-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { BaseRequestPolicy } from \"./requestPolicy\";\nimport { AbortError } from \"@azure/abort-controller\";\nimport { Constants } from \"../util/constants\";\nimport { DEFAULT_CLIENT_MAX_RETRY_COUNT } from \"../util/throttlingRetryStrategy\";\nimport { delay } from \"@azure/core-util\";\nvar StatusCodes = Constants.HttpConstants.StatusCodes;\n/**\n * Creates a policy that re-sends the request if the response indicates the request failed because of throttling reasons.\n * For example, if the response contains a `Retry-After` header, it will retry sending the request based on the value of that header.\n *\n * To learn more, please refer to\n * https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-request-limits,\n * https://docs.microsoft.com/en-us/azure/azure-subscription-service-limits and\n * https://docs.microsoft.com/en-us/azure/virtual-machines/troubleshooting/troubleshooting-throttling-errors\n * @returns\n */\nexport function throttlingRetryPolicy() {\n  return {\n    create: function create(nextPolicy, options) {\n      return new ThrottlingRetryPolicy(nextPolicy, options);\n    }\n  };\n}\nvar StandardAbortMessage = \"The operation was aborted.\";\n/**\n * Creates a policy that re-sends the request if the response indicates the request failed because of throttling reasons.\n * For example, if the response contains a `Retry-After` header, it will retry sending the request based on the value of that header.\n *\n * To learn more, please refer to\n * https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-request-limits,\n * https://docs.microsoft.com/en-us/azure/azure-subscription-service-limits and\n * https://docs.microsoft.com/en-us/azure/virtual-machines/troubleshooting/troubleshooting-throttling-errors\n */\nexport var ThrottlingRetryPolicy = /*#__PURE__*/function (_BaseRequestPolicy) {\n  _inherits(ThrottlingRetryPolicy, _BaseRequestPolicy);\n  var _super = _createSuper(ThrottlingRetryPolicy);\n  function ThrottlingRetryPolicy(nextPolicy, options, _handleResponse) {\n    var _this;\n    _classCallCheck(this, ThrottlingRetryPolicy);\n    _this = _super.call(this, nextPolicy, options);\n    _this.numberOfRetries = 0;\n    _this._handleResponse = _handleResponse || _this._defaultResponseHandler;\n    return _this;\n  }\n  _createClass(ThrottlingRetryPolicy, [{\n    key: \"sendRequest\",\n    value: function () {\n      var _sendRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(httpRequest) {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this._nextPolicy.sendRequest(httpRequest.clone());\n              case 2:\n                response = _context.sent;\n                if (!(response.status !== StatusCodes.TooManyRequests && response.status !== StatusCodes.ServiceUnavailable)) {\n                  _context.next = 7;\n                  break;\n                }\n                return _context.abrupt(\"return\", response);\n              case 7:\n                return _context.abrupt(\"return\", this._handleResponse(httpRequest, response));\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function sendRequest(_x) {\n        return _sendRequest.apply(this, arguments);\n      }\n      return sendRequest;\n    }()\n  }, {\n    key: \"_defaultResponseHandler\",\n    value: function () {\n      var _defaultResponseHandler2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(httpRequest, httpResponse) {\n        var _a, retryAfterHeader, delayInMs;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                retryAfterHeader = httpResponse.headers.get(Constants.HeaderConstants.RETRY_AFTER);\n                if (!retryAfterHeader) {\n                  _context2.next = 14;\n                  break;\n                }\n                delayInMs = ThrottlingRetryPolicy.parseRetryAfterHeader(retryAfterHeader);\n                if (!delayInMs) {\n                  _context2.next = 14;\n                  break;\n                }\n                this.numberOfRetries += 1;\n                _context2.next = 7;\n                return delay(delayInMs, {\n                  abortSignal: httpRequest.abortSignal,\n                  abortErrorMsg: StandardAbortMessage\n                });\n              case 7:\n                if (!((_a = httpRequest.abortSignal) === null || _a === void 0 ? void 0 : _a.aborted)) {\n                  _context2.next = 9;\n                  break;\n                }\n                throw new AbortError(StandardAbortMessage);\n              case 9:\n                if (!(this.numberOfRetries < DEFAULT_CLIENT_MAX_RETRY_COUNT)) {\n                  _context2.next = 13;\n                  break;\n                }\n                return _context2.abrupt(\"return\", this.sendRequest(httpRequest));\n              case 13:\n                return _context2.abrupt(\"return\", this._nextPolicy.sendRequest(httpRequest));\n              case 14:\n                return _context2.abrupt(\"return\", httpResponse);\n              case 15:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function _defaultResponseHandler(_x2, _x3) {\n        return _defaultResponseHandler2.apply(this, arguments);\n      }\n      return _defaultResponseHandler;\n    }()\n  }], [{\n    key: \"parseRetryAfterHeader\",\n    value: function parseRetryAfterHeader(headerValue) {\n      var retryAfterInSeconds = Number(headerValue);\n      if (Number.isNaN(retryAfterInSeconds)) {\n        return ThrottlingRetryPolicy.parseDateRetryAfterHeader(headerValue);\n      } else {\n        return retryAfterInSeconds * 1000;\n      }\n    }\n  }, {\n    key: \"parseDateRetryAfterHeader\",\n    value: function parseDateRetryAfterHeader(headerValue) {\n      try {\n        var now = Date.now();\n        var date = Date.parse(headerValue);\n        var diff = date - now;\n        return Number.isNaN(diff) ? undefined : diff;\n      } catch (error) {\n        return undefined;\n      }\n    }\n  }]);\n  return ThrottlingRetryPolicy;\n}(BaseRequestPolicy);","map":{"version":3,"mappings":"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","names":["BaseRequestPolicy","AbortError","Constants","DEFAULT_CLIENT_MAX_RETRY_COUNT","delay","StatusCodes","HttpConstants","throttlingRetryPolicy","create","nextPolicy","options","ThrottlingRetryPolicy","StandardAbortMessage","_handleResponse","_defaultResponseHandler","httpRequest","_nextPolicy","sendRequest","clone","response","status","TooManyRequests","ServiceUnavailable","httpResponse","retryAfterHeader","headers","get","HeaderConstants","RETRY_AFTER","delayInMs","parseRetryAfterHeader","numberOfRetries","abortSignal","abortErrorMsg","aborted","headerValue","retryAfterInSeconds","Number","isNaN","parseDateRetryAfterHeader","now","Date","date","parse","diff","undefined","error"],"sourceRoot":"","sources":["../../../src/policies/throttlingRetryPolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n} from \"./requestPolicy\";\nimport { AbortError } from \"@azure/abort-controller\";\nimport { Constants } from \"../util/constants\";\nimport { DEFAULT_CLIENT_MAX_RETRY_COUNT } from \"../util/throttlingRetryStrategy\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { WebResourceLike } from \"../webResource\";\nimport { delay } from \"@azure/core-util\";\n\ntype ResponseHandler = (\n  httpRequest: WebResourceLike,\n  response: HttpOperationResponse\n) => Promise<HttpOperationResponse>;\nconst StatusCodes = Constants.HttpConstants.StatusCodes;\n\n/**\n * Creates a policy that re-sends the request if the response indicates the request failed because of throttling reasons.\n * For example, if the response contains a `Retry-After` header, it will retry sending the request based on the value of that header.\n *\n * To learn more, please refer to\n * https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-request-limits,\n * https://docs.microsoft.com/en-us/azure/azure-subscription-service-limits and\n * https://docs.microsoft.com/en-us/azure/virtual-machines/troubleshooting/troubleshooting-throttling-errors\n * @returns\n */\nexport function throttlingRetryPolicy(): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new ThrottlingRetryPolicy(nextPolicy, options);\n    },\n  };\n}\n\nconst StandardAbortMessage = \"The operation was aborted.\";\n\n/**\n * Creates a policy that re-sends the request if the response indicates the request failed because of throttling reasons.\n * For example, if the response contains a `Retry-After` header, it will retry sending the request based on the value of that header.\n *\n * To learn more, please refer to\n * https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-request-limits,\n * https://docs.microsoft.com/en-us/azure/azure-subscription-service-limits and\n * https://docs.microsoft.com/en-us/azure/virtual-machines/troubleshooting/troubleshooting-throttling-errors\n */\nexport class ThrottlingRetryPolicy extends BaseRequestPolicy {\n  private _handleResponse: ResponseHandler;\n  private numberOfRetries = 0;\n\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    _handleResponse?: ResponseHandler\n  ) {\n    super(nextPolicy, options);\n    this._handleResponse = _handleResponse || this._defaultResponseHandler;\n  }\n\n  public async sendRequest(httpRequest: WebResourceLike): Promise<HttpOperationResponse> {\n    const response = await this._nextPolicy.sendRequest(httpRequest.clone());\n    if (\n      response.status !== StatusCodes.TooManyRequests &&\n      response.status !== StatusCodes.ServiceUnavailable\n    ) {\n      return response;\n    } else {\n      return this._handleResponse(httpRequest, response);\n    }\n  }\n\n  private async _defaultResponseHandler(\n    httpRequest: WebResourceLike,\n    httpResponse: HttpOperationResponse\n  ): Promise<HttpOperationResponse> {\n    const retryAfterHeader: string | undefined = httpResponse.headers.get(\n      Constants.HeaderConstants.RETRY_AFTER\n    );\n\n    if (retryAfterHeader) {\n      const delayInMs: number | undefined =\n        ThrottlingRetryPolicy.parseRetryAfterHeader(retryAfterHeader);\n      if (delayInMs) {\n        this.numberOfRetries += 1;\n\n        await delay(delayInMs, {\n          abortSignal: httpRequest.abortSignal,\n          abortErrorMsg: StandardAbortMessage,\n        });\n\n        if (httpRequest.abortSignal?.aborted) {\n          throw new AbortError(StandardAbortMessage);\n        }\n\n        if (this.numberOfRetries < DEFAULT_CLIENT_MAX_RETRY_COUNT) {\n          return this.sendRequest(httpRequest);\n        } else {\n          return this._nextPolicy.sendRequest(httpRequest);\n        }\n      }\n    }\n\n    return httpResponse;\n  }\n\n  public static parseRetryAfterHeader(headerValue: string): number | undefined {\n    const retryAfterInSeconds = Number(headerValue);\n    if (Number.isNaN(retryAfterInSeconds)) {\n      return ThrottlingRetryPolicy.parseDateRetryAfterHeader(headerValue);\n    } else {\n      return retryAfterInSeconds * 1000;\n    }\n  }\n\n  public static parseDateRetryAfterHeader(headerValue: string): number | undefined {\n    try {\n      const now: number = Date.now();\n      const date: number = Date.parse(headerValue);\n      const diff = date - now;\n\n      return Number.isNaN(diff) ? undefined : diff;\n    } catch (error: any) {\n      return undefined;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
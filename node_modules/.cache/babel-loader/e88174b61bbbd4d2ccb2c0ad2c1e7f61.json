{"ast":null,"code":"import _classCallCheck from \"/Users/tbeckett/Documents/geo-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tbeckett/Documents/geo-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { HttpHeaders } from \"../httpHeaders\";\n/**\n * Authenticates to a service using an API key.\n */\nexport var ApiKeyCredentials = /*#__PURE__*/function () {\n  /**\n   * @param options - Specifies the options to be provided for auth. Either header or query needs to be provided.\n   */\n  function ApiKeyCredentials(options) {\n    _classCallCheck(this, ApiKeyCredentials);\n    if (!options || options && !options.inHeader && !options.inQuery) {\n      throw new Error(\"options cannot be null or undefined. Either \\\"inHeader\\\" or \\\"inQuery\\\" property of the options object needs to be provided.\");\n    }\n    this.inHeader = options.inHeader;\n    this.inQuery = options.inQuery;\n  }\n  /**\n   * Signs a request with the values provided in the inHeader and inQuery parameter.\n   *\n   * @param webResource - The WebResourceLike to be signed.\n   * @returns The signed request object.\n   */\n  _createClass(ApiKeyCredentials, [{\n    key: \"signRequest\",\n    value: function signRequest(webResource) {\n      if (!webResource) {\n        return Promise.reject(new Error(\"webResource cannot be null or undefined and must be of type \\\"object\\\".\"));\n      }\n      if (this.inHeader) {\n        if (!webResource.headers) {\n          webResource.headers = new HttpHeaders();\n        }\n        for (var headerName in this.inHeader) {\n          webResource.headers.set(headerName, this.inHeader[headerName]);\n        }\n      }\n      if (this.inQuery) {\n        if (!webResource.url) {\n          return Promise.reject(new Error(\"url cannot be null in the request object.\"));\n        }\n        if (webResource.url.indexOf(\"?\") < 0) {\n          webResource.url += \"?\";\n        }\n        for (var key in this.inQuery) {\n          if (!webResource.url.endsWith(\"?\")) {\n            webResource.url += \"&\";\n          }\n          webResource.url += \"\".concat(key, \"=\").concat(this.inQuery[key]);\n        }\n      }\n      return Promise.resolve(webResource);\n    }\n  }]);\n  return ApiKeyCredentials;\n}();","map":{"version":3,"mappings":";;AAAA;AACA;AAEA,SAASA,WAAW,QAAQ,gBAAgB;AAkB5C;;;AAGA,WAAaC,iBAAiB;EAU5B;;;EAGA,2BAAYC,OAAgC;IAAA;IAC1C,IAAI,CAACA,OAAO,IAAKA,OAAO,IAAI,CAACA,OAAO,CAACC,QAAQ,IAAI,CAACD,OAAO,CAACE,OAAQ,EAAE;MAClE,MAAM,IAAIC,KAAK,gIAEd;;IAEH,IAAI,CAACF,QAAQ,GAAGD,OAAO,CAACC,QAAQ;IAChC,IAAI,CAACC,OAAO,GAAGF,OAAO,CAACE,OAAO;EAChC;EAEA;;;;;;EAAA;IAAA;IAAA,OAMA,qBAAYE,WAA4B;MACtC,IAAI,CAACA,WAAW,EAAE;QAChB,OAAOC,OAAO,CAACC,MAAM,CACnB,IAAIH,KAAK,2EAAyE,CACnF;;MAGH,IAAI,IAAI,CAACF,QAAQ,EAAE;QACjB,IAAI,CAACG,WAAW,CAACG,OAAO,EAAE;UACxBH,WAAW,CAACG,OAAO,GAAG,IAAIT,WAAW,EAAE;;QAEzC,KAAK,IAAMU,UAAU,IAAI,IAAI,CAACP,QAAQ,EAAE;UACtCG,WAAW,CAACG,OAAO,CAACE,GAAG,CAACD,UAAU,EAAE,IAAI,CAACP,QAAQ,CAACO,UAAU,CAAC,CAAC;;;MAIlE,IAAI,IAAI,CAACN,OAAO,EAAE;QAChB,IAAI,CAACE,WAAW,CAACM,GAAG,EAAE;UACpB,OAAOL,OAAO,CAACC,MAAM,CAAC,IAAIH,KAAK,6CAA6C,CAAC;;QAE/E,IAAIC,WAAW,CAACM,GAAG,CAACC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;UACpCP,WAAW,CAACM,GAAG,IAAI,GAAG;;QAExB,KAAK,IAAME,GAAG,IAAI,IAAI,CAACV,OAAO,EAAE;UAC9B,IAAI,CAACE,WAAW,CAACM,GAAG,CAACG,QAAQ,CAAC,GAAG,CAAC,EAAE;YAClCT,WAAW,CAACM,GAAG,IAAI,GAAG;;UAExBN,WAAW,CAACM,GAAG,cAAOE,GAAG,cAAI,IAAI,CAACV,OAAO,CAACU,GAAG,CAAC,CAAE;;;MAIpD,OAAOP,OAAO,CAACS,OAAO,CAACV,WAAW,CAAC;IACrC;EAAC;EAAA;AAAA","names":["HttpHeaders","ApiKeyCredentials","options","inHeader","inQuery","Error","webResource","Promise","reject","headers","headerName","set","url","indexOf","key","endsWith","resolve"],"sourceRoot":"","sources":["../../../src/credentials/apiKeyCredentials.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { HttpHeaders } from \"../httpHeaders\";\nimport { ServiceClientCredentials } from \"./serviceClientCredentials\";\nimport { WebResourceLike } from \"../webResource\";\n\n/**\n * Describes the options to be provided while creating an instance of ApiKeyCredentials\n */\nexport interface ApiKeyCredentialOptions {\n  /**\n   * A key value pair of the header parameters that need to be applied to the request.\n   */\n  inHeader?: { [x: string]: any };\n  /**\n   * A key value pair of the query parameters that need to be applied to the request.\n   */\n  inQuery?: { [x: string]: any };\n}\n\n/**\n * Authenticates to a service using an API key.\n */\nexport class ApiKeyCredentials implements ServiceClientCredentials {\n  /**\n   * A key value pair of the header parameters that need to be applied to the request.\n   */\n  private readonly inHeader?: { [x: string]: any };\n  /**\n   * A key value pair of the query parameters that need to be applied to the request.\n   */\n  private readonly inQuery?: { [x: string]: any };\n\n  /**\n   * @param options - Specifies the options to be provided for auth. Either header or query needs to be provided.\n   */\n  constructor(options: ApiKeyCredentialOptions) {\n    if (!options || (options && !options.inHeader && !options.inQuery)) {\n      throw new Error(\n        `options cannot be null or undefined. Either \"inHeader\" or \"inQuery\" property of the options object needs to be provided.`\n      );\n    }\n    this.inHeader = options.inHeader;\n    this.inQuery = options.inQuery;\n  }\n\n  /**\n   * Signs a request with the values provided in the inHeader and inQuery parameter.\n   *\n   * @param webResource - The WebResourceLike to be signed.\n   * @returns The signed request object.\n   */\n  signRequest(webResource: WebResourceLike): Promise<WebResourceLike> {\n    if (!webResource) {\n      return Promise.reject(\n        new Error(`webResource cannot be null or undefined and must be of type \"object\".`)\n      );\n    }\n\n    if (this.inHeader) {\n      if (!webResource.headers) {\n        webResource.headers = new HttpHeaders();\n      }\n      for (const headerName in this.inHeader) {\n        webResource.headers.set(headerName, this.inHeader[headerName]);\n      }\n    }\n\n    if (this.inQuery) {\n      if (!webResource.url) {\n        return Promise.reject(new Error(`url cannot be null in the request object.`));\n      }\n      if (webResource.url.indexOf(\"?\") < 0) {\n        webResource.url += \"?\";\n      }\n      for (const key in this.inQuery) {\n        if (!webResource.url.endsWith(\"?\")) {\n          webResource.url += \"&\";\n        }\n        webResource.url += `${key}=${this.inQuery[key]}`;\n      }\n    }\n\n    return Promise.resolve(webResource);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
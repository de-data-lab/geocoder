{"ast":null,"code":"import _asyncToGenerator from \"/Users/tbeckett/Documents/geo-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/tbeckett/Documents/geo-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tbeckett/Documents/geo-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/tbeckett/Documents/geo-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/tbeckett/Documents/geo-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { BaseRequestPolicy } from \"./requestPolicy\";\nimport { SpanKind, SpanStatusCode, createSpanFunction, getTraceParentHeader, isSpanContextValid } from \"@azure/core-tracing\";\nimport { logger } from \"../log\";\nvar createSpan = createSpanFunction({\n  packagePrefix: \"\",\n  namespace: \"\"\n});\n/**\n * Creates a policy that wraps outgoing requests with a tracing span.\n * @param tracingOptions - Tracing options.\n * @returns An instance of the {@link TracingPolicy} class.\n */\nexport function tracingPolicy() {\n  var tracingOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return {\n    create: function create(nextPolicy, options) {\n      return new TracingPolicy(nextPolicy, options, tracingOptions);\n    }\n  };\n}\n/**\n * A policy that wraps outgoing requests with a tracing span.\n */\nexport var TracingPolicy = /*#__PURE__*/function (_BaseRequestPolicy) {\n  _inherits(TracingPolicy, _BaseRequestPolicy);\n  var _super = _createSuper(TracingPolicy);\n  function TracingPolicy(nextPolicy, options, tracingOptions) {\n    var _this;\n    _classCallCheck(this, TracingPolicy);\n    _this = _super.call(this, nextPolicy, options);\n    _this.userAgent = tracingOptions.userAgent;\n    return _this;\n  }\n  _createClass(TracingPolicy, [{\n    key: \"sendRequest\",\n    value: function () {\n      var _sendRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(request) {\n        var span, response;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (request.tracingContext) {\n                  _context.next = 2;\n                  break;\n                }\n                return _context.abrupt(\"return\", this._nextPolicy.sendRequest(request));\n              case 2:\n                span = this.tryCreateSpan(request);\n                if (span) {\n                  _context.next = 5;\n                  break;\n                }\n                return _context.abrupt(\"return\", this._nextPolicy.sendRequest(request));\n              case 5:\n                _context.prev = 5;\n                _context.next = 8;\n                return this._nextPolicy.sendRequest(request);\n              case 8:\n                response = _context.sent;\n                this.tryProcessResponse(span, response);\n                return _context.abrupt(\"return\", response);\n              case 13:\n                _context.prev = 13;\n                _context.t0 = _context[\"catch\"](5);\n                this.tryProcessError(span, _context.t0);\n                throw _context.t0;\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[5, 13]]);\n      }));\n      function sendRequest(_x) {\n        return _sendRequest.apply(this, arguments);\n      }\n      return sendRequest;\n    }()\n  }, {\n    key: \"tryCreateSpan\",\n    value: function tryCreateSpan(request) {\n      var _a;\n      try {\n        // Passing spanOptions as part of tracingOptions to maintain compatibility @azure/core-tracing@preview.13 and earlier.\n        // We can pass this as a separate parameter once we upgrade to the latest core-tracing.\n        var _createSpan = createSpan(\"HTTP \".concat(request.method), {\n            tracingOptions: {\n              spanOptions: Object.assign(Object.assign({}, request.spanOptions), {\n                kind: SpanKind.CLIENT\n              }),\n              tracingContext: request.tracingContext\n            }\n          }),\n          span = _createSpan.span;\n        // If the span is not recording, don't do any more work.\n        if (!span.isRecording()) {\n          span.end();\n          return undefined;\n        }\n        var namespaceFromContext = (_a = request.tracingContext) === null || _a === void 0 ? void 0 : _a.getValue(Symbol.for(\"az.namespace\"));\n        if (typeof namespaceFromContext === \"string\") {\n          span.setAttribute(\"az.namespace\", namespaceFromContext);\n        }\n        span.setAttributes({\n          \"http.method\": request.method,\n          \"http.url\": request.url,\n          requestId: request.requestId\n        });\n        if (this.userAgent) {\n          span.setAttribute(\"http.user_agent\", this.userAgent);\n        }\n        // set headers\n        var spanContext = span.spanContext();\n        var traceParentHeader = getTraceParentHeader(spanContext);\n        if (traceParentHeader && isSpanContextValid(spanContext)) {\n          request.headers.set(\"traceparent\", traceParentHeader);\n          var traceState = spanContext.traceState && spanContext.traceState.serialize();\n          // if tracestate is set, traceparent MUST be set, so only set tracestate after traceparent\n          if (traceState) {\n            request.headers.set(\"tracestate\", traceState);\n          }\n        }\n        return span;\n      } catch (error) {\n        logger.warning(\"Skipping creating a tracing span due to an error: \".concat(error.message));\n        return undefined;\n      }\n    }\n  }, {\n    key: \"tryProcessError\",\n    value: function tryProcessError(span, err) {\n      try {\n        span.setStatus({\n          code: SpanStatusCode.ERROR,\n          message: err.message\n        });\n        if (err.statusCode) {\n          span.setAttribute(\"http.status_code\", err.statusCode);\n        }\n        span.end();\n      } catch (error) {\n        logger.warning(\"Skipping tracing span processing due to an error: \".concat(error.message));\n      }\n    }\n  }, {\n    key: \"tryProcessResponse\",\n    value: function tryProcessResponse(span, response) {\n      try {\n        span.setAttribute(\"http.status_code\", response.status);\n        var serviceRequestId = response.headers.get(\"x-ms-request-id\");\n        if (serviceRequestId) {\n          span.setAttribute(\"serviceRequestId\", serviceRequestId);\n        }\n        span.setStatus({\n          code: SpanStatusCode.OK\n        });\n        span.end();\n      } catch (error) {\n        logger.warning(\"Skipping tracing span processing due to an error: \".concat(error.message));\n      }\n    }\n  }]);\n  return TracingPolicy;\n}(BaseRequestPolicy);","map":{"version":3,"mappings":"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","names":["BaseRequestPolicy","SpanKind","SpanStatusCode","createSpanFunction","getTraceParentHeader","isSpanContextValid","logger","createSpan","packagePrefix","namespace","tracingPolicy","tracingOptions","create","nextPolicy","options","TracingPolicy","userAgent","request","tracingContext","_nextPolicy","sendRequest","span","tryCreateSpan","response","tryProcessResponse","tryProcessError","method","spanOptions","kind","CLIENT","isRecording","end","undefined","namespaceFromContext","getValue","Symbol","for","setAttribute","setAttributes","url","requestId","spanContext","traceParentHeader","headers","set","traceState","serialize","error","warning","message","err","setStatus","code","ERROR","statusCode","status","serviceRequestId","get","OK"],"sourceRoot":"","sources":["../../../src/policies/tracingPolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n} from \"./requestPolicy\";\nimport {\n  Span,\n  SpanKind,\n  SpanStatusCode,\n  createSpanFunction,\n  getTraceParentHeader,\n  isSpanContextValid,\n} from \"@azure/core-tracing\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { WebResourceLike } from \"../webResource\";\nimport { logger } from \"../log\";\n\nconst createSpan = createSpanFunction({\n  packagePrefix: \"\",\n  namespace: \"\",\n});\n\n/**\n * Options to customize the tracing policy.\n */\nexport interface TracingPolicyOptions {\n  /**\n   * User agent used to better identify the outgoing requests traced by the tracing policy.\n   */\n  userAgent?: string;\n}\n\n/**\n * Creates a policy that wraps outgoing requests with a tracing span.\n * @param tracingOptions - Tracing options.\n * @returns An instance of the {@link TracingPolicy} class.\n */\nexport function tracingPolicy(tracingOptions: TracingPolicyOptions = {}): RequestPolicyFactory {\n  return {\n    create(nextPolicy: RequestPolicy, options: RequestPolicyOptions) {\n      return new TracingPolicy(nextPolicy, options, tracingOptions);\n    },\n  };\n}\n\n/**\n * A policy that wraps outgoing requests with a tracing span.\n */\nexport class TracingPolicy extends BaseRequestPolicy {\n  private userAgent?: string;\n\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    tracingOptions: TracingPolicyOptions\n  ) {\n    super(nextPolicy, options);\n    this.userAgent = tracingOptions.userAgent;\n  }\n\n  public async sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    if (!request.tracingContext) {\n      return this._nextPolicy.sendRequest(request);\n    }\n\n    const span = this.tryCreateSpan(request);\n\n    if (!span) {\n      return this._nextPolicy.sendRequest(request);\n    }\n\n    try {\n      const response = await this._nextPolicy.sendRequest(request);\n      this.tryProcessResponse(span, response);\n      return response;\n    } catch (err: any) {\n      this.tryProcessError(span, err);\n      throw err;\n    }\n  }\n\n  tryCreateSpan(request: WebResourceLike): Span | undefined {\n    try {\n      // Passing spanOptions as part of tracingOptions to maintain compatibility @azure/core-tracing@preview.13 and earlier.\n      // We can pass this as a separate parameter once we upgrade to the latest core-tracing.\n      const { span } = createSpan(`HTTP ${request.method}`, {\n        tracingOptions: {\n          spanOptions: {\n            ...(request as any).spanOptions,\n            kind: SpanKind.CLIENT,\n          },\n          tracingContext: request.tracingContext,\n        },\n      });\n\n      // If the span is not recording, don't do any more work.\n      if (!span.isRecording()) {\n        span.end();\n        return undefined;\n      }\n\n      const namespaceFromContext = request.tracingContext?.getValue(Symbol.for(\"az.namespace\"));\n\n      if (typeof namespaceFromContext === \"string\") {\n        span.setAttribute(\"az.namespace\", namespaceFromContext);\n      }\n\n      span.setAttributes({\n        \"http.method\": request.method,\n        \"http.url\": request.url,\n        requestId: request.requestId,\n      });\n\n      if (this.userAgent) {\n        span.setAttribute(\"http.user_agent\", this.userAgent);\n      }\n\n      // set headers\n      const spanContext = span.spanContext();\n      const traceParentHeader = getTraceParentHeader(spanContext);\n      if (traceParentHeader && isSpanContextValid(spanContext)) {\n        request.headers.set(\"traceparent\", traceParentHeader);\n        const traceState = spanContext.traceState && spanContext.traceState.serialize();\n        // if tracestate is set, traceparent MUST be set, so only set tracestate after traceparent\n        if (traceState) {\n          request.headers.set(\"tracestate\", traceState);\n        }\n      }\n      return span;\n    } catch (error: any) {\n      logger.warning(`Skipping creating a tracing span due to an error: ${error.message}`);\n      return undefined;\n    }\n  }\n\n  private tryProcessError(span: Span, err: any): void {\n    try {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: err.message,\n      });\n\n      if (err.statusCode) {\n        span.setAttribute(\"http.status_code\", err.statusCode);\n      }\n      span.end();\n    } catch (error: any) {\n      logger.warning(`Skipping tracing span processing due to an error: ${error.message}`);\n    }\n  }\n\n  private tryProcessResponse(span: Span, response: HttpOperationResponse): void {\n    try {\n      span.setAttribute(\"http.status_code\", response.status);\n      const serviceRequestId = response.headers.get(\"x-ms-request-id\");\n      if (serviceRequestId) {\n        span.setAttribute(\"serviceRequestId\", serviceRequestId);\n      }\n      span.setStatus({\n        code: SpanStatusCode.OK,\n      });\n      span.end();\n    } catch (error: any) {\n      logger.warning(`Skipping tracing span processing due to an error: ${error.message}`);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { __assign, __spreadArrays } from \"tslib\";\nimport DefaultEvent from \"./DefaultEvent\";\nimport { Constants } from \"../utils/Constants\";\nimport ApiEvent from \"./ApiEvent\";\nimport HttpEvent from \"./HttpEvent\";\nimport { version as libraryVersion } from \"../packageMetadata\";\nvar TelemetryManager = /** @class */function () {\n  function TelemetryManager(config, telemetryEmitter, logger) {\n    // correlation Id to list of events\n    this.completedEvents = {};\n    // event key to event\n    this.inProgressEvents = {};\n    // correlation id to map of eventname to count\n    this.eventCountByCorrelationId = {};\n    // Implement after API EVENT\n    this.onlySendFailureTelemetry = false;\n    // TODO THROW if bad options\n    this.telemetryPlatform = __assign({\n      sdk: Constants.libraryName,\n      sdkVersion: libraryVersion,\n      networkInformation: {\n        // @ts-ignore\n        connectionSpeed: typeof navigator !== \"undefined\" && navigator.connection && navigator.connection.effectiveType\n      }\n    }, config.platform);\n    this.clientId = config.clientId;\n    this.onlySendFailureTelemetry = config.onlySendFailureTelemetry;\n    /*\n     * TODO, when i get to wiring this through, think about what it means if\n     * a developer does not implement telem at all, we still instrument, but telemetryEmitter can be\n     * optional?\n     */\n    this.telemetryEmitter = telemetryEmitter;\n    this.logger = logger;\n  }\n  TelemetryManager.getTelemetrymanagerStub = function (clientId, logger) {\n    var applicationName = \"UnSetStub\";\n    var applicationVersion = \"0.0\";\n    var telemetryEmitter = function () {};\n    var telemetryPlatform = {\n      applicationName: applicationName,\n      applicationVersion: applicationVersion\n    };\n    var telemetryManagerConfig = {\n      platform: telemetryPlatform,\n      clientId: clientId\n    };\n    return new this(telemetryManagerConfig, telemetryEmitter, logger);\n  };\n  TelemetryManager.prototype.startEvent = function (event) {\n    this.logger.verbose(\"Telemetry Event started: \" + event.key);\n    if (!this.telemetryEmitter) {\n      return;\n    }\n    event.start();\n    this.inProgressEvents[event.key] = event;\n  };\n  TelemetryManager.prototype.stopEvent = function (event) {\n    this.logger.verbose(\"Telemetry Event stopped: \" + event.key);\n    if (!this.telemetryEmitter || !this.inProgressEvents[event.key]) {\n      return;\n    }\n    event.stop();\n    this.incrementEventCount(event);\n    var completedEvents = this.completedEvents[event.telemetryCorrelationId];\n    this.completedEvents[event.telemetryCorrelationId] = __spreadArrays(completedEvents || [], [event]);\n    delete this.inProgressEvents[event.key];\n  };\n  TelemetryManager.prototype.flush = function (correlationId) {\n    var _this = this;\n    this.logger.verbose(\"Flushing telemetry events: \" + correlationId);\n    // If there is only unfinished events should this still return them?\n    if (!this.telemetryEmitter || !this.completedEvents[correlationId]) {\n      return;\n    }\n    var orphanedEvents = this.getOrphanedEvents(correlationId);\n    orphanedEvents.forEach(function (event) {\n      return _this.incrementEventCount(event);\n    });\n    var eventsToFlush = __spreadArrays(this.completedEvents[correlationId], orphanedEvents);\n    delete this.completedEvents[correlationId];\n    var eventCountsToFlush = this.eventCountByCorrelationId[correlationId];\n    delete this.eventCountByCorrelationId[correlationId];\n    // TODO add funcitonality for onlyFlushFailures after implementing api event? ??\n    if (!eventsToFlush || !eventsToFlush.length) {\n      return;\n    }\n    var defaultEvent = new DefaultEvent(this.telemetryPlatform, correlationId, this.clientId, eventCountsToFlush);\n    var eventsWithDefaultEvent = __spreadArrays(eventsToFlush, [defaultEvent]);\n    this.telemetryEmitter(eventsWithDefaultEvent.map(function (e) {\n      return e.get();\n    }));\n  };\n  TelemetryManager.prototype.createAndStartApiEvent = function (correlationId, apiEventIdentifier) {\n    var apiEvent = new ApiEvent(correlationId, this.logger.isPiiLoggingEnabled(), apiEventIdentifier);\n    this.startEvent(apiEvent);\n    return apiEvent;\n  };\n  TelemetryManager.prototype.stopAndFlushApiEvent = function (correlationId, apiEvent, wasSuccessful, errorCode) {\n    apiEvent.wasSuccessful = wasSuccessful;\n    if (errorCode) {\n      apiEvent.apiErrorCode = errorCode;\n    }\n    this.stopEvent(apiEvent);\n    this.flush(correlationId);\n  };\n  TelemetryManager.prototype.createAndStartHttpEvent = function (correlation, httpMethod, url, eventLabel) {\n    var httpEvent = new HttpEvent(correlation, eventLabel);\n    httpEvent.url = url;\n    httpEvent.httpMethod = httpMethod;\n    this.startEvent(httpEvent);\n    return httpEvent;\n  };\n  TelemetryManager.prototype.incrementEventCount = function (event) {\n    var _a;\n    /*\n     * TODO, name cache event different?\n     * if type is cache event, change name\n     */\n    var eventName = event.eventName;\n    var eventCount = this.eventCountByCorrelationId[event.telemetryCorrelationId];\n    if (!eventCount) {\n      this.eventCountByCorrelationId[event.telemetryCorrelationId] = (_a = {}, _a[eventName] = 1, _a);\n    } else {\n      eventCount[eventName] = eventCount[eventName] ? eventCount[eventName] + 1 : 1;\n    }\n  };\n  TelemetryManager.prototype.getOrphanedEvents = function (correlationId) {\n    var _this = this;\n    return Object.keys(this.inProgressEvents).reduce(function (memo, eventKey) {\n      if (eventKey.indexOf(correlationId) !== -1) {\n        var event_1 = _this.inProgressEvents[eventKey];\n        delete _this.inProgressEvents[eventKey];\n        return __spreadArrays(memo, [event_1]);\n      }\n      return memo;\n    }, []);\n  };\n  return TelemetryManager;\n}();\nexport default TelemetryManager;","map":{"version":3,"mappings":"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","names":["DefaultEvent","Constants","ApiEvent","HttpEvent","version","libraryVersion","config","telemetryEmitter","logger","telemetryPlatform","sdk","libraryName","sdkVersion","networkInformation","connectionSpeed","navigator","connection","effectiveType","platform","clientId","onlySendFailureTelemetry","TelemetryManager","applicationName","applicationVersion","telemetryManagerConfig","event","verbose","key","start","inProgressEvents","stop","incrementEventCount","completedEvents","telemetryCorrelationId","correlationId","orphanedEvents","getOrphanedEvents","forEach","eventsToFlush","eventCountsToFlush","eventCountByCorrelationId","length","defaultEvent","eventsWithDefaultEvent","map","get","apiEventIdentifier","apiEvent","isPiiLoggingEnabled","startEvent","wasSuccessful","errorCode","apiErrorCode","stopEvent","flush","correlation","httpMethod","url","eventLabel","httpEvent","eventName","eventCount","_a","Object","keys","reduce","memo","eventKey","indexOf","event_1","_this"],"sourceRoot":"","sources":["../../src/telemetry/TelemetryManager.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}
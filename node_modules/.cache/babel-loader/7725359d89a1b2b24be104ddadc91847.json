{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * This is a helper class to construct a string representing the resources accessible by an AccountSAS. Setting a value\n * to true means that any SAS which uses these permissions will grant access to that resource type. Once all the\n * values are set, this should be serialized with toString and set as the resources field on an\n * {@link AccountSASSignatureValues} object. It is possible to construct the resources string without this class, but\n * the order of the resources is particular and this class guarantees correctness.\n */\nexport class AccountSASResourceTypes {\n  constructor() {\n    /**\n     * Permission to access service level APIs granted.\n     */\n    this.service = false;\n    /**\n     * Permission to access container level APIs (Blob Containers, Tables, Queues, File Shares) granted.\n     */\n    this.container = false;\n    /**\n     * Permission to access object level APIs (Blobs, Table Entities, Queue Messages, Files) granted.\n     */\n    this.object = false;\n  }\n  /**\n   * Creates an {@link AccountSASResourceTypes} from the specified resource types string. This method will throw an\n   * Error if it encounters a character that does not correspond to a valid resource type.\n   *\n   * @param resourceTypes -\n   */\n  static parse(resourceTypes) {\n    const accountSASResourceTypes = new AccountSASResourceTypes();\n    for (const c of resourceTypes) {\n      switch (c) {\n        case \"s\":\n          accountSASResourceTypes.service = true;\n          break;\n        case \"c\":\n          accountSASResourceTypes.container = true;\n          break;\n        case \"o\":\n          accountSASResourceTypes.object = true;\n          break;\n        default:\n          throw new RangeError(`Invalid resource type: ${c}`);\n      }\n    }\n    return accountSASResourceTypes;\n  }\n  /**\n   * Converts the given resource types to a string.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas\n   *\n   */\n  toString() {\n    const resourceTypes = [];\n    if (this.service) {\n      resourceTypes.push(\"s\");\n    }\n    if (this.container) {\n      resourceTypes.push(\"c\");\n    }\n    if (this.object) {\n      resourceTypes.push(\"o\");\n    }\n    return resourceTypes.join(\"\");\n  }\n}","map":{"version":3,"mappings":"AAAA;AACA;AAEA;;;;;;;;;AASA,OAAM,MAAOA,uBAAuB;EAApCC;IA6BE;;;IAGO,YAAO,GAAY,KAAK;IAE/B;;;IAGO,cAAS,GAAY,KAAK;IAEjC;;;IAGO,WAAM,GAAY,KAAK;EAqBhC;EA9DE;;;;;;EAMO,OAAOC,KAAK,CAACC,aAAqB;IACvC,MAAMC,uBAAuB,GAAG,IAAIJ,uBAAuB,EAAE;IAE7D,KAAK,MAAMK,CAAC,IAAIF,aAAa,EAAE;MAC7B,QAAQE,CAAC;QACP,KAAK,GAAG;UACND,uBAAuB,CAACE,OAAO,GAAG,IAAI;UACtC;QACF,KAAK,GAAG;UACNF,uBAAuB,CAACG,SAAS,GAAG,IAAI;UACxC;QACF,KAAK,GAAG;UACNH,uBAAuB,CAACI,MAAM,GAAG,IAAI;UACrC;QACF;UACE,MAAM,IAAIC,UAAU,CAAC,0BAA0BJ,CAAC,EAAE,CAAC;MAAC;;IAI1D,OAAOD,uBAAuB;EAChC;EAiBA;;;;;;EAMOM,QAAQ;IACb,MAAMP,aAAa,GAAa,EAAE;IAClC,IAAI,IAAI,CAACG,OAAO,EAAE;MAChBH,aAAa,CAACQ,IAAI,CAAC,GAAG,CAAC;;IAEzB,IAAI,IAAI,CAACJ,SAAS,EAAE;MAClBJ,aAAa,CAACQ,IAAI,CAAC,GAAG,CAAC;;IAEzB,IAAI,IAAI,CAACH,MAAM,EAAE;MACfL,aAAa,CAACQ,IAAI,CAAC,GAAG,CAAC;;IAEzB,OAAOR,aAAa,CAACS,IAAI,CAAC,EAAE,CAAC;EAC/B","names":["AccountSASResourceTypes","constructor","parse","resourceTypes","accountSASResourceTypes","c","service","container","object","RangeError","toString","push","join"],"sourceRoot":"","sources":["../../../../src/sas/AccountSASResourceTypes.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * This is a helper class to construct a string representing the resources accessible by an AccountSAS. Setting a value\n * to true means that any SAS which uses these permissions will grant access to that resource type. Once all the\n * values are set, this should be serialized with toString and set as the resources field on an\n * {@link AccountSASSignatureValues} object. It is possible to construct the resources string without this class, but\n * the order of the resources is particular and this class guarantees correctness.\n */\nexport class AccountSASResourceTypes {\n  /**\n   * Creates an {@link AccountSASResourceTypes} from the specified resource types string. This method will throw an\n   * Error if it encounters a character that does not correspond to a valid resource type.\n   *\n   * @param resourceTypes -\n   */\n  public static parse(resourceTypes: string): AccountSASResourceTypes {\n    const accountSASResourceTypes = new AccountSASResourceTypes();\n\n    for (const c of resourceTypes) {\n      switch (c) {\n        case \"s\":\n          accountSASResourceTypes.service = true;\n          break;\n        case \"c\":\n          accountSASResourceTypes.container = true;\n          break;\n        case \"o\":\n          accountSASResourceTypes.object = true;\n          break;\n        default:\n          throw new RangeError(`Invalid resource type: ${c}`);\n      }\n    }\n\n    return accountSASResourceTypes;\n  }\n\n  /**\n   * Permission to access service level APIs granted.\n   */\n  public service: boolean = false;\n\n  /**\n   * Permission to access container level APIs (Blob Containers, Tables, Queues, File Shares) granted.\n   */\n  public container: boolean = false;\n\n  /**\n   * Permission to access object level APIs (Blobs, Table Entities, Queue Messages, Files) granted.\n   */\n  public object: boolean = false;\n\n  /**\n   * Converts the given resource types to a string.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas\n   *\n   */\n  public toString(): string {\n    const resourceTypes: string[] = [];\n    if (this.service) {\n      resourceTypes.push(\"s\");\n    }\n    if (this.container) {\n      resourceTypes.push(\"c\");\n    }\n    if (this.object) {\n      resourceTypes.push(\"o\");\n    }\n    return resourceTypes.join(\"\");\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
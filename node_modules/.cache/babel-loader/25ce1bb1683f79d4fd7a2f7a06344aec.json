{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/tbeckett/Documents/TI - Project Info/JavaScript_end_to_end_client_file_upload_to_Azure_Storage_Blobs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _asyncToGenerator from \"/Users/tbeckett/Documents/TI - Project Info/JavaScript_end_to_end_client_file_upload_to_Azure_Storage_Blobs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/tbeckett/Documents/TI - Project Info/JavaScript_end_to_end_client_file_upload_to_Azure_Storage_Blobs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tbeckett/Documents/TI - Project Info/JavaScript_end_to_end_client_file_upload_to_Azure_Storage_Blobs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/tbeckett/Documents/TI - Project Info/JavaScript_end_to_end_client_file_upload_to_Azure_Storage_Blobs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/tbeckett/Documents/TI - Project Info/JavaScript_end_to_end_client_file_upload_to_Azure_Storage_Blobs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { AbortError } from \"@azure/abort-controller\";\nimport { BaseRequestPolicy } from \"@azure/core-http\";\nimport { URLConstants } from \"../utils/constants\";\nimport { delay as _delay, setURLHost, setURLParameter } from \"../utils/utils.common\";\nimport { logger } from \"../log\";\n/**\n * A factory method used to generated a RetryPolicy factory.\n *\n * @param retryOptions -\n */\nexport function NewRetryPolicyFactory(retryOptions) {\n  return {\n    create: function create(nextPolicy, options) {\n      return new StorageRetryPolicy(nextPolicy, options, retryOptions);\n    }\n  };\n}\n/**\n * RetryPolicy types.\n */\nexport var StorageRetryPolicyType;\n(function (StorageRetryPolicyType) {\n  /**\n   * Exponential retry. Retry time delay grows exponentially.\n   */\n  StorageRetryPolicyType[StorageRetryPolicyType[\"EXPONENTIAL\"] = 0] = \"EXPONENTIAL\";\n  /**\n   * Linear retry. Retry time delay grows linearly.\n   */\n  StorageRetryPolicyType[StorageRetryPolicyType[\"FIXED\"] = 1] = \"FIXED\";\n})(StorageRetryPolicyType || (StorageRetryPolicyType = {}));\n// Default values of StorageRetryOptions\nvar DEFAULT_RETRY_OPTIONS = {\n  maxRetryDelayInMs: 120 * 1000,\n  maxTries: 4,\n  retryDelayInMs: 4 * 1000,\n  retryPolicyType: StorageRetryPolicyType.EXPONENTIAL,\n  secondaryHost: \"\",\n  tryTimeoutInMs: undefined // Use server side default timeout strategy\n};\n\nvar RETRY_ABORT_ERROR = new AbortError(\"The operation was aborted.\");\n/**\n * Retry policy with exponential retry and linear retry implemented.\n */\nexport var StorageRetryPolicy = /*#__PURE__*/function (_BaseRequestPolicy) {\n  _inherits(StorageRetryPolicy, _BaseRequestPolicy);\n  var _super = _createSuper(StorageRetryPolicy);\n  /**\n   * Creates an instance of RetryPolicy.\n   *\n   * @param nextPolicy -\n   * @param options -\n   * @param retryOptions -\n   */\n  function StorageRetryPolicy(nextPolicy, options) {\n    var _this;\n    var retryOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_RETRY_OPTIONS;\n    _classCallCheck(this, StorageRetryPolicy);\n    _this = _super.call(this, nextPolicy, options);\n    // Initialize retry options\n    _this.retryOptions = {\n      retryPolicyType: retryOptions.retryPolicyType ? retryOptions.retryPolicyType : DEFAULT_RETRY_OPTIONS.retryPolicyType,\n      maxTries: retryOptions.maxTries && retryOptions.maxTries >= 1 ? Math.floor(retryOptions.maxTries) : DEFAULT_RETRY_OPTIONS.maxTries,\n      tryTimeoutInMs: retryOptions.tryTimeoutInMs && retryOptions.tryTimeoutInMs >= 0 ? retryOptions.tryTimeoutInMs : DEFAULT_RETRY_OPTIONS.tryTimeoutInMs,\n      retryDelayInMs: retryOptions.retryDelayInMs && retryOptions.retryDelayInMs >= 0 ? Math.min(retryOptions.retryDelayInMs, retryOptions.maxRetryDelayInMs ? retryOptions.maxRetryDelayInMs : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs) : DEFAULT_RETRY_OPTIONS.retryDelayInMs,\n      maxRetryDelayInMs: retryOptions.maxRetryDelayInMs && retryOptions.maxRetryDelayInMs >= 0 ? retryOptions.maxRetryDelayInMs : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs,\n      secondaryHost: retryOptions.secondaryHost ? retryOptions.secondaryHost : DEFAULT_RETRY_OPTIONS.secondaryHost\n    };\n    return _this;\n  }\n  /**\n   * Sends request.\n   *\n   * @param request -\n   */\n  _createClass(StorageRetryPolicy, [{\n    key: \"sendRequest\",\n    value: function () {\n      var _sendRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(request) {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", this.attemptSendRequest(request, false, 1));\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function sendRequest(_x) {\n        return _sendRequest.apply(this, arguments);\n      }\n      return sendRequest;\n    }()\n    /**\n     * Decide and perform next retry. Won't mutate request parameter.\n     *\n     * @param request -\n     * @param secondaryHas404 -  If attempt was against the secondary & it returned a StatusNotFound (404), then\n     *                                   the resource was not found. This may be due to replication delay. So, in this\n     *                                   case, we'll never try the secondary again for this operation.\n     * @param attempt -           How many retries has been attempted to performed, starting from 1, which includes\n     *                                   the attempt will be performed by this method call.\n     */\n  }, {\n    key: \"attemptSendRequest\",\n    value: function () {\n      var _attemptSendRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(request, secondaryHas404, attempt) {\n        var newRequest, isPrimaryRetry, response;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                newRequest = request.clone();\n                isPrimaryRetry = secondaryHas404 || !this.retryOptions.secondaryHost || !(request.method === \"GET\" || request.method === \"HEAD\" || request.method === \"OPTIONS\") || attempt % 2 === 1;\n                if (!isPrimaryRetry) {\n                  newRequest.url = setURLHost(newRequest.url, this.retryOptions.secondaryHost);\n                }\n                // Set the server-side timeout query parameter \"timeout=[seconds]\"\n                if (this.retryOptions.tryTimeoutInMs) {\n                  newRequest.url = setURLParameter(newRequest.url, URLConstants.Parameters.TIMEOUT, Math.floor(this.retryOptions.tryTimeoutInMs / 1000).toString());\n                }\n                _context2.prev = 4;\n                logger.info(\"RetryPolicy: =====> Try=\".concat(attempt, \" \").concat(isPrimaryRetry ? \"Primary\" : \"Secondary\"));\n                _context2.next = 8;\n                return this._nextPolicy.sendRequest(newRequest);\n              case 8:\n                response = _context2.sent;\n                if (this.shouldRetry(isPrimaryRetry, attempt, response)) {\n                  _context2.next = 11;\n                  break;\n                }\n                return _context2.abrupt(\"return\", response);\n              case 11:\n                secondaryHas404 = secondaryHas404 || !isPrimaryRetry && response.status === 404;\n                _context2.next = 19;\n                break;\n              case 14:\n                _context2.prev = 14;\n                _context2.t0 = _context2[\"catch\"](4);\n                logger.error(\"RetryPolicy: Caught error, message: \".concat(_context2.t0.message, \", code: \").concat(_context2.t0.code));\n                if (this.shouldRetry(isPrimaryRetry, attempt, response, _context2.t0)) {\n                  _context2.next = 19;\n                  break;\n                }\n                throw _context2.t0;\n              case 19:\n                _context2.next = 21;\n                return this.delay(isPrimaryRetry, attempt, request.abortSignal);\n              case 21:\n                return _context2.abrupt(\"return\", this.attemptSendRequest(request, secondaryHas404, ++attempt));\n              case 22:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[4, 14]]);\n      }));\n      function attemptSendRequest(_x2, _x3, _x4) {\n        return _attemptSendRequest.apply(this, arguments);\n      }\n      return attemptSendRequest;\n    }()\n    /**\n     * Decide whether to retry according to last HTTP response and retry counters.\n     *\n     * @param isPrimaryRetry -\n     * @param attempt -\n     * @param response -\n     * @param err -\n     */\n  }, {\n    key: \"shouldRetry\",\n    value: function shouldRetry(isPrimaryRetry, attempt, response, err) {\n      if (attempt >= this.retryOptions.maxTries) {\n        logger.info(\"RetryPolicy: Attempt(s) \".concat(attempt, \" >= maxTries \").concat(this.retryOptions.maxTries, \", no further try.\"));\n        return false;\n      }\n      // Handle network failures, you may need to customize the list when you implement\n      // your own http client\n      var retriableErrors = [\"ETIMEDOUT\", \"ESOCKETTIMEDOUT\", \"ECONNREFUSED\", \"ECONNRESET\", \"ENOENT\", \"ENOTFOUND\", \"TIMEOUT\", \"EPIPE\", \"REQUEST_SEND_ERROR\" // For default xhr based http client provided in ms-rest-js\n      ];\n\n      if (err) {\n        var _iterator = _createForOfIteratorHelper(retriableErrors),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var retriableError = _step.value;\n            if (err.name.toUpperCase().includes(retriableError) || err.message.toUpperCase().includes(retriableError) || err.code && err.code.toString().toUpperCase() === retriableError) {\n              logger.info(\"RetryPolicy: Network error \".concat(retriableError, \" found, will retry.\"));\n              return true;\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n      // If attempt was against the secondary & it returned a StatusNotFound (404), then\n      // the resource was not found. This may be due to replication delay. So, in this\n      // case, we'll never try the secondary again for this operation.\n      if (response || err) {\n        var statusCode = response ? response.status : err ? err.statusCode : 0;\n        if (!isPrimaryRetry && statusCode === 404) {\n          logger.info(\"RetryPolicy: Secondary access with 404, will retry.\");\n          return true;\n        }\n        // Server internal error or server timeout\n        if (statusCode === 503 || statusCode === 500) {\n          logger.info(\"RetryPolicy: Will retry for status code \".concat(statusCode, \".\"));\n          return true;\n        }\n      }\n      if ((err === null || err === void 0 ? void 0 : err.code) === \"PARSE_ERROR\" && (err === null || err === void 0 ? void 0 : err.message.startsWith(\"Error \\\"Error: Unclosed root tag\"))) {\n        logger.info(\"RetryPolicy: Incomplete XML response likely due to service timeout, will retry.\");\n        return true;\n      }\n      return false;\n    }\n    /**\n     * Delay a calculated time between retries.\n     *\n     * @param isPrimaryRetry -\n     * @param attempt -\n     * @param abortSignal -\n     */\n  }, {\n    key: \"delay\",\n    value: function () {\n      var _delay2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(isPrimaryRetry, attempt, abortSignal) {\n        var delayTimeInMs;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                delayTimeInMs = 0;\n                if (!isPrimaryRetry) {\n                  _context3.next = 11;\n                  break;\n                }\n                _context3.t0 = this.retryOptions.retryPolicyType;\n                _context3.next = _context3.t0 === StorageRetryPolicyType.EXPONENTIAL ? 5 : _context3.t0 === StorageRetryPolicyType.FIXED ? 7 : 9;\n                break;\n              case 5:\n                delayTimeInMs = Math.min((Math.pow(2, attempt - 1) - 1) * this.retryOptions.retryDelayInMs, this.retryOptions.maxRetryDelayInMs);\n                return _context3.abrupt(\"break\", 9);\n              case 7:\n                delayTimeInMs = this.retryOptions.retryDelayInMs;\n                return _context3.abrupt(\"break\", 9);\n              case 9:\n                _context3.next = 12;\n                break;\n              case 11:\n                delayTimeInMs = Math.random() * 1000;\n              case 12:\n                logger.info(\"RetryPolicy: Delay for \".concat(delayTimeInMs, \"ms\"));\n                return _context3.abrupt(\"return\", _delay(delayTimeInMs, abortSignal, RETRY_ABORT_ERROR));\n              case 14:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function delay(_x5, _x6, _x7) {\n        return _delay2.apply(this, arguments);\n      }\n      return delay;\n    }()\n  }]);\n  return StorageRetryPolicy;\n}(BaseRequestPolicy);","map":{"version":3,"mappings":"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","names":["AbortError","BaseRequestPolicy","URLConstants","delay","setURLHost","setURLParameter","logger","NewRetryPolicyFactory","retryOptions","create","nextPolicy","options","StorageRetryPolicy","StorageRetryPolicyType","DEFAULT_RETRY_OPTIONS","maxRetryDelayInMs","maxTries","retryDelayInMs","retryPolicyType","EXPONENTIAL","secondaryHost","tryTimeoutInMs","undefined","RETRY_ABORT_ERROR","Math","floor","min","request","attemptSendRequest","secondaryHas404","attempt","newRequest","clone","isPrimaryRetry","method","url","Parameters","TIMEOUT","toString","info","_nextPolicy","sendRequest","response","shouldRetry","status","error","message","code","abortSignal","err","retriableErrors","retriableError","name","toUpperCase","includes","statusCode","startsWith","delayTimeInMs","FIXED","pow","random"],"sourceRoot":"","sources":["../../../../src/policies/StorageRetryPolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AbortError } from \"@azure/abort-controller\";\n\nimport {\n  AbortSignalLike,\n  BaseRequestPolicy,\n  HttpOperationResponse,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n  RestError,\n  WebResource,\n} from \"@azure/core-http\";\n\nimport { StorageRetryOptions } from \"../StorageRetryPolicyFactory\";\nimport { URLConstants } from \"../utils/constants\";\nimport { delay, setURLHost, setURLParameter } from \"../utils/utils.common\";\nimport { logger } from \"../log\";\n\n/**\n * A factory method used to generated a RetryPolicy factory.\n *\n * @param retryOptions -\n */\nexport function NewRetryPolicyFactory(retryOptions?: StorageRetryOptions): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions): StorageRetryPolicy => {\n      return new StorageRetryPolicy(nextPolicy, options, retryOptions);\n    },\n  };\n}\n\n/**\n * RetryPolicy types.\n */\nexport enum StorageRetryPolicyType {\n  /**\n   * Exponential retry. Retry time delay grows exponentially.\n   */\n  EXPONENTIAL,\n  /**\n   * Linear retry. Retry time delay grows linearly.\n   */\n  FIXED,\n}\n\n// Default values of StorageRetryOptions\nconst DEFAULT_RETRY_OPTIONS: StorageRetryOptions = {\n  maxRetryDelayInMs: 120 * 1000,\n  maxTries: 4,\n  retryDelayInMs: 4 * 1000,\n  retryPolicyType: StorageRetryPolicyType.EXPONENTIAL,\n  secondaryHost: \"\",\n  tryTimeoutInMs: undefined, // Use server side default timeout strategy\n};\n\nconst RETRY_ABORT_ERROR = new AbortError(\"The operation was aborted.\");\n\n/**\n * Retry policy with exponential retry and linear retry implemented.\n */\nexport class StorageRetryPolicy extends BaseRequestPolicy {\n  /**\n   * RetryOptions.\n   */\n  private readonly retryOptions: StorageRetryOptions;\n\n  /**\n   * Creates an instance of RetryPolicy.\n   *\n   * @param nextPolicy -\n   * @param options -\n   * @param retryOptions -\n   */\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    retryOptions: StorageRetryOptions = DEFAULT_RETRY_OPTIONS\n  ) {\n    super(nextPolicy, options);\n\n    // Initialize retry options\n    this.retryOptions = {\n      retryPolicyType: retryOptions.retryPolicyType\n        ? retryOptions.retryPolicyType\n        : DEFAULT_RETRY_OPTIONS.retryPolicyType,\n\n      maxTries:\n        retryOptions.maxTries && retryOptions.maxTries >= 1\n          ? Math.floor(retryOptions.maxTries)\n          : DEFAULT_RETRY_OPTIONS.maxTries,\n\n      tryTimeoutInMs:\n        retryOptions.tryTimeoutInMs && retryOptions.tryTimeoutInMs >= 0\n          ? retryOptions.tryTimeoutInMs\n          : DEFAULT_RETRY_OPTIONS.tryTimeoutInMs,\n\n      retryDelayInMs:\n        retryOptions.retryDelayInMs && retryOptions.retryDelayInMs >= 0\n          ? Math.min(\n              retryOptions.retryDelayInMs,\n              retryOptions.maxRetryDelayInMs\n                ? retryOptions.maxRetryDelayInMs\n                : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs!\n            )\n          : DEFAULT_RETRY_OPTIONS.retryDelayInMs,\n\n      maxRetryDelayInMs:\n        retryOptions.maxRetryDelayInMs && retryOptions.maxRetryDelayInMs >= 0\n          ? retryOptions.maxRetryDelayInMs\n          : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs,\n\n      secondaryHost: retryOptions.secondaryHost\n        ? retryOptions.secondaryHost\n        : DEFAULT_RETRY_OPTIONS.secondaryHost,\n    };\n  }\n\n  /**\n   * Sends request.\n   *\n   * @param request -\n   */\n  public async sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    return this.attemptSendRequest(request, false, 1);\n  }\n\n  /**\n   * Decide and perform next retry. Won't mutate request parameter.\n   *\n   * @param request -\n   * @param secondaryHas404 -  If attempt was against the secondary & it returned a StatusNotFound (404), then\n   *                                   the resource was not found. This may be due to replication delay. So, in this\n   *                                   case, we'll never try the secondary again for this operation.\n   * @param attempt -           How many retries has been attempted to performed, starting from 1, which includes\n   *                                   the attempt will be performed by this method call.\n   */\n  protected async attemptSendRequest(\n    request: WebResource,\n    secondaryHas404: boolean,\n    attempt: number\n  ): Promise<HttpOperationResponse> {\n    const newRequest: WebResource = request.clone();\n\n    const isPrimaryRetry =\n      secondaryHas404 ||\n      !this.retryOptions.secondaryHost ||\n      !(request.method === \"GET\" || request.method === \"HEAD\" || request.method === \"OPTIONS\") ||\n      attempt % 2 === 1;\n\n    if (!isPrimaryRetry) {\n      newRequest.url = setURLHost(newRequest.url, this.retryOptions.secondaryHost!);\n    }\n\n    // Set the server-side timeout query parameter \"timeout=[seconds]\"\n    if (this.retryOptions.tryTimeoutInMs) {\n      newRequest.url = setURLParameter(\n        newRequest.url,\n        URLConstants.Parameters.TIMEOUT,\n        Math.floor(this.retryOptions.tryTimeoutInMs! / 1000).toString()\n      );\n    }\n\n    let response: HttpOperationResponse | undefined;\n    try {\n      logger.info(`RetryPolicy: =====> Try=${attempt} ${isPrimaryRetry ? \"Primary\" : \"Secondary\"}`);\n      response = await this._nextPolicy.sendRequest(newRequest);\n      if (!this.shouldRetry(isPrimaryRetry, attempt, response)) {\n        return response;\n      }\n\n      secondaryHas404 = secondaryHas404 || (!isPrimaryRetry && response.status === 404);\n    } catch (err: any) {\n      logger.error(`RetryPolicy: Caught error, message: ${err.message}, code: ${err.code}`);\n      if (!this.shouldRetry(isPrimaryRetry, attempt, response, err)) {\n        throw err;\n      }\n    }\n\n    await this.delay(isPrimaryRetry, attempt, request.abortSignal);\n    return this.attemptSendRequest(request, secondaryHas404, ++attempt);\n  }\n\n  /**\n   * Decide whether to retry according to last HTTP response and retry counters.\n   *\n   * @param isPrimaryRetry -\n   * @param attempt -\n   * @param response -\n   * @param err -\n   */\n  protected shouldRetry(\n    isPrimaryRetry: boolean,\n    attempt: number,\n    response?: HttpOperationResponse,\n    err?: RestError\n  ): boolean {\n    if (attempt >= this.retryOptions.maxTries!) {\n      logger.info(\n        `RetryPolicy: Attempt(s) ${attempt} >= maxTries ${this.retryOptions\n          .maxTries!}, no further try.`\n      );\n      return false;\n    }\n\n    // Handle network failures, you may need to customize the list when you implement\n    // your own http client\n    const retriableErrors = [\n      \"ETIMEDOUT\",\n      \"ESOCKETTIMEDOUT\",\n      \"ECONNREFUSED\",\n      \"ECONNRESET\",\n      \"ENOENT\",\n      \"ENOTFOUND\",\n      \"TIMEOUT\",\n      \"EPIPE\",\n      \"REQUEST_SEND_ERROR\", // For default xhr based http client provided in ms-rest-js\n    ];\n    if (err) {\n      for (const retriableError of retriableErrors) {\n        if (\n          err.name.toUpperCase().includes(retriableError) ||\n          err.message.toUpperCase().includes(retriableError) ||\n          (err.code && err.code.toString().toUpperCase() === retriableError)\n        ) {\n          logger.info(`RetryPolicy: Network error ${retriableError} found, will retry.`);\n          return true;\n        }\n      }\n    }\n\n    // If attempt was against the secondary & it returned a StatusNotFound (404), then\n    // the resource was not found. This may be due to replication delay. So, in this\n    // case, we'll never try the secondary again for this operation.\n    if (response || err) {\n      const statusCode = response ? response.status : err ? err.statusCode : 0;\n      if (!isPrimaryRetry && statusCode === 404) {\n        logger.info(`RetryPolicy: Secondary access with 404, will retry.`);\n        return true;\n      }\n\n      // Server internal error or server timeout\n      if (statusCode === 503 || statusCode === 500) {\n        logger.info(`RetryPolicy: Will retry for status code ${statusCode}.`);\n        return true;\n      }\n    }\n\n    if (err?.code === \"PARSE_ERROR\" && err?.message.startsWith(`Error \"Error: Unclosed root tag`)) {\n      logger.info(\n        \"RetryPolicy: Incomplete XML response likely due to service timeout, will retry.\"\n      );\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Delay a calculated time between retries.\n   *\n   * @param isPrimaryRetry -\n   * @param attempt -\n   * @param abortSignal -\n   */\n  private async delay(isPrimaryRetry: boolean, attempt: number, abortSignal?: AbortSignalLike) {\n    let delayTimeInMs: number = 0;\n\n    if (isPrimaryRetry) {\n      switch (this.retryOptions.retryPolicyType) {\n        case StorageRetryPolicyType.EXPONENTIAL:\n          delayTimeInMs = Math.min(\n            (Math.pow(2, attempt - 1) - 1) * this.retryOptions.retryDelayInMs!,\n            this.retryOptions.maxRetryDelayInMs!\n          );\n          break;\n        case StorageRetryPolicyType.FIXED:\n          delayTimeInMs = this.retryOptions.retryDelayInMs!;\n          break;\n      }\n    } else {\n      delayTimeInMs = Math.random() * 1000;\n    }\n\n    logger.info(`RetryPolicy: Delay for ${delayTimeInMs}ms`);\n    return delay(delayTimeInMs, abortSignal, RETRY_ABORT_ERROR);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
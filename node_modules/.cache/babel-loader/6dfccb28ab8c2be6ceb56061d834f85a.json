{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { __awaiter, __generator } from \"tslib\";\n/**\n * @hidden\n */\nimport { Authority } from \"./Authority\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\nvar AuthorityFactory = /** @class */function () {\n  function AuthorityFactory() {}\n  AuthorityFactory.saveMetadataFromNetwork = function (authorityInstance, telemetryManager, correlationId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var metadata;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, authorityInstance.resolveEndpointsAsync(telemetryManager, correlationId)];\n          case 1:\n            metadata = _a.sent();\n            this.metadataMap.set(authorityInstance.CanonicalAuthority, metadata);\n            return [2 /*return*/, metadata];\n        }\n      });\n    });\n  };\n  AuthorityFactory.getMetadata = function (authorityUrl) {\n    return this.metadataMap.get(authorityUrl);\n  };\n  AuthorityFactory.saveMetadataFromConfig = function (authorityUrl, authorityMetadataJson) {\n    try {\n      if (authorityMetadataJson) {\n        var parsedMetadata = JSON.parse(authorityMetadataJson);\n        if (!parsedMetadata.authorization_endpoint || !parsedMetadata.end_session_endpoint || !parsedMetadata.issuer) {\n          throw ClientConfigurationError.createInvalidAuthorityMetadataError();\n        }\n        this.metadataMap.set(authorityUrl, {\n          AuthorizationEndpoint: parsedMetadata.authorization_endpoint,\n          EndSessionEndpoint: parsedMetadata.end_session_endpoint,\n          Issuer: parsedMetadata.issuer\n        });\n      }\n    } catch (e) {\n      throw ClientConfigurationError.createInvalidAuthorityMetadataError();\n    }\n  };\n  /**\n   * Create an authority object of the correct type based on the url\n   * Performs basic authority validation - checks to see if the authority is of a valid type (eg aad, b2c)\n   */\n  AuthorityFactory.CreateInstance = function (authorityUrl, validateAuthority, authorityMetadata) {\n    if (StringUtils.isEmpty(authorityUrl)) {\n      return null;\n    }\n    if (authorityMetadata) {\n      // todo: log statements\n      this.saveMetadataFromConfig(authorityUrl, authorityMetadata);\n    }\n    return new Authority(authorityUrl, validateAuthority, this.metadataMap.get(authorityUrl));\n  };\n  AuthorityFactory.metadataMap = new Map();\n  return AuthorityFactory;\n}();\nexport { AuthorityFactory };","map":{"version":3,"mappings":"AAAA;;;;;AAKA;;;AAGA,SAASA,SAAS,QAAQ,aAAa;AACvC,SAASC,WAAW,QAAQ,sBAAsB;AAClD,SAASC,wBAAwB,QAAQ,mCAAmC;AAI5E;EAAA,6BAgDA;EA7CwBC,wCAAuB,GAA3C,UAA4CC,iBAA4B,EAAEC,gBAAkC,EAAEC,aAAqB;;;;;;YAC9G,qBAAMF,iBAAiB,CAACG,qBAAqB,CAACF,gBAAgB,EAAEC,aAAa,CAAC;;YAAzFE,QAAQ,GAAGC,SAA8E;YAC/F,IAAI,CAACC,WAAW,CAACC,GAAG,CAACP,iBAAiB,CAACQ,kBAAkB,EAAEJ,QAAQ,CAAC;YACpE,sBAAOA,QAAQ;QAAC;;;GACnB;EAEaL,4BAAW,GAAzB,UAA0BU,YAAoB;IAC1C,OAAO,IAAI,CAACH,WAAW,CAACI,GAAG,CAACD,YAAY,CAAC;EAC7C,CAAC;EAEaV,uCAAsB,GAApC,UAAqCU,YAAoB,EAAEE,qBAA6B;IACpF,IAAI;MACA,IAAIA,qBAAqB,EAAE;QACvB,IAAMC,cAAc,GAAGC,IAAI,CAACC,KAAK,CAACH,qBAAqB,CAAwB;QAE/E,IAAI,CAACC,cAAc,CAACG,sBAAsB,IAAI,CAACH,cAAc,CAACI,oBAAoB,IAAI,CAACJ,cAAc,CAACK,MAAM,EAAE;UAC1G,MAAMnB,wBAAwB,CAACoB,mCAAmC,EAAE;;QAGxE,IAAI,CAACZ,WAAW,CAACC,GAAG,CAACE,YAAY,EAAE;UAC/BU,qBAAqB,EAAEP,cAAc,CAACG,sBAAsB;UAC5DK,kBAAkB,EAAER,cAAc,CAACI,oBAAoB;UACvDK,MAAM,EAAET,cAAc,CAACK;SAC1B,CAAC;;KAET,CAAC,OAAOK,CAAC,EAAE;MACR,MAAMxB,wBAAwB,CAACoB,mCAAmC,EAAE;;EAE5E,CAAC;EAED;;;;EAIcnB,+BAAc,GAA5B,UAA6BU,YAAoB,EAAEc,iBAA0B,EAAEC,iBAA0B;IACrG,IAAI3B,WAAW,CAAC4B,OAAO,CAAChB,YAAY,CAAC,EAAE;MACnC,OAAO,IAAI;;IAGf,IAAIe,iBAAiB,EAAE;MACnB;MACA,IAAI,CAACE,sBAAsB,CAACjB,YAAY,EAAEe,iBAAiB,CAAC;;IAEhE,OAAO,IAAI5B,SAAS,CAACa,YAAY,EAAEc,iBAAiB,EAAE,IAAI,CAACjB,WAAW,CAACI,GAAG,CAACD,YAAY,CAAC,CAAC;EAC7F,CAAC;EA9CcV,4BAAW,GAAG,IAAI4B,GAAG,EAAoC;EA+C5E,uBAAC;CAAA,EAhDD;SAAa5B,gBAAgB","names":["Authority","StringUtils","ClientConfigurationError","AuthorityFactory","authorityInstance","telemetryManager","correlationId","resolveEndpointsAsync","metadata","_a","metadataMap","set","CanonicalAuthority","authorityUrl","get","authorityMetadataJson","parsedMetadata","JSON","parse","authorization_endpoint","end_session_endpoint","issuer","createInvalidAuthorityMetadataError","AuthorizationEndpoint","EndSessionEndpoint","Issuer","e","validateAuthority","authorityMetadata","isEmpty","saveMetadataFromConfig","Map"],"sourceRoot":"","sources":["../../src/authority/AuthorityFactory.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { __assign } from \"tslib\";\nimport { ResponseTypes, ServerHashParamKeys } from \"./Constants\";\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * @hidden\n */\nvar ResponseUtils = /** @class */function () {\n  function ResponseUtils() {}\n  ResponseUtils.setResponseIdToken = function (originalResponse, idTokenObj) {\n    if (!originalResponse) {\n      return null;\n    } else if (!idTokenObj) {\n      return originalResponse;\n    }\n    var exp = Number(idTokenObj.expiration);\n    if (exp && !originalResponse.expiresOn) {\n      originalResponse.expiresOn = new Date(exp * 1000);\n    }\n    return __assign(__assign({}, originalResponse), {\n      idToken: idTokenObj,\n      idTokenClaims: idTokenObj.claims,\n      uniqueId: idTokenObj.objectId || idTokenObj.subject,\n      tenantId: idTokenObj.tenantId\n    });\n  };\n  ResponseUtils.buildAuthResponse = function (idToken, authResponse, serverAuthenticationRequest, account, scopes, accountState) {\n    switch (serverAuthenticationRequest.responseType) {\n      case ResponseTypes.id_token:\n        var idTokenResponse = __assign(__assign({}, authResponse), {\n          tokenType: ServerHashParamKeys.ID_TOKEN,\n          account: account,\n          scopes: scopes,\n          accountState: accountState\n        });\n        idTokenResponse = ResponseUtils.setResponseIdToken(idTokenResponse, idToken);\n        return idTokenResponse.idToken ? idTokenResponse : null;\n      case ResponseTypes.id_token_token:\n        var idTokeTokenResponse = ResponseUtils.setResponseIdToken(authResponse, idToken);\n        return idTokeTokenResponse && idTokeTokenResponse.accessToken && idTokeTokenResponse.idToken ? idTokeTokenResponse : null;\n      case ResponseTypes.token:\n        var tokenResponse = ResponseUtils.setResponseIdToken(authResponse, idToken);\n        return tokenResponse;\n      default:\n        return null;\n    }\n  };\n  return ResponseUtils;\n}();\nexport { ResponseUtils };","map":{"version":3,"mappings":"AAAA;;;;;AAQA,SAASA,aAAa,EAAEC,mBAAmB,QAAQ,aAAa;AAGhE;;;;AAKA;;;AAGA;EAAA,0BA8CA;EA5CWC,gCAAkB,GAAzB,UAA0BC,gBAA8B,EAAEC,UAAmB;IACzE,IAAI,CAACD,gBAAgB,EAAE;MACnB,OAAO,IAAI;KACd,MAAM,IAAI,CAACC,UAAU,EAAE;MACpB,OAAOD,gBAAgB;;IAG3B,IAAME,GAAG,GAAGC,MAAM,CAACF,UAAU,CAACG,UAAU,CAAC;IACzC,IAAIF,GAAG,IAAI,CAACF,gBAAgB,CAACK,SAAS,EAAE;MACpCL,gBAAgB,CAACK,SAAS,GAAG,IAAIC,IAAI,CAACJ,GAAG,GAAG,IAAI,CAAC;;IAGrD,6BACOF,gBAAgB;MACnBO,OAAO,EAAEN,UAAU;MACnBO,aAAa,EAAEP,UAAU,CAACQ,MAAM;MAChCC,QAAQ,EAAET,UAAU,CAACU,QAAQ,IAAIV,UAAU,CAACW,OAAO;MACnDC,QAAQ,EAAEZ,UAAU,CAACY;IAAQ;EAErC,CAAC;EAEMd,+BAAiB,GAAxB,UAAyBQ,OAAgB,EAAEO,YAA0B,EAAEC,2BAAoD,EAAEC,OAAgB,EAAEC,MAAqB,EAAEC,YAAoB;IACtL,QAAOH,2BAA2B,CAACI,YAAY;MAC3C,KAAKtB,aAAa,CAACuB,QAAQ;QACvB,IAAIC,eAAe,yBACZP,YAAY;UACfQ,SAAS,EAAExB,mBAAmB,CAACyB,QAAQ;UACvCP,OAAO,EAAEA,OAAO;UAChBC,MAAM,EAAEA,MAAM;UACdC,YAAY,EAAEA;QAAY,EAC7B;QAEDG,eAAe,GAAGtB,aAAa,CAACyB,kBAAkB,CAACH,eAAe,EAAEd,OAAO,CAAC;QAC5E,OAAQc,eAAe,CAACd,OAAO,GAAIc,eAAe,GAAG,IAAI;MAC7D,KAAKxB,aAAa,CAAC4B,cAAc;QAC7B,IAAMC,mBAAmB,GAAG3B,aAAa,CAACyB,kBAAkB,CAACV,YAAY,EAAEP,OAAO,CAAC;QACnF,OAAQmB,mBAAmB,IAAIA,mBAAmB,CAACC,WAAW,IAAID,mBAAmB,CAACnB,OAAO,GAAImB,mBAAmB,GAAG,IAAI;MAC/H,KAAK7B,aAAa,CAAC+B,KAAK;QACpB,IAAMC,aAAa,GAAG9B,aAAa,CAACyB,kBAAkB,CAACV,YAAY,EAAEP,OAAO,CAAC;QAC7E,OAAOsB,aAAa;MACxB;QACI,OAAO,IAAI;IAAC;EAExB,CAAC;EACL,oBAAC;AAAD,CAAC,EA9CD","names":["ResponseTypes","ServerHashParamKeys","ResponseUtils","originalResponse","idTokenObj","exp","Number","expiration","expiresOn","Date","idToken","idTokenClaims","claims","uniqueId","objectId","subject","tenantId","authResponse","serverAuthenticationRequest","account","scopes","accountState","responseType","id_token","idTokenResponse","tokenType","ID_TOKEN","setResponseIdToken","id_token_token","idTokeTokenResponse","accessToken","token","tokenResponse"],"sourceRoot":"","sources":["../../src/utils/ResponseUtils.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _classCallCheck from \"/Users/tbeckett/Documents/geo-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tbeckett/Documents/geo-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\n/** Class representing a Service. */\nexport var Service = /*#__PURE__*/function () {\n  /**\n   * Initialize a new instance of the class Service class.\n   * @param client Reference to the service client\n   */\n  function Service(client) {\n    _classCallCheck(this, Service);\n    this.client = client;\n  }\n  /**\n   * Sets properties for a storage account's Blob service endpoint, including properties for Storage\n   * Analytics and CORS (Cross-Origin Resource Sharing) rules\n   * @param blobServiceProperties The StorageService properties.\n   * @param options The options parameters.\n   */\n  _createClass(Service, [{\n    key: \"setProperties\",\n    value: function setProperties(blobServiceProperties, options) {\n      var operationArguments = {\n        blobServiceProperties: blobServiceProperties,\n        options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n      };\n      return this.client.sendOperationRequest(operationArguments, setPropertiesOperationSpec);\n    }\n    /**\n     * gets the properties of a storage account's Blob service, including properties for Storage Analytics\n     * and CORS (Cross-Origin Resource Sharing) rules.\n     * @param options The options parameters.\n     */\n  }, {\n    key: \"getProperties\",\n    value: function getProperties(options) {\n      var operationArguments = {\n        options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n      };\n      return this.client.sendOperationRequest(operationArguments, getPropertiesOperationSpec);\n    }\n    /**\n     * Retrieves statistics related to replication for the Blob service. It is only available on the\n     * secondary location endpoint when read-access geo-redundant replication is enabled for the storage\n     * account.\n     * @param options The options parameters.\n     */\n  }, {\n    key: \"getStatistics\",\n    value: function getStatistics(options) {\n      var operationArguments = {\n        options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n      };\n      return this.client.sendOperationRequest(operationArguments, getStatisticsOperationSpec);\n    }\n    /**\n     * The List Containers Segment operation returns a list of the containers under the specified account\n     * @param options The options parameters.\n     */\n  }, {\n    key: \"listContainersSegment\",\n    value: function listContainersSegment(options) {\n      var operationArguments = {\n        options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n      };\n      return this.client.sendOperationRequest(operationArguments, listContainersSegmentOperationSpec);\n    }\n    /**\n     * Retrieves a user delegation key for the Blob service. This is only a valid operation when using\n     * bearer token authentication.\n     * @param keyInfo Key information\n     * @param options The options parameters.\n     */\n  }, {\n    key: \"getUserDelegationKey\",\n    value: function getUserDelegationKey(keyInfo, options) {\n      var operationArguments = {\n        keyInfo: keyInfo,\n        options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n      };\n      return this.client.sendOperationRequest(operationArguments, getUserDelegationKeyOperationSpec);\n    }\n    /**\n     * Returns the sku name and account kind\n     * @param options The options parameters.\n     */\n  }, {\n    key: \"getAccountInfo\",\n    value: function getAccountInfo(options) {\n      var operationArguments = {\n        options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n      };\n      return this.client.sendOperationRequest(operationArguments, getAccountInfoOperationSpec);\n    }\n    /**\n     * The Batch operation allows multiple API calls to be embedded into a single HTTP request.\n     * @param contentLength The length of the request.\n     * @param multipartContentType Required. The value of this header must be multipart/mixed with a batch\n     *                             boundary. Example header value: multipart/mixed; boundary=batch_<GUID>\n     * @param body Initial data\n     * @param options The options parameters.\n     */\n  }, {\n    key: \"submitBatch\",\n    value: function submitBatch(contentLength, multipartContentType, body, options) {\n      var operationArguments = {\n        contentLength: contentLength,\n        multipartContentType: multipartContentType,\n        body: body,\n        options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n      };\n      return this.client.sendOperationRequest(operationArguments, submitBatchOperationSpec);\n    }\n    /**\n     * The Filter Blobs operation enables callers to list blobs across all containers whose tags match a\n     * given search expression.  Filter blobs searches across all containers within a storage account but\n     * can be scoped within the expression to a single container.\n     * @param options The options parameters.\n     */\n  }, {\n    key: \"filterBlobs\",\n    value: function filterBlobs(options) {\n      var operationArguments = {\n        options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n      };\n      return this.client.sendOperationRequest(operationArguments, filterBlobsOperationSpec);\n    }\n  }]);\n  return Service;\n}();\n// Operation Specifications\nvar xmlSerializer = new coreHttp.Serializer(Mappers, /* isXml */true);\nvar setPropertiesOperationSpec = {\n  path: \"/\",\n  httpMethod: \"PUT\",\n  responses: {\n    202: {\n      headersMapper: Mappers.ServiceSetPropertiesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ServiceSetPropertiesExceptionHeaders\n    }\n  },\n  requestBody: Parameters.blobServiceProperties,\n  queryParameters: [Parameters.restype, Parameters.comp, Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.contentType, Parameters.accept, Parameters.version, Parameters.requestId],\n  isXML: true,\n  contentType: \"application/xml; charset=utf-8\",\n  mediaType: \"xml\",\n  serializer: xmlSerializer\n};\nvar getPropertiesOperationSpec = {\n  path: \"/\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.BlobServiceProperties,\n      headersMapper: Mappers.ServiceGetPropertiesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ServiceGetPropertiesExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.restype, Parameters.comp, Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1],\n  isXML: true,\n  serializer: xmlSerializer\n};\nvar getStatisticsOperationSpec = {\n  path: \"/\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.BlobServiceStatistics,\n      headersMapper: Mappers.ServiceGetStatisticsHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ServiceGetStatisticsExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.restype, Parameters.timeoutInSeconds, Parameters.comp1],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1],\n  isXML: true,\n  serializer: xmlSerializer\n};\nvar listContainersSegmentOperationSpec = {\n  path: \"/\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListContainersSegmentResponse,\n      headersMapper: Mappers.ServiceListContainersSegmentHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ServiceListContainersSegmentExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp2, Parameters.prefix, Parameters.marker, Parameters.maxPageSize, Parameters.include],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1],\n  isXML: true,\n  serializer: xmlSerializer\n};\nvar getUserDelegationKeyOperationSpec = {\n  path: \"/\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.UserDelegationKey,\n      headersMapper: Mappers.ServiceGetUserDelegationKeyHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ServiceGetUserDelegationKeyExceptionHeaders\n    }\n  },\n  requestBody: Parameters.keyInfo,\n  queryParameters: [Parameters.restype, Parameters.timeoutInSeconds, Parameters.comp3],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.contentType, Parameters.accept, Parameters.version, Parameters.requestId],\n  isXML: true,\n  contentType: \"application/xml; charset=utf-8\",\n  mediaType: \"xml\",\n  serializer: xmlSerializer\n};\nvar getAccountInfoOperationSpec = {\n  path: \"/\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ServiceGetAccountInfoHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ServiceGetAccountInfoExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.comp, Parameters.restype1],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.accept1],\n  isXML: true,\n  serializer: xmlSerializer\n};\nvar submitBatchOperationSpec = {\n  path: \"/\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {\n      bodyMapper: {\n        type: {\n          name: \"Stream\"\n        },\n        serializedName: \"parsedResponse\"\n      },\n      headersMapper: Mappers.ServiceSubmitBatchHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ServiceSubmitBatchExceptionHeaders\n    }\n  },\n  requestBody: Parameters.body,\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp4],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.contentType, Parameters.accept, Parameters.version, Parameters.requestId, Parameters.contentLength, Parameters.multipartContentType],\n  isXML: true,\n  contentType: \"application/xml; charset=utf-8\",\n  mediaType: \"xml\",\n  serializer: xmlSerializer\n};\nvar filterBlobsOperationSpec = {\n  path: \"/\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.FilterBlobSegment,\n      headersMapper: Mappers.ServiceFilterBlobsHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ServiceFilterBlobsExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.marker, Parameters.maxPageSize, Parameters.comp5, Parameters.where],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1],\n  isXML: true,\n  serializer: xmlSerializer\n};","map":{"version":3,"mappings":"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","names":["coreHttp","Mappers","Parameters","Service","client","blobServiceProperties","options","operationArguments","operationOptionsToRequestOptionsBase","sendOperationRequest","setPropertiesOperationSpec","getPropertiesOperationSpec","getStatisticsOperationSpec","listContainersSegmentOperationSpec","keyInfo","getUserDelegationKeyOperationSpec","getAccountInfoOperationSpec","contentLength","multipartContentType","body","submitBatchOperationSpec","filterBlobsOperationSpec","xmlSerializer","Serializer","path","httpMethod","responses","headersMapper","ServiceSetPropertiesHeaders","default","bodyMapper","StorageError","ServiceSetPropertiesExceptionHeaders","requestBody","queryParameters","restype","comp","timeoutInSeconds","urlParameters","url","headerParameters","contentType","accept","version","requestId","isXML","mediaType","serializer","BlobServiceProperties","ServiceGetPropertiesHeaders","ServiceGetPropertiesExceptionHeaders","accept1","BlobServiceStatistics","ServiceGetStatisticsHeaders","ServiceGetStatisticsExceptionHeaders","comp1","ListContainersSegmentResponse","ServiceListContainersSegmentHeaders","ServiceListContainersSegmentExceptionHeaders","comp2","prefix","marker","maxPageSize","include","UserDelegationKey","ServiceGetUserDelegationKeyHeaders","ServiceGetUserDelegationKeyExceptionHeaders","comp3","ServiceGetAccountInfoHeaders","ServiceGetAccountInfoExceptionHeaders","restype1","type","name","serializedName","ServiceSubmitBatchHeaders","ServiceSubmitBatchExceptionHeaders","comp4","FilterBlobSegment","ServiceFilterBlobsHeaders","ServiceFilterBlobsExceptionHeaders","comp5","where"],"sourceRoot":"","sources":["../../../../../../src/generated/src/operations/service.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { StorageClientContext } from \"../storageClientContext\";\nimport {\n  BlobServiceProperties,\n  ServiceSetPropertiesOptionalParams,\n  ServiceSetPropertiesResponse,\n  ServiceGetPropertiesOptionalParams,\n  ServiceGetPropertiesResponse,\n  ServiceGetStatisticsOptionalParams,\n  ServiceGetStatisticsResponse,\n  ServiceListContainersSegmentOptionalParams,\n  ServiceListContainersSegmentResponse,\n  KeyInfo,\n  ServiceGetUserDelegationKeyOptionalParams,\n  ServiceGetUserDelegationKeyResponse,\n  ServiceGetAccountInfoResponse,\n  ServiceSubmitBatchOptionalParams,\n  ServiceSubmitBatchResponse,\n  ServiceFilterBlobsOptionalParams,\n  ServiceFilterBlobsResponse\n} from \"../models\";\n\n/** Class representing a Service. */\nexport class Service {\n  private readonly client: StorageClientContext;\n\n  /**\n   * Initialize a new instance of the class Service class.\n   * @param client Reference to the service client\n   */\n  constructor(client: StorageClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * Sets properties for a storage account's Blob service endpoint, including properties for Storage\n   * Analytics and CORS (Cross-Origin Resource Sharing) rules\n   * @param blobServiceProperties The StorageService properties.\n   * @param options The options parameters.\n   */\n  setProperties(\n    blobServiceProperties: BlobServiceProperties,\n    options?: ServiceSetPropertiesOptionalParams\n  ): Promise<ServiceSetPropertiesResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      blobServiceProperties,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      setPropertiesOperationSpec\n    ) as Promise<ServiceSetPropertiesResponse>;\n  }\n\n  /**\n   * gets the properties of a storage account's Blob service, including properties for Storage Analytics\n   * and CORS (Cross-Origin Resource Sharing) rules.\n   * @param options The options parameters.\n   */\n  getProperties(\n    options?: ServiceGetPropertiesOptionalParams\n  ): Promise<ServiceGetPropertiesResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      getPropertiesOperationSpec\n    ) as Promise<ServiceGetPropertiesResponse>;\n  }\n\n  /**\n   * Retrieves statistics related to replication for the Blob service. It is only available on the\n   * secondary location endpoint when read-access geo-redundant replication is enabled for the storage\n   * account.\n   * @param options The options parameters.\n   */\n  getStatistics(\n    options?: ServiceGetStatisticsOptionalParams\n  ): Promise<ServiceGetStatisticsResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      getStatisticsOperationSpec\n    ) as Promise<ServiceGetStatisticsResponse>;\n  }\n\n  /**\n   * The List Containers Segment operation returns a list of the containers under the specified account\n   * @param options The options parameters.\n   */\n  listContainersSegment(\n    options?: ServiceListContainersSegmentOptionalParams\n  ): Promise<ServiceListContainersSegmentResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      listContainersSegmentOperationSpec\n    ) as Promise<ServiceListContainersSegmentResponse>;\n  }\n\n  /**\n   * Retrieves a user delegation key for the Blob service. This is only a valid operation when using\n   * bearer token authentication.\n   * @param keyInfo Key information\n   * @param options The options parameters.\n   */\n  getUserDelegationKey(\n    keyInfo: KeyInfo,\n    options?: ServiceGetUserDelegationKeyOptionalParams\n  ): Promise<ServiceGetUserDelegationKeyResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      keyInfo,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      getUserDelegationKeyOperationSpec\n    ) as Promise<ServiceGetUserDelegationKeyResponse>;\n  }\n\n  /**\n   * Returns the sku name and account kind\n   * @param options The options parameters.\n   */\n  getAccountInfo(\n    options?: coreHttp.OperationOptions\n  ): Promise<ServiceGetAccountInfoResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      getAccountInfoOperationSpec\n    ) as Promise<ServiceGetAccountInfoResponse>;\n  }\n\n  /**\n   * The Batch operation allows multiple API calls to be embedded into a single HTTP request.\n   * @param contentLength The length of the request.\n   * @param multipartContentType Required. The value of this header must be multipart/mixed with a batch\n   *                             boundary. Example header value: multipart/mixed; boundary=batch_<GUID>\n   * @param body Initial data\n   * @param options The options parameters.\n   */\n  submitBatch(\n    contentLength: number,\n    multipartContentType: string,\n    body: coreHttp.HttpRequestBody,\n    options?: ServiceSubmitBatchOptionalParams\n  ): Promise<ServiceSubmitBatchResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      contentLength,\n      multipartContentType,\n      body,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      submitBatchOperationSpec\n    ) as Promise<ServiceSubmitBatchResponse>;\n  }\n\n  /**\n   * The Filter Blobs operation enables callers to list blobs across all containers whose tags match a\n   * given search expression.  Filter blobs searches across all containers within a storage account but\n   * can be scoped within the expression to a single container.\n   * @param options The options parameters.\n   */\n  filterBlobs(\n    options?: ServiceFilterBlobsOptionalParams\n  ): Promise<ServiceFilterBlobsResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      filterBlobsOperationSpec\n    ) as Promise<ServiceFilterBlobsResponse>;\n  }\n}\n// Operation Specifications\nconst xmlSerializer = new coreHttp.Serializer(Mappers, /* isXml */ true);\n\nconst setPropertiesOperationSpec: coreHttp.OperationSpec = {\n  path: \"/\",\n  httpMethod: \"PUT\",\n  responses: {\n    202: {\n      headersMapper: Mappers.ServiceSetPropertiesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ServiceSetPropertiesExceptionHeaders\n    }\n  },\n  requestBody: Parameters.blobServiceProperties,\n  queryParameters: [\n    Parameters.restype,\n    Parameters.comp,\n    Parameters.timeoutInSeconds\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.contentType,\n    Parameters.accept,\n    Parameters.version,\n    Parameters.requestId\n  ],\n  isXML: true,\n  contentType: \"application/xml; charset=utf-8\",\n  mediaType: \"xml\",\n  serializer: xmlSerializer\n};\nconst getPropertiesOperationSpec: coreHttp.OperationSpec = {\n  path: \"/\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.BlobServiceProperties,\n      headersMapper: Mappers.ServiceGetPropertiesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ServiceGetPropertiesExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.restype,\n    Parameters.comp,\n    Parameters.timeoutInSeconds\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst getStatisticsOperationSpec: coreHttp.OperationSpec = {\n  path: \"/\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.BlobServiceStatistics,\n      headersMapper: Mappers.ServiceGetStatisticsHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ServiceGetStatisticsExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.restype,\n    Parameters.timeoutInSeconds,\n    Parameters.comp1\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst listContainersSegmentOperationSpec: coreHttp.OperationSpec = {\n  path: \"/\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListContainersSegmentResponse,\n      headersMapper: Mappers.ServiceListContainersSegmentHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ServiceListContainersSegmentExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.comp2,\n    Parameters.prefix,\n    Parameters.marker,\n    Parameters.maxPageSize,\n    Parameters.include\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst getUserDelegationKeyOperationSpec: coreHttp.OperationSpec = {\n  path: \"/\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.UserDelegationKey,\n      headersMapper: Mappers.ServiceGetUserDelegationKeyHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ServiceGetUserDelegationKeyExceptionHeaders\n    }\n  },\n  requestBody: Parameters.keyInfo,\n  queryParameters: [\n    Parameters.restype,\n    Parameters.timeoutInSeconds,\n    Parameters.comp3\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.contentType,\n    Parameters.accept,\n    Parameters.version,\n    Parameters.requestId\n  ],\n  isXML: true,\n  contentType: \"application/xml; charset=utf-8\",\n  mediaType: \"xml\",\n  serializer: xmlSerializer\n};\nconst getAccountInfoOperationSpec: coreHttp.OperationSpec = {\n  path: \"/\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ServiceGetAccountInfoHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ServiceGetAccountInfoExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.comp, Parameters.restype1],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.accept1],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst submitBatchOperationSpec: coreHttp.OperationSpec = {\n  path: \"/\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {\n      bodyMapper: {\n        type: { name: \"Stream\" },\n        serializedName: \"parsedResponse\"\n      },\n      headersMapper: Mappers.ServiceSubmitBatchHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ServiceSubmitBatchExceptionHeaders\n    }\n  },\n  requestBody: Parameters.body,\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp4],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.contentType,\n    Parameters.accept,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.contentLength,\n    Parameters.multipartContentType\n  ],\n  isXML: true,\n  contentType: \"application/xml; charset=utf-8\",\n  mediaType: \"xml\",\n  serializer: xmlSerializer\n};\nconst filterBlobsOperationSpec: coreHttp.OperationSpec = {\n  path: \"/\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.FilterBlobSegment,\n      headersMapper: Mappers.ServiceFilterBlobsHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ServiceFilterBlobsExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.marker,\n    Parameters.maxPageSize,\n    Parameters.comp5,\n    Parameters.where\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\n"]},"metadata":{},"sourceType":"module"}
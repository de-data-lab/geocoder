{"ast":null,"code":"// ./src/azure-storage-blob.ts\n\n// <snippet_package>\n// THIS IS SAMPLE CODE ONLY - NOT MEANT FOR PRODUCTION USE\nimport { BlobServiceClient } from '@azure/storage-blob';\n\n// THIS IS SAMPLE CODE ONLY - DON'T STORE TOKEN IN PRODUCTION CODE\nconst containerName = \"tutorial-container\"; //\"`tutorial-container`\";\nconst sasToken = process.env.SAS_TOKEN; // || \"sv=2021-06-08&ss=bfqt&srt=sco&sp=rwdlacupiytfx&se=2022-12-28T22:53:41Z&st=2022-12-28T14:53:41Z&spr=https&sig=6clc0kWfhel%2FZxOA%2FAkN2zuVmldyCzD2l3grmcr93Bg%3D\"; // Fill string with your SAS token\nconst storageAccountName = process.env.STORAGE_ACCOUNT_NAME; // || \"reactuploadtest\";  Fill string with your Storage resource name\n// </snippet_package>\n\n// <snippet_isStorageConfigured>\n// Feature flag - disable storage feature to app if not configured\nexport const isStorageConfigured = () => {\n  return !storageAccountName || !sasToken ? false : true;\n};\n// </snippet_isStorageConfigured>\n\n// <snippet_getBlobsInContainer>\n// return list of blobs in container to display\nconst getBlobsInContainer = async containerClient => {\n  const returnedBlobUrls = [];\n\n  // get list of blobs in container\n  // eslint-disable-next-line\n  for await (const blob of containerClient.listBlobsFlat()) {\n    // if image is public, just construct URL\n    returnedBlobUrls.push(`https://${storageAccountName}.blob.core.windows.net/${containerName}/${blob.name}`);\n  }\n  return returnedBlobUrls;\n};\n// </snippet_getBlobsInContainer>\n\n// <snippet_createBlobInContainer>\nconst createBlobInContainer = async (containerClient, file) => {\n  // create blobClient for container\n  const blobClient = containerClient.getBlockBlobClient(file.name);\n\n  // set mimetype as determined from browser with file upload control\n  const options = {\n    blobHTTPHeaders: {\n      blobContentType: file.type\n    }\n  };\n\n  // upload file\n  await blobClient.uploadBrowserData(file, options);\n};\n// </snippet_createBlobInContainer>\n\n// <snippet_uploadFileToBlob>\nconst uploadFileToBlob = async file => {\n  if (!file) return [];\n\n  // get BlobService = notice `?` is pulled out of sasToken - if created in Azure portal\n  const blobService = new BlobServiceClient(`https://${storageAccountName}.blob.core.windows.net/?${sasToken}`);\n\n  // get Container - full public read access\n  const containerClient = blobService.getContainerClient(containerName);\n  await containerClient.createIfNotExists({\n    access: 'container'\n  });\n\n  // upload file\n  await createBlobInContainer(containerClient, file);\n\n  // get list of blobs in container\n  return getBlobsInContainer(containerClient);\n};\n// </snippet_uploadFileToBlob>\n\nexport default uploadFileToBlob;","map":{"version":3,"names":["BlobServiceClient","containerName","sasToken","process","env","SAS_TOKEN","storageAccountName","STORAGE_ACCOUNT_NAME","isStorageConfigured","getBlobsInContainer","containerClient","returnedBlobUrls","blob","listBlobsFlat","push","name","createBlobInContainer","file","blobClient","getBlockBlobClient","options","blobHTTPHeaders","blobContentType","type","uploadBrowserData","uploadFileToBlob","blobService","getContainerClient","createIfNotExists","access"],"sources":["/Users/tbeckett/Documents/TI - Project Info/JavaScript_end_to_end_client_file_upload_to_Azure_Storage_Blobs/src/azure-storage-blob.ts"],"sourcesContent":["// ./src/azure-storage-blob.ts\r\n\r\n// <snippet_package>\r\n// THIS IS SAMPLE CODE ONLY - NOT MEANT FOR PRODUCTION USE\r\nimport { BlobServiceClient, ContainerClient} from '@azure/storage-blob';\r\n\r\n// THIS IS SAMPLE CODE ONLY - DON'T STORE TOKEN IN PRODUCTION CODE\r\nconst containerName = \"tutorial-container\"; //\"`tutorial-container`\";\r\nconst sasToken = process.env.SAS_TOKEN; // || \"sv=2021-06-08&ss=bfqt&srt=sco&sp=rwdlacupiytfx&se=2022-12-28T22:53:41Z&st=2022-12-28T14:53:41Z&spr=https&sig=6clc0kWfhel%2FZxOA%2FAkN2zuVmldyCzD2l3grmcr93Bg%3D\"; // Fill string with your SAS token\r\nconst storageAccountName = process.env.STORAGE_ACCOUNT_NAME; // || \"reactuploadtest\";  Fill string with your Storage resource name\r\n// </snippet_package>\r\n\r\n// <snippet_isStorageConfigured>\r\n// Feature flag - disable storage feature to app if not configured\r\nexport const isStorageConfigured = () => {\r\n  return (!storageAccountName || !sasToken) ? false : true;\r\n}\r\n// </snippet_isStorageConfigured>\r\n\r\n// <snippet_getBlobsInContainer>\r\n// return list of blobs in container to display\r\nconst getBlobsInContainer = async (containerClient: ContainerClient) => {\r\n  const returnedBlobUrls: string[] = [];\r\n\r\n  // get list of blobs in container\r\n  // eslint-disable-next-line\r\n  for await (const blob of containerClient.listBlobsFlat()) {\r\n    // if image is public, just construct URL\r\n    returnedBlobUrls.push(\r\n      `https://${storageAccountName}.blob.core.windows.net/${containerName}/${blob.name}`\r\n    );\r\n  }\r\n\r\n  return returnedBlobUrls;\r\n}\r\n// </snippet_getBlobsInContainer>\r\n\r\n// <snippet_createBlobInContainer>\r\nconst createBlobInContainer = async (containerClient: ContainerClient, file: File) => {\r\n  \r\n  // create blobClient for container\r\n  const blobClient = containerClient.getBlockBlobClient(file.name);\r\n\r\n  // set mimetype as determined from browser with file upload control\r\n  const options = { blobHTTPHeaders: { blobContentType: file.type } };\r\n\r\n  // upload file\r\n  await blobClient.uploadBrowserData(file, options);\r\n}\r\n// </snippet_createBlobInContainer>\r\n\r\n// <snippet_uploadFileToBlob>\r\nconst uploadFileToBlob = async (file: File | null): Promise<string[]> => {\r\n  if (!file) return [];\r\n\r\n  // get BlobService = notice `?` is pulled out of sasToken - if created in Azure portal\r\n  const blobService = new BlobServiceClient(\r\n    `https://${storageAccountName}.blob.core.windows.net/?${sasToken}`\r\n  );\r\n\r\n  // get Container - full public read access\r\n  const containerClient: ContainerClient = blobService.getContainerClient(containerName);\r\n  await containerClient.createIfNotExists({\r\n    access: 'container',\r\n  });\r\n\r\n  // upload file\r\n  await createBlobInContainer(containerClient, file);\r\n\r\n  // get list of blobs in container\r\n  return getBlobsInContainer(containerClient);\r\n};\r\n// </snippet_uploadFileToBlob>\r\n\r\nexport default uploadFileToBlob;\r\n\r\n"],"mappings":"AAAA;;AAEA;AACA;AACA,SAASA,iBAAiB,QAAwB,qBAAqB;;AAEvE;AACA,MAAMC,aAAa,GAAG,oBAAoB,CAAC,CAAC;AAC5C,MAAMC,QAAQ,GAAGC,OAAO,CAACC,GAAG,CAACC,SAAS,CAAC,CAAC;AACxC,MAAMC,kBAAkB,GAAGH,OAAO,CAACC,GAAG,CAACG,oBAAoB,CAAC,CAAC;AAC7D;;AAEA;AACA;AACA,OAAO,MAAMC,mBAAmB,GAAG,MAAM;EACvC,OAAQ,CAACF,kBAAkB,IAAI,CAACJ,QAAQ,GAAI,KAAK,GAAG,IAAI;AAC1D,CAAC;AACD;;AAEA;AACA;AACA,MAAMO,mBAAmB,GAAG,MAAOC,eAAgC,IAAK;EACtE,MAAMC,gBAA0B,GAAG,EAAE;;EAErC;EACA;EACA,WAAW,MAAMC,IAAI,IAAIF,eAAe,CAACG,aAAa,EAAE,EAAE;IACxD;IACAF,gBAAgB,CAACG,IAAI,CAClB,WAAUR,kBAAmB,0BAAyBL,aAAc,IAAGW,IAAI,CAACG,IAAK,EAAC,CACpF;EACH;EAEA,OAAOJ,gBAAgB;AACzB,CAAC;AACD;;AAEA;AACA,MAAMK,qBAAqB,GAAG,OAAON,eAAgC,EAAEO,IAAU,KAAK;EAEpF;EACA,MAAMC,UAAU,GAAGR,eAAe,CAACS,kBAAkB,CAACF,IAAI,CAACF,IAAI,CAAC;;EAEhE;EACA,MAAMK,OAAO,GAAG;IAAEC,eAAe,EAAE;MAAEC,eAAe,EAAEL,IAAI,CAACM;IAAK;EAAE,CAAC;;EAEnE;EACA,MAAML,UAAU,CAACM,iBAAiB,CAACP,IAAI,EAAEG,OAAO,CAAC;AACnD,CAAC;AACD;;AAEA;AACA,MAAMK,gBAAgB,GAAG,MAAOR,IAAiB,IAAwB;EACvE,IAAI,CAACA,IAAI,EAAE,OAAO,EAAE;;EAEpB;EACA,MAAMS,WAAW,GAAG,IAAI1B,iBAAiB,CACtC,WAAUM,kBAAmB,2BAA0BJ,QAAS,EAAC,CACnE;;EAED;EACA,MAAMQ,eAAgC,GAAGgB,WAAW,CAACC,kBAAkB,CAAC1B,aAAa,CAAC;EACtF,MAAMS,eAAe,CAACkB,iBAAiB,CAAC;IACtCC,MAAM,EAAE;EACV,CAAC,CAAC;;EAEF;EACA,MAAMb,qBAAqB,CAACN,eAAe,EAAEO,IAAI,CAAC;;EAElD;EACA,OAAOR,mBAAmB,CAACC,eAAe,CAAC;AAC7C,CAAC;AACD;;AAEA,eAAee,gBAAgB"},"metadata":{},"sourceType":"module"}
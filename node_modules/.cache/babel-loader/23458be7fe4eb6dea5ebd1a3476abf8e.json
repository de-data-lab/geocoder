{"ast":null,"code":"import _classCallCheck from \"/Users/tbeckett/Documents/Azure dev/Azure Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tbeckett/Documents/Azure dev/Azure Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\n/** Class representing a PageBlob. */\nexport var PageBlob = /*#__PURE__*/function () {\n  /**\n   * Initialize a new instance of the class PageBlob class.\n   * @param client Reference to the service client\n   */\n  function PageBlob(client) {\n    _classCallCheck(this, PageBlob);\n    this.client = client;\n  }\n  /**\n   * The Create operation creates a new page blob.\n   * @param contentLength The length of the request.\n   * @param blobContentLength This header specifies the maximum size for the page blob, up to 1 TB. The\n   *                          page blob size must be aligned to a 512-byte boundary.\n   * @param options The options parameters.\n   */\n  _createClass(PageBlob, [{\n    key: \"create\",\n    value: function create(contentLength, blobContentLength, options) {\n      var operationArguments = {\n        contentLength: contentLength,\n        blobContentLength: blobContentLength,\n        options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n      };\n      return this.client.sendOperationRequest(operationArguments, createOperationSpec);\n    }\n    /**\n     * The Upload Pages operation writes a range of pages to a page blob\n     * @param contentLength The length of the request.\n     * @param body Initial data\n     * @param options The options parameters.\n     */\n  }, {\n    key: \"uploadPages\",\n    value: function uploadPages(contentLength, body, options) {\n      var operationArguments = {\n        contentLength: contentLength,\n        body: body,\n        options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n      };\n      return this.client.sendOperationRequest(operationArguments, uploadPagesOperationSpec);\n    }\n    /**\n     * The Clear Pages operation clears a set of pages from a page blob\n     * @param contentLength The length of the request.\n     * @param options The options parameters.\n     */\n  }, {\n    key: \"clearPages\",\n    value: function clearPages(contentLength, options) {\n      var operationArguments = {\n        contentLength: contentLength,\n        options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n      };\n      return this.client.sendOperationRequest(operationArguments, clearPagesOperationSpec);\n    }\n    /**\n     * The Upload Pages operation writes a range of pages to a page blob where the contents are read from a\n     * URL\n     * @param sourceUrl Specify a URL to the copy source.\n     * @param sourceRange Bytes of source data in the specified range. The length of this range should\n     *                    match the ContentLength header and x-ms-range/Range destination range header.\n     * @param contentLength The length of the request.\n     * @param range The range of bytes to which the source range would be written. The range should be 512\n     *              aligned and range-end is required.\n     * @param options The options parameters.\n     */\n  }, {\n    key: \"uploadPagesFromURL\",\n    value: function uploadPagesFromURL(sourceUrl, sourceRange, contentLength, range, options) {\n      var operationArguments = {\n        sourceUrl: sourceUrl,\n        sourceRange: sourceRange,\n        contentLength: contentLength,\n        range: range,\n        options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n      };\n      return this.client.sendOperationRequest(operationArguments, uploadPagesFromURLOperationSpec);\n    }\n    /**\n     * The Get Page Ranges operation returns the list of valid page ranges for a page blob or snapshot of a\n     * page blob\n     * @param options The options parameters.\n     */\n  }, {\n    key: \"getPageRanges\",\n    value: function getPageRanges(options) {\n      var operationArguments = {\n        options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n      };\n      return this.client.sendOperationRequest(operationArguments, getPageRangesOperationSpec);\n    }\n    /**\n     * The Get Page Ranges Diff operation returns the list of valid page ranges for a page blob that were\n     * changed between target blob and previous snapshot.\n     * @param options The options parameters.\n     */\n  }, {\n    key: \"getPageRangesDiff\",\n    value: function getPageRangesDiff(options) {\n      var operationArguments = {\n        options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n      };\n      return this.client.sendOperationRequest(operationArguments, getPageRangesDiffOperationSpec);\n    }\n    /**\n     * Resize the Blob\n     * @param blobContentLength This header specifies the maximum size for the page blob, up to 1 TB. The\n     *                          page blob size must be aligned to a 512-byte boundary.\n     * @param options The options parameters.\n     */\n  }, {\n    key: \"resize\",\n    value: function resize(blobContentLength, options) {\n      var operationArguments = {\n        blobContentLength: blobContentLength,\n        options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n      };\n      return this.client.sendOperationRequest(operationArguments, resizeOperationSpec);\n    }\n    /**\n     * Update the sequence number of the blob\n     * @param sequenceNumberAction Required if the x-ms-blob-sequence-number header is set for the request.\n     *                             This property applies to page blobs only. This property indicates how the service should modify the\n     *                             blob's sequence number\n     * @param options The options parameters.\n     */\n  }, {\n    key: \"updateSequenceNumber\",\n    value: function updateSequenceNumber(sequenceNumberAction, options) {\n      var operationArguments = {\n        sequenceNumberAction: sequenceNumberAction,\n        options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n      };\n      return this.client.sendOperationRequest(operationArguments, updateSequenceNumberOperationSpec);\n    }\n    /**\n     * The Copy Incremental operation copies a snapshot of the source page blob to a destination page blob.\n     * The snapshot is copied such that only the differential changes between the previously copied\n     * snapshot are transferred to the destination. The copied snapshots are complete copies of the\n     * original snapshot and can be read or copied from as usual. This API is supported since REST version\n     * 2016-05-31.\n     * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to\n     *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would\n     *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared\n     *                   access signature.\n     * @param options The options parameters.\n     */\n  }, {\n    key: \"copyIncremental\",\n    value: function copyIncremental(copySource, options) {\n      var operationArguments = {\n        copySource: copySource,\n        options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n      };\n      return this.client.sendOperationRequest(operationArguments, copyIncrementalOperationSpec);\n    }\n  }]);\n  return PageBlob;\n}();\n// Operation Specifications\nvar xmlSerializer = new coreHttp.Serializer(Mappers, /* isXml */true);\nvar serializer = new coreHttp.Serializer(Mappers, /* isXml */false);\nvar createOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.PageBlobCreateHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PageBlobCreateExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.contentLength, Parameters.metadata, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.blobCacheControl, Parameters.blobContentType, Parameters.blobContentMD5, Parameters.blobContentEncoding, Parameters.blobContentLanguage, Parameters.blobContentDisposition, Parameters.immutabilityPolicyExpiry, Parameters.immutabilityPolicyMode, Parameters.encryptionScope, Parameters.tier, Parameters.blobTagsString, Parameters.legalHold1, Parameters.blobType, Parameters.blobContentLength, Parameters.blobSequenceNumber],\n  isXML: true,\n  serializer: xmlSerializer\n};\nvar uploadPagesOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.PageBlobUploadPagesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PageBlobUploadPagesExceptionHeaders\n    }\n  },\n  requestBody: Parameters.body1,\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp19],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.contentLength, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.range, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.encryptionScope, Parameters.transactionalContentMD5, Parameters.transactionalContentCrc64, Parameters.contentType1, Parameters.accept2, Parameters.pageWrite, Parameters.ifSequenceNumberLessThanOrEqualTo, Parameters.ifSequenceNumberLessThan, Parameters.ifSequenceNumberEqualTo],\n  mediaType: \"binary\",\n  serializer: serializer\n};\nvar clearPagesOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.PageBlobClearPagesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PageBlobClearPagesExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp19],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.contentLength, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.range, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.encryptionScope, Parameters.ifSequenceNumberLessThanOrEqualTo, Parameters.ifSequenceNumberLessThan, Parameters.ifSequenceNumberEqualTo, Parameters.pageWrite1],\n  isXML: true,\n  serializer: xmlSerializer\n};\nvar uploadPagesFromURLOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.PageBlobUploadPagesFromURLHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PageBlobUploadPagesFromURLExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp19],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.contentLength, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.encryptionScope, Parameters.sourceIfModifiedSince, Parameters.sourceIfUnmodifiedSince, Parameters.sourceIfMatch, Parameters.sourceIfNoneMatch, Parameters.sourceContentMD5, Parameters.copySourceAuthorization, Parameters.pageWrite, Parameters.ifSequenceNumberLessThanOrEqualTo, Parameters.ifSequenceNumberLessThan, Parameters.ifSequenceNumberEqualTo, Parameters.sourceUrl, Parameters.sourceRange, Parameters.sourceContentCrc64, Parameters.range1],\n  isXML: true,\n  serializer: xmlSerializer\n};\nvar getPageRangesOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PageList,\n      headersMapper: Mappers.PageBlobGetPageRangesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PageBlobGetPageRangesExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.marker, Parameters.maxPageSize, Parameters.snapshot, Parameters.comp20],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.range, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],\n  isXML: true,\n  serializer: xmlSerializer\n};\nvar getPageRangesDiffOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PageList,\n      headersMapper: Mappers.PageBlobGetPageRangesDiffHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PageBlobGetPageRangesDiffExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.marker, Parameters.maxPageSize, Parameters.snapshot, Parameters.comp20, Parameters.prevsnapshot],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.range, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.prevSnapshotUrl],\n  isXML: true,\n  serializer: xmlSerializer\n};\nvar resizeOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.PageBlobResizeHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PageBlobResizeExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.comp, Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.encryptionScope, Parameters.blobContentLength],\n  isXML: true,\n  serializer: xmlSerializer\n};\nvar updateSequenceNumberOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.PageBlobUpdateSequenceNumberHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PageBlobUpdateSequenceNumberExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.comp, Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.blobSequenceNumber, Parameters.sequenceNumberAction],\n  isXML: true,\n  serializer: xmlSerializer\n};\nvar copyIncrementalOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    202: {\n      headersMapper: Mappers.PageBlobCopyIncrementalHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PageBlobCopyIncrementalExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp21],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.copySource],\n  isXML: true,\n  serializer: xmlSerializer\n};","map":{"version":3,"mappings":"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","names":["coreHttp","Mappers","Parameters","PageBlob","client","contentLength","blobContentLength","options","operationArguments","operationOptionsToRequestOptionsBase","sendOperationRequest","createOperationSpec","body","uploadPagesOperationSpec","clearPagesOperationSpec","sourceUrl","sourceRange","range","uploadPagesFromURLOperationSpec","getPageRangesOperationSpec","getPageRangesDiffOperationSpec","resizeOperationSpec","sequenceNumberAction","updateSequenceNumberOperationSpec","copySource","copyIncrementalOperationSpec","xmlSerializer","Serializer","serializer","path","httpMethod","responses","headersMapper","PageBlobCreateHeaders","default","bodyMapper","StorageError","PageBlobCreateExceptionHeaders","queryParameters","timeoutInSeconds","urlParameters","url","headerParameters","version","requestId","accept1","metadata","leaseId","ifModifiedSince","ifUnmodifiedSince","encryptionKey","encryptionKeySha256","encryptionAlgorithm","ifMatch","ifNoneMatch","ifTags","blobCacheControl","blobContentType","blobContentMD5","blobContentEncoding","blobContentLanguage","blobContentDisposition","immutabilityPolicyExpiry","immutabilityPolicyMode","encryptionScope","tier","blobTagsString","legalHold1","blobType","blobSequenceNumber","isXML","PageBlobUploadPagesHeaders","PageBlobUploadPagesExceptionHeaders","requestBody","body1","comp19","transactionalContentMD5","transactionalContentCrc64","contentType1","accept2","pageWrite","ifSequenceNumberLessThanOrEqualTo","ifSequenceNumberLessThan","ifSequenceNumberEqualTo","mediaType","PageBlobClearPagesHeaders","PageBlobClearPagesExceptionHeaders","pageWrite1","PageBlobUploadPagesFromURLHeaders","PageBlobUploadPagesFromURLExceptionHeaders","sourceIfModifiedSince","sourceIfUnmodifiedSince","sourceIfMatch","sourceIfNoneMatch","sourceContentMD5","copySourceAuthorization","sourceContentCrc64","range1","PageList","PageBlobGetPageRangesHeaders","PageBlobGetPageRangesExceptionHeaders","marker","maxPageSize","snapshot","comp20","PageBlobGetPageRangesDiffHeaders","PageBlobGetPageRangesDiffExceptionHeaders","prevsnapshot","prevSnapshotUrl","PageBlobResizeHeaders","PageBlobResizeExceptionHeaders","comp","PageBlobUpdateSequenceNumberHeaders","PageBlobUpdateSequenceNumberExceptionHeaders","PageBlobCopyIncrementalHeaders","PageBlobCopyIncrementalExceptionHeaders","comp21"],"sourceRoot":"","sources":["../../../../../../src/generated/src/operations/pageBlob.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { StorageClientContext } from \"../storageClientContext\";\nimport {\n  PageBlobCreateOptionalParams,\n  PageBlobCreateResponse,\n  PageBlobUploadPagesOptionalParams,\n  PageBlobUploadPagesResponse,\n  PageBlobClearPagesOptionalParams,\n  PageBlobClearPagesResponse,\n  PageBlobUploadPagesFromURLOptionalParams,\n  PageBlobUploadPagesFromURLResponse,\n  PageBlobGetPageRangesOptionalParams,\n  PageBlobGetPageRangesResponse,\n  PageBlobGetPageRangesDiffOptionalParams,\n  PageBlobGetPageRangesDiffResponse,\n  PageBlobResizeOptionalParams,\n  PageBlobResizeResponse,\n  SequenceNumberActionType,\n  PageBlobUpdateSequenceNumberOptionalParams,\n  PageBlobUpdateSequenceNumberResponse,\n  PageBlobCopyIncrementalOptionalParams,\n  PageBlobCopyIncrementalResponse\n} from \"../models\";\n\n/** Class representing a PageBlob. */\nexport class PageBlob {\n  private readonly client: StorageClientContext;\n\n  /**\n   * Initialize a new instance of the class PageBlob class.\n   * @param client Reference to the service client\n   */\n  constructor(client: StorageClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * The Create operation creates a new page blob.\n   * @param contentLength The length of the request.\n   * @param blobContentLength This header specifies the maximum size for the page blob, up to 1 TB. The\n   *                          page blob size must be aligned to a 512-byte boundary.\n   * @param options The options parameters.\n   */\n  create(\n    contentLength: number,\n    blobContentLength: number,\n    options?: PageBlobCreateOptionalParams\n  ): Promise<PageBlobCreateResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      contentLength,\n      blobContentLength,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      createOperationSpec\n    ) as Promise<PageBlobCreateResponse>;\n  }\n\n  /**\n   * The Upload Pages operation writes a range of pages to a page blob\n   * @param contentLength The length of the request.\n   * @param body Initial data\n   * @param options The options parameters.\n   */\n  uploadPages(\n    contentLength: number,\n    body: coreHttp.HttpRequestBody,\n    options?: PageBlobUploadPagesOptionalParams\n  ): Promise<PageBlobUploadPagesResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      contentLength,\n      body,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      uploadPagesOperationSpec\n    ) as Promise<PageBlobUploadPagesResponse>;\n  }\n\n  /**\n   * The Clear Pages operation clears a set of pages from a page blob\n   * @param contentLength The length of the request.\n   * @param options The options parameters.\n   */\n  clearPages(\n    contentLength: number,\n    options?: PageBlobClearPagesOptionalParams\n  ): Promise<PageBlobClearPagesResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      contentLength,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      clearPagesOperationSpec\n    ) as Promise<PageBlobClearPagesResponse>;\n  }\n\n  /**\n   * The Upload Pages operation writes a range of pages to a page blob where the contents are read from a\n   * URL\n   * @param sourceUrl Specify a URL to the copy source.\n   * @param sourceRange Bytes of source data in the specified range. The length of this range should\n   *                    match the ContentLength header and x-ms-range/Range destination range header.\n   * @param contentLength The length of the request.\n   * @param range The range of bytes to which the source range would be written. The range should be 512\n   *              aligned and range-end is required.\n   * @param options The options parameters.\n   */\n  uploadPagesFromURL(\n    sourceUrl: string,\n    sourceRange: string,\n    contentLength: number,\n    range: string,\n    options?: PageBlobUploadPagesFromURLOptionalParams\n  ): Promise<PageBlobUploadPagesFromURLResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      sourceUrl,\n      sourceRange,\n      contentLength,\n      range,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      uploadPagesFromURLOperationSpec\n    ) as Promise<PageBlobUploadPagesFromURLResponse>;\n  }\n\n  /**\n   * The Get Page Ranges operation returns the list of valid page ranges for a page blob or snapshot of a\n   * page blob\n   * @param options The options parameters.\n   */\n  getPageRanges(\n    options?: PageBlobGetPageRangesOptionalParams\n  ): Promise<PageBlobGetPageRangesResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      getPageRangesOperationSpec\n    ) as Promise<PageBlobGetPageRangesResponse>;\n  }\n\n  /**\n   * The Get Page Ranges Diff operation returns the list of valid page ranges for a page blob that were\n   * changed between target blob and previous snapshot.\n   * @param options The options parameters.\n   */\n  getPageRangesDiff(\n    options?: PageBlobGetPageRangesDiffOptionalParams\n  ): Promise<PageBlobGetPageRangesDiffResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      getPageRangesDiffOperationSpec\n    ) as Promise<PageBlobGetPageRangesDiffResponse>;\n  }\n\n  /**\n   * Resize the Blob\n   * @param blobContentLength This header specifies the maximum size for the page blob, up to 1 TB. The\n   *                          page blob size must be aligned to a 512-byte boundary.\n   * @param options The options parameters.\n   */\n  resize(\n    blobContentLength: number,\n    options?: PageBlobResizeOptionalParams\n  ): Promise<PageBlobResizeResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      blobContentLength,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      resizeOperationSpec\n    ) as Promise<PageBlobResizeResponse>;\n  }\n\n  /**\n   * Update the sequence number of the blob\n   * @param sequenceNumberAction Required if the x-ms-blob-sequence-number header is set for the request.\n   *                             This property applies to page blobs only. This property indicates how the service should modify the\n   *                             blob's sequence number\n   * @param options The options parameters.\n   */\n  updateSequenceNumber(\n    sequenceNumberAction: SequenceNumberActionType,\n    options?: PageBlobUpdateSequenceNumberOptionalParams\n  ): Promise<PageBlobUpdateSequenceNumberResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      sequenceNumberAction,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      updateSequenceNumberOperationSpec\n    ) as Promise<PageBlobUpdateSequenceNumberResponse>;\n  }\n\n  /**\n   * The Copy Incremental operation copies a snapshot of the source page blob to a destination page blob.\n   * The snapshot is copied such that only the differential changes between the previously copied\n   * snapshot are transferred to the destination. The copied snapshots are complete copies of the\n   * original snapshot and can be read or copied from as usual. This API is supported since REST version\n   * 2016-05-31.\n   * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to\n   *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would\n   *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared\n   *                   access signature.\n   * @param options The options parameters.\n   */\n  copyIncremental(\n    copySource: string,\n    options?: PageBlobCopyIncrementalOptionalParams\n  ): Promise<PageBlobCopyIncrementalResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      copySource,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      copyIncrementalOperationSpec\n    ) as Promise<PageBlobCopyIncrementalResponse>;\n  }\n}\n// Operation Specifications\nconst xmlSerializer = new coreHttp.Serializer(Mappers, /* isXml */ true);\nconst serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);\n\nconst createOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.PageBlobCreateHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PageBlobCreateExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.contentLength,\n    Parameters.metadata,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.blobCacheControl,\n    Parameters.blobContentType,\n    Parameters.blobContentMD5,\n    Parameters.blobContentEncoding,\n    Parameters.blobContentLanguage,\n    Parameters.blobContentDisposition,\n    Parameters.immutabilityPolicyExpiry,\n    Parameters.immutabilityPolicyMode,\n    Parameters.encryptionScope,\n    Parameters.tier,\n    Parameters.blobTagsString,\n    Parameters.legalHold1,\n    Parameters.blobType,\n    Parameters.blobContentLength,\n    Parameters.blobSequenceNumber\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst uploadPagesOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.PageBlobUploadPagesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PageBlobUploadPagesExceptionHeaders\n    }\n  },\n  requestBody: Parameters.body1,\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp19],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.contentLength,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.range,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.encryptionScope,\n    Parameters.transactionalContentMD5,\n    Parameters.transactionalContentCrc64,\n    Parameters.contentType1,\n    Parameters.accept2,\n    Parameters.pageWrite,\n    Parameters.ifSequenceNumberLessThanOrEqualTo,\n    Parameters.ifSequenceNumberLessThan,\n    Parameters.ifSequenceNumberEqualTo\n  ],\n  mediaType: \"binary\",\n  serializer\n};\nconst clearPagesOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.PageBlobClearPagesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PageBlobClearPagesExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp19],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.contentLength,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.range,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.encryptionScope,\n    Parameters.ifSequenceNumberLessThanOrEqualTo,\n    Parameters.ifSequenceNumberLessThan,\n    Parameters.ifSequenceNumberEqualTo,\n    Parameters.pageWrite1\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst uploadPagesFromURLOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.PageBlobUploadPagesFromURLHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PageBlobUploadPagesFromURLExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp19],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.contentLength,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.encryptionScope,\n    Parameters.sourceIfModifiedSince,\n    Parameters.sourceIfUnmodifiedSince,\n    Parameters.sourceIfMatch,\n    Parameters.sourceIfNoneMatch,\n    Parameters.sourceContentMD5,\n    Parameters.copySourceAuthorization,\n    Parameters.pageWrite,\n    Parameters.ifSequenceNumberLessThanOrEqualTo,\n    Parameters.ifSequenceNumberLessThan,\n    Parameters.ifSequenceNumberEqualTo,\n    Parameters.sourceUrl,\n    Parameters.sourceRange,\n    Parameters.sourceContentCrc64,\n    Parameters.range1\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst getPageRangesOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PageList,\n      headersMapper: Mappers.PageBlobGetPageRangesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PageBlobGetPageRangesExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.marker,\n    Parameters.maxPageSize,\n    Parameters.snapshot,\n    Parameters.comp20\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.range,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst getPageRangesDiffOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PageList,\n      headersMapper: Mappers.PageBlobGetPageRangesDiffHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PageBlobGetPageRangesDiffExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.marker,\n    Parameters.maxPageSize,\n    Parameters.snapshot,\n    Parameters.comp20,\n    Parameters.prevsnapshot\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.range,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.prevSnapshotUrl\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst resizeOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.PageBlobResizeHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PageBlobResizeExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.comp, Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.encryptionScope,\n    Parameters.blobContentLength\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst updateSequenceNumberOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.PageBlobUpdateSequenceNumberHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PageBlobUpdateSequenceNumberExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.comp, Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.blobSequenceNumber,\n    Parameters.sequenceNumberAction\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst copyIncrementalOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    202: {\n      headersMapper: Mappers.PageBlobCopyIncrementalHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PageBlobCopyIncrementalExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp21],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.copySource\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\n"]},"metadata":{},"sourceType":"module"}
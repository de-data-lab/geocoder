{"ast":null,"code":"import _classCallCheck from \"/Users/tbeckett/Documents/Azure dev/Azure Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tbeckett/Documents/Azure dev/Azure Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\n/** Class representing a AppendBlob. */\nexport var AppendBlob = /*#__PURE__*/function () {\n  /**\n   * Initialize a new instance of the class AppendBlob class.\n   * @param client Reference to the service client\n   */\n  function AppendBlob(client) {\n    _classCallCheck(this, AppendBlob);\n    this.client = client;\n  }\n  /**\n   * The Create Append Blob operation creates a new append blob.\n   * @param contentLength The length of the request.\n   * @param options The options parameters.\n   */\n  _createClass(AppendBlob, [{\n    key: \"create\",\n    value: function create(contentLength, options) {\n      var operationArguments = {\n        contentLength: contentLength,\n        options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n      };\n      return this.client.sendOperationRequest(operationArguments, createOperationSpec);\n    }\n    /**\n     * The Append Block operation commits a new block of data to the end of an existing append blob. The\n     * Append Block operation is permitted only if the blob was created with x-ms-blob-type set to\n     * AppendBlob. Append Block is supported only on version 2015-02-21 version or later.\n     * @param contentLength The length of the request.\n     * @param body Initial data\n     * @param options The options parameters.\n     */\n  }, {\n    key: \"appendBlock\",\n    value: function appendBlock(contentLength, body, options) {\n      var operationArguments = {\n        contentLength: contentLength,\n        body: body,\n        options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n      };\n      return this.client.sendOperationRequest(operationArguments, appendBlockOperationSpec);\n    }\n    /**\n     * The Append Block operation commits a new block of data to the end of an existing append blob where\n     * the contents are read from a source url. The Append Block operation is permitted only if the blob\n     * was created with x-ms-blob-type set to AppendBlob. Append Block is supported only on version\n     * 2015-02-21 version or later.\n     * @param sourceUrl Specify a URL to the copy source.\n     * @param contentLength The length of the request.\n     * @param options The options parameters.\n     */\n  }, {\n    key: \"appendBlockFromUrl\",\n    value: function appendBlockFromUrl(sourceUrl, contentLength, options) {\n      var operationArguments = {\n        sourceUrl: sourceUrl,\n        contentLength: contentLength,\n        options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n      };\n      return this.client.sendOperationRequest(operationArguments, appendBlockFromUrlOperationSpec);\n    }\n    /**\n     * The Seal operation seals the Append Blob to make it read-only. Seal is supported only on version\n     * 2019-12-12 version or later.\n     * @param options The options parameters.\n     */\n  }, {\n    key: \"seal\",\n    value: function seal(options) {\n      var operationArguments = {\n        options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n      };\n      return this.client.sendOperationRequest(operationArguments, sealOperationSpec);\n    }\n  }]);\n  return AppendBlob;\n}();\n// Operation Specifications\nvar xmlSerializer = new coreHttp.Serializer(Mappers, /* isXml */true);\nvar serializer = new coreHttp.Serializer(Mappers, /* isXml */false);\nvar createOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.AppendBlobCreateHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.AppendBlobCreateExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.contentLength, Parameters.metadata, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.blobCacheControl, Parameters.blobContentType, Parameters.blobContentMD5, Parameters.blobContentEncoding, Parameters.blobContentLanguage, Parameters.blobContentDisposition, Parameters.immutabilityPolicyExpiry, Parameters.immutabilityPolicyMode, Parameters.encryptionScope, Parameters.blobTagsString, Parameters.legalHold1, Parameters.blobType1],\n  isXML: true,\n  serializer: xmlSerializer\n};\nvar appendBlockOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.AppendBlobAppendBlockHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.AppendBlobAppendBlockExceptionHeaders\n    }\n  },\n  requestBody: Parameters.body1,\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp22],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.contentLength, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.encryptionScope, Parameters.transactionalContentMD5, Parameters.transactionalContentCrc64, Parameters.contentType1, Parameters.accept2, Parameters.maxSize, Parameters.appendPosition],\n  mediaType: \"binary\",\n  serializer: serializer\n};\nvar appendBlockFromUrlOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.AppendBlobAppendBlockFromUrlHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.AppendBlobAppendBlockFromUrlExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp22],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.contentLength, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.encryptionScope, Parameters.sourceIfModifiedSince, Parameters.sourceIfUnmodifiedSince, Parameters.sourceIfMatch, Parameters.sourceIfNoneMatch, Parameters.sourceContentMD5, Parameters.copySourceAuthorization, Parameters.transactionalContentMD5, Parameters.sourceUrl, Parameters.sourceContentCrc64, Parameters.maxSize, Parameters.appendPosition, Parameters.sourceRange1],\n  isXML: true,\n  serializer: xmlSerializer\n};\nvar sealOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.AppendBlobSealHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.AppendBlobSealExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp23],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.appendPosition],\n  isXML: true,\n  serializer: xmlSerializer\n};","map":{"version":3,"mappings":"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","names":["coreHttp","Mappers","Parameters","AppendBlob","client","contentLength","options","operationArguments","operationOptionsToRequestOptionsBase","sendOperationRequest","createOperationSpec","body","appendBlockOperationSpec","sourceUrl","appendBlockFromUrlOperationSpec","sealOperationSpec","xmlSerializer","Serializer","serializer","path","httpMethod","responses","headersMapper","AppendBlobCreateHeaders","default","bodyMapper","StorageError","AppendBlobCreateExceptionHeaders","queryParameters","timeoutInSeconds","urlParameters","url","headerParameters","version","requestId","accept1","metadata","leaseId","ifModifiedSince","ifUnmodifiedSince","encryptionKey","encryptionKeySha256","encryptionAlgorithm","ifMatch","ifNoneMatch","ifTags","blobCacheControl","blobContentType","blobContentMD5","blobContentEncoding","blobContentLanguage","blobContentDisposition","immutabilityPolicyExpiry","immutabilityPolicyMode","encryptionScope","blobTagsString","legalHold1","blobType1","isXML","AppendBlobAppendBlockHeaders","AppendBlobAppendBlockExceptionHeaders","requestBody","body1","comp22","transactionalContentMD5","transactionalContentCrc64","contentType1","accept2","maxSize","appendPosition","mediaType","AppendBlobAppendBlockFromUrlHeaders","AppendBlobAppendBlockFromUrlExceptionHeaders","sourceIfModifiedSince","sourceIfUnmodifiedSince","sourceIfMatch","sourceIfNoneMatch","sourceContentMD5","copySourceAuthorization","sourceContentCrc64","sourceRange1","AppendBlobSealHeaders","AppendBlobSealExceptionHeaders","comp23"],"sourceRoot":"","sources":["../../../../../../src/generated/src/operations/appendBlob.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { StorageClientContext } from \"../storageClientContext\";\nimport {\n  AppendBlobCreateOptionalParams,\n  AppendBlobCreateResponse,\n  AppendBlobAppendBlockOptionalParams,\n  AppendBlobAppendBlockResponse,\n  AppendBlobAppendBlockFromUrlOptionalParams,\n  AppendBlobAppendBlockFromUrlResponse,\n  AppendBlobSealOptionalParams,\n  AppendBlobSealResponse\n} from \"../models\";\n\n/** Class representing a AppendBlob. */\nexport class AppendBlob {\n  private readonly client: StorageClientContext;\n\n  /**\n   * Initialize a new instance of the class AppendBlob class.\n   * @param client Reference to the service client\n   */\n  constructor(client: StorageClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * The Create Append Blob operation creates a new append blob.\n   * @param contentLength The length of the request.\n   * @param options The options parameters.\n   */\n  create(\n    contentLength: number,\n    options?: AppendBlobCreateOptionalParams\n  ): Promise<AppendBlobCreateResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      contentLength,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      createOperationSpec\n    ) as Promise<AppendBlobCreateResponse>;\n  }\n\n  /**\n   * The Append Block operation commits a new block of data to the end of an existing append blob. The\n   * Append Block operation is permitted only if the blob was created with x-ms-blob-type set to\n   * AppendBlob. Append Block is supported only on version 2015-02-21 version or later.\n   * @param contentLength The length of the request.\n   * @param body Initial data\n   * @param options The options parameters.\n   */\n  appendBlock(\n    contentLength: number,\n    body: coreHttp.HttpRequestBody,\n    options?: AppendBlobAppendBlockOptionalParams\n  ): Promise<AppendBlobAppendBlockResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      contentLength,\n      body,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      appendBlockOperationSpec\n    ) as Promise<AppendBlobAppendBlockResponse>;\n  }\n\n  /**\n   * The Append Block operation commits a new block of data to the end of an existing append blob where\n   * the contents are read from a source url. The Append Block operation is permitted only if the blob\n   * was created with x-ms-blob-type set to AppendBlob. Append Block is supported only on version\n   * 2015-02-21 version or later.\n   * @param sourceUrl Specify a URL to the copy source.\n   * @param contentLength The length of the request.\n   * @param options The options parameters.\n   */\n  appendBlockFromUrl(\n    sourceUrl: string,\n    contentLength: number,\n    options?: AppendBlobAppendBlockFromUrlOptionalParams\n  ): Promise<AppendBlobAppendBlockFromUrlResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      sourceUrl,\n      contentLength,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      appendBlockFromUrlOperationSpec\n    ) as Promise<AppendBlobAppendBlockFromUrlResponse>;\n  }\n\n  /**\n   * The Seal operation seals the Append Blob to make it read-only. Seal is supported only on version\n   * 2019-12-12 version or later.\n   * @param options The options parameters.\n   */\n  seal(\n    options?: AppendBlobSealOptionalParams\n  ): Promise<AppendBlobSealResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      sealOperationSpec\n    ) as Promise<AppendBlobSealResponse>;\n  }\n}\n// Operation Specifications\nconst xmlSerializer = new coreHttp.Serializer(Mappers, /* isXml */ true);\nconst serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);\n\nconst createOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.AppendBlobCreateHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.AppendBlobCreateExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.contentLength,\n    Parameters.metadata,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.blobCacheControl,\n    Parameters.blobContentType,\n    Parameters.blobContentMD5,\n    Parameters.blobContentEncoding,\n    Parameters.blobContentLanguage,\n    Parameters.blobContentDisposition,\n    Parameters.immutabilityPolicyExpiry,\n    Parameters.immutabilityPolicyMode,\n    Parameters.encryptionScope,\n    Parameters.blobTagsString,\n    Parameters.legalHold1,\n    Parameters.blobType1\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst appendBlockOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.AppendBlobAppendBlockHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.AppendBlobAppendBlockExceptionHeaders\n    }\n  },\n  requestBody: Parameters.body1,\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp22],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.contentLength,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.encryptionScope,\n    Parameters.transactionalContentMD5,\n    Parameters.transactionalContentCrc64,\n    Parameters.contentType1,\n    Parameters.accept2,\n    Parameters.maxSize,\n    Parameters.appendPosition\n  ],\n  mediaType: \"binary\",\n  serializer\n};\nconst appendBlockFromUrlOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.AppendBlobAppendBlockFromUrlHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.AppendBlobAppendBlockFromUrlExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp22],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.contentLength,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.encryptionScope,\n    Parameters.sourceIfModifiedSince,\n    Parameters.sourceIfUnmodifiedSince,\n    Parameters.sourceIfMatch,\n    Parameters.sourceIfNoneMatch,\n    Parameters.sourceContentMD5,\n    Parameters.copySourceAuthorization,\n    Parameters.transactionalContentMD5,\n    Parameters.sourceUrl,\n    Parameters.sourceContentCrc64,\n    Parameters.maxSize,\n    Parameters.appendPosition,\n    Parameters.sourceRange1\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst sealOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.AppendBlobSealHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.AppendBlobSealExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp23],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.appendPosition\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\n"]},"metadata":{},"sourceType":"module"}
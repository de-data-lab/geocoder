{"ast":null,"code":"import _classCallCheck from \"/Users/tbeckett/Documents/TI - Project Info/JavaScript_end_to_end_client_file_upload_to_Azure_Storage_Blobs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tbeckett/Documents/TI - Project Info/JavaScript_end_to_end_client_file_upload_to_Azure_Storage_Blobs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { isNode } from \"@azure/core-http\";\nimport * as os from \"os\";\nimport { TelemetryPolicy } from \"./policies/TelemetryPolicy\";\nimport { SDK_VERSION } from \"./utils/constants\";\n/**\n * TelemetryPolicyFactory is a factory class helping generating {@link TelemetryPolicy} objects.\n */\nexport var TelemetryPolicyFactory = /*#__PURE__*/function () {\n  /**\n   * Creates an instance of TelemetryPolicyFactory.\n   * @param telemetry -\n   */\n  function TelemetryPolicyFactory(telemetry) {\n    _classCallCheck(this, TelemetryPolicyFactory);\n    var userAgentInfo = [];\n    if (isNode) {\n      if (telemetry) {\n        var telemetryString = telemetry.userAgentPrefix || \"\";\n        if (telemetryString.length > 0 && userAgentInfo.indexOf(telemetryString) === -1) {\n          userAgentInfo.push(telemetryString);\n        }\n      }\n      // e.g. azsdk-js-storageblob/10.0.0\n      var libInfo = \"azsdk-js-storageblob/\".concat(SDK_VERSION);\n      if (userAgentInfo.indexOf(libInfo) === -1) {\n        userAgentInfo.push(libInfo);\n      }\n      // e.g. (NODE-VERSION 4.9.1; Windows_NT 10.0.16299)\n      var runtimeInfo = \"(NODE-VERSION \".concat(process.version, \")\");\n      if (os) {\n        runtimeInfo = \"(NODE-VERSION \".concat(process.version, \"; \").concat(os.type(), \" \").concat(os.release(), \")\");\n      }\n      if (userAgentInfo.indexOf(runtimeInfo) === -1) {\n        userAgentInfo.push(runtimeInfo);\n      }\n    }\n    this.telemetryString = userAgentInfo.join(\" \");\n  }\n  /**\n   * Creates a TelemetryPolicy object.\n   *\n   * @param nextPolicy -\n   * @param options -\n   */\n  _createClass(TelemetryPolicyFactory, [{\n    key: \"create\",\n    value: function create(nextPolicy, options) {\n      return new TelemetryPolicy(nextPolicy, options, this.telemetryString);\n    }\n  }]);\n  return TelemetryPolicyFactory;\n}();","map":{"version":3,"mappings":";;AAAA;AACA;AAEA,SACEA,MAAM,QAKD,kBAAkB;AACzB,OAAO,KAAKC,EAAE,MAAM,IAAI;AAExB,SAASC,eAAe,QAAQ,4BAA4B;AAC5D,SAASC,WAAW,QAAQ,mBAAmB;AAE/C;;;AAGA,WAAaC,sBAAsB;EAMjC;;;;EAIA,gCAAYC,SAA4B;IAAA;IACtC,IAAMC,aAAa,GAAa,EAAE;IAElC,IAAIN,MAAM,EAAE;MACV,IAAIK,SAAS,EAAE;QACb,IAAME,eAAe,GAAGF,SAAS,CAACG,eAAe,IAAI,EAAE;QACvD,IAAID,eAAe,CAACE,MAAM,GAAG,CAAC,IAAIH,aAAa,CAACI,OAAO,CAACH,eAAe,CAAC,KAAK,CAAC,CAAC,EAAE;UAC/ED,aAAa,CAACK,IAAI,CAACJ,eAAe,CAAC;;;MAIvC;MACA,IAAMK,OAAO,kCAA2BT,WAAW,CAAE;MACrD,IAAIG,aAAa,CAACI,OAAO,CAACE,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE;QACzCN,aAAa,CAACK,IAAI,CAACC,OAAO,CAAC;;MAG7B;MACA,IAAIC,WAAW,2BAAoBC,OAAO,CAACC,OAAO,MAAG;MACrD,IAAId,EAAE,EAAE;QACNY,WAAW,2BAAoBC,OAAO,CAACC,OAAO,eAAKd,EAAE,CAACe,IAAI,EAAE,cAAIf,EAAE,CAACgB,OAAO,EAAE,MAAG;;MAEjF,IAAIX,aAAa,CAACI,OAAO,CAACG,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE;QAC7CP,aAAa,CAACK,IAAI,CAACE,WAAW,CAAC;;;IAInC,IAAI,CAACN,eAAe,GAAGD,aAAa,CAACY,IAAI,CAAC,GAAG,CAAC;EAChD;EAEA;;;;;;EAAA;IAAA;IAAA,OAMO,gBAAOC,UAAyB,EAAEC,OAA6B;MACpE,OAAO,IAAIlB,eAAe,CAACiB,UAAU,EAAEC,OAAO,EAAE,IAAI,CAACb,eAAe,CAAC;IACvE;EAAC;EAAA;AAAA","names":["isNode","os","TelemetryPolicy","SDK_VERSION","TelemetryPolicyFactory","telemetry","userAgentInfo","telemetryString","userAgentPrefix","length","indexOf","push","libInfo","runtimeInfo","process","version","type","release","join","nextPolicy","options"],"sourceRoot":"","sources":["../../../src/TelemetryPolicyFactory.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  isNode,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n  UserAgentOptions,\n} from \"@azure/core-http\";\nimport * as os from \"os\";\n\nimport { TelemetryPolicy } from \"./policies/TelemetryPolicy\";\nimport { SDK_VERSION } from \"./utils/constants\";\n\n/**\n * TelemetryPolicyFactory is a factory class helping generating {@link TelemetryPolicy} objects.\n */\nexport class TelemetryPolicyFactory implements RequestPolicyFactory {\n  /**\n   * @internal\n   */\n  public readonly telemetryString: string;\n\n  /**\n   * Creates an instance of TelemetryPolicyFactory.\n   * @param telemetry -\n   */\n  constructor(telemetry?: UserAgentOptions) {\n    const userAgentInfo: string[] = [];\n\n    if (isNode) {\n      if (telemetry) {\n        const telemetryString = telemetry.userAgentPrefix || \"\";\n        if (telemetryString.length > 0 && userAgentInfo.indexOf(telemetryString) === -1) {\n          userAgentInfo.push(telemetryString);\n        }\n      }\n\n      // e.g. azsdk-js-storageblob/10.0.0\n      const libInfo = `azsdk-js-storageblob/${SDK_VERSION}`;\n      if (userAgentInfo.indexOf(libInfo) === -1) {\n        userAgentInfo.push(libInfo);\n      }\n\n      // e.g. (NODE-VERSION 4.9.1; Windows_NT 10.0.16299)\n      let runtimeInfo = `(NODE-VERSION ${process.version})`;\n      if (os) {\n        runtimeInfo = `(NODE-VERSION ${process.version}; ${os.type()} ${os.release()})`;\n      }\n      if (userAgentInfo.indexOf(runtimeInfo) === -1) {\n        userAgentInfo.push(runtimeInfo);\n      }\n    }\n\n    this.telemetryString = userAgentInfo.join(\" \");\n  }\n\n  /**\n   * Creates a TelemetryPolicy object.\n   *\n   * @param nextPolicy -\n   * @param options -\n   */\n  public create(nextPolicy: RequestPolicy, options: RequestPolicyOptions): TelemetryPolicy {\n    return new TelemetryPolicy(nextPolicy, options, this.telemetryString);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
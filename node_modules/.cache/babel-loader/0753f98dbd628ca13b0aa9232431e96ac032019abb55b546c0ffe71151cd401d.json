{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * This is a helper class to construct a string representing the permissions granted by an AccountSAS. Setting a value\n * to true means that any SAS which uses these permissions will grant permissions for that operation. Once all the\n * values are set, this should be serialized with toString and set as the permissions field on an\n * {@link AccountSASSignatureValues} object. It is possible to construct the permissions string without this class, but\n * the order of the permissions is particular and this class guarantees correctness.\n */\nexport class AccountSASPermissions {\n  constructor() {\n    /**\n     * Permission to read resources and list queues and tables granted.\n     */\n    this.read = false;\n    /**\n     * Permission to write resources granted.\n     */\n    this.write = false;\n    /**\n     * Permission to create blobs and files granted.\n     */\n    this.delete = false;\n    /**\n     * Permission to delete versions granted.\n     */\n    this.deleteVersion = false;\n    /**\n     * Permission to list blob containers, blobs, shares, directories, and files granted.\n     */\n    this.list = false;\n    /**\n     * Permission to add messages, table entities, and append to blobs granted.\n     */\n    this.add = false;\n    /**\n     * Permission to create blobs and files granted.\n     */\n    this.create = false;\n    /**\n     * Permissions to update messages and table entities granted.\n     */\n    this.update = false;\n    /**\n     * Permission to get and delete messages granted.\n     */\n    this.process = false;\n    /**\n     * Specfies Tag access granted.\n     */\n    this.tag = false;\n    /**\n     * Permission to filter blobs.\n     */\n    this.filter = false;\n    /**\n     * Permission to set immutability policy.\n     */\n    this.setImmutabilityPolicy = false;\n    /**\n     * Specifies that Permanent Delete is permitted.\n     */\n    this.permanentDelete = false;\n  }\n  /**\n   * Parse initializes the AccountSASPermissions fields from a string.\n   *\n   * @param permissions -\n   */\n  static parse(permissions) {\n    const accountSASPermissions = new AccountSASPermissions();\n    for (const c of permissions) {\n      switch (c) {\n        case \"r\":\n          accountSASPermissions.read = true;\n          break;\n        case \"w\":\n          accountSASPermissions.write = true;\n          break;\n        case \"d\":\n          accountSASPermissions.delete = true;\n          break;\n        case \"x\":\n          accountSASPermissions.deleteVersion = true;\n          break;\n        case \"l\":\n          accountSASPermissions.list = true;\n          break;\n        case \"a\":\n          accountSASPermissions.add = true;\n          break;\n        case \"c\":\n          accountSASPermissions.create = true;\n          break;\n        case \"u\":\n          accountSASPermissions.update = true;\n          break;\n        case \"p\":\n          accountSASPermissions.process = true;\n          break;\n        case \"t\":\n          accountSASPermissions.tag = true;\n          break;\n        case \"f\":\n          accountSASPermissions.filter = true;\n          break;\n        case \"i\":\n          accountSASPermissions.setImmutabilityPolicy = true;\n          break;\n        case \"y\":\n          accountSASPermissions.permanentDelete = true;\n          break;\n        default:\n          throw new RangeError(`Invalid permission character: ${c}`);\n      }\n    }\n    return accountSASPermissions;\n  }\n  /**\n   * Creates a {@link AccountSASPermissions} from a raw object which contains same keys as it\n   * and boolean values for them.\n   *\n   * @param permissionLike -\n   */\n  static from(permissionLike) {\n    const accountSASPermissions = new AccountSASPermissions();\n    if (permissionLike.read) {\n      accountSASPermissions.read = true;\n    }\n    if (permissionLike.write) {\n      accountSASPermissions.write = true;\n    }\n    if (permissionLike.delete) {\n      accountSASPermissions.delete = true;\n    }\n    if (permissionLike.deleteVersion) {\n      accountSASPermissions.deleteVersion = true;\n    }\n    if (permissionLike.filter) {\n      accountSASPermissions.filter = true;\n    }\n    if (permissionLike.tag) {\n      accountSASPermissions.tag = true;\n    }\n    if (permissionLike.list) {\n      accountSASPermissions.list = true;\n    }\n    if (permissionLike.add) {\n      accountSASPermissions.add = true;\n    }\n    if (permissionLike.create) {\n      accountSASPermissions.create = true;\n    }\n    if (permissionLike.update) {\n      accountSASPermissions.update = true;\n    }\n    if (permissionLike.process) {\n      accountSASPermissions.process = true;\n    }\n    if (permissionLike.setImmutabilityPolicy) {\n      accountSASPermissions.setImmutabilityPolicy = true;\n    }\n    if (permissionLike.permanentDelete) {\n      accountSASPermissions.permanentDelete = true;\n    }\n    return accountSASPermissions;\n  }\n  /**\n   * Produces the SAS permissions string for an Azure Storage account.\n   * Call this method to set AccountSASSignatureValues Permissions field.\n   *\n   * Using this method will guarantee the resource types are in\n   * an order accepted by the service.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas\n   *\n   */\n  toString() {\n    // The order of the characters should be as specified here to ensure correctness:\n    // https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas\n    // Use a string array instead of string concatenating += operator for performance\n    const permissions = [];\n    if (this.read) {\n      permissions.push(\"r\");\n    }\n    if (this.write) {\n      permissions.push(\"w\");\n    }\n    if (this.delete) {\n      permissions.push(\"d\");\n    }\n    if (this.deleteVersion) {\n      permissions.push(\"x\");\n    }\n    if (this.filter) {\n      permissions.push(\"f\");\n    }\n    if (this.tag) {\n      permissions.push(\"t\");\n    }\n    if (this.list) {\n      permissions.push(\"l\");\n    }\n    if (this.add) {\n      permissions.push(\"a\");\n    }\n    if (this.create) {\n      permissions.push(\"c\");\n    }\n    if (this.update) {\n      permissions.push(\"u\");\n    }\n    if (this.process) {\n      permissions.push(\"p\");\n    }\n    if (this.setImmutabilityPolicy) {\n      permissions.push(\"i\");\n    }\n    if (this.permanentDelete) {\n      permissions.push(\"y\");\n    }\n    return permissions.join(\"\");\n  }\n}","map":{"version":3,"mappings":"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","names":["AccountSASPermissions","constructor","parse","permissions","accountSASPermissions","c","read","write","delete","deleteVersion","list","add","create","update","process","tag","filter","setImmutabilityPolicy","permanentDelete","RangeError","from","permissionLike","toString","push","join"],"sources":["/Users/yupenglei/Documents/geo-react/node_modules/@azure/storage-blob/src/sas/AccountSASPermissions.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * This is a helper class to construct a string representing the permissions granted by an AccountSAS. Setting a value\n * to true means that any SAS which uses these permissions will grant permissions for that operation. Once all the\n * values are set, this should be serialized with toString and set as the permissions field on an\n * {@link AccountSASSignatureValues} object. It is possible to construct the permissions string without this class, but\n * the order of the permissions is particular and this class guarantees correctness.\n */\nexport class AccountSASPermissions {\n  /**\n   * Parse initializes the AccountSASPermissions fields from a string.\n   *\n   * @param permissions -\n   */\n  public static parse(permissions: string): AccountSASPermissions {\n    const accountSASPermissions = new AccountSASPermissions();\n\n    for (const c of permissions) {\n      switch (c) {\n        case \"r\":\n          accountSASPermissions.read = true;\n          break;\n        case \"w\":\n          accountSASPermissions.write = true;\n          break;\n        case \"d\":\n          accountSASPermissions.delete = true;\n          break;\n        case \"x\":\n          accountSASPermissions.deleteVersion = true;\n          break;\n        case \"l\":\n          accountSASPermissions.list = true;\n          break;\n        case \"a\":\n          accountSASPermissions.add = true;\n          break;\n        case \"c\":\n          accountSASPermissions.create = true;\n          break;\n        case \"u\":\n          accountSASPermissions.update = true;\n          break;\n        case \"p\":\n          accountSASPermissions.process = true;\n          break;\n        case \"t\":\n          accountSASPermissions.tag = true;\n          break;\n        case \"f\":\n          accountSASPermissions.filter = true;\n          break;\n        case \"i\":\n          accountSASPermissions.setImmutabilityPolicy = true;\n          break;\n        case \"y\":\n          accountSASPermissions.permanentDelete = true;\n          break;\n        default:\n          throw new RangeError(`Invalid permission character: ${c}`);\n      }\n    }\n\n    return accountSASPermissions;\n  }\n\n  /**\n   * Creates a {@link AccountSASPermissions} from a raw object which contains same keys as it\n   * and boolean values for them.\n   *\n   * @param permissionLike -\n   */\n  public static from(permissionLike: AccountSASPermissionsLike): AccountSASPermissions {\n    const accountSASPermissions = new AccountSASPermissions();\n    if (permissionLike.read) {\n      accountSASPermissions.read = true;\n    }\n    if (permissionLike.write) {\n      accountSASPermissions.write = true;\n    }\n    if (permissionLike.delete) {\n      accountSASPermissions.delete = true;\n    }\n    if (permissionLike.deleteVersion) {\n      accountSASPermissions.deleteVersion = true;\n    }\n    if (permissionLike.filter) {\n      accountSASPermissions.filter = true;\n    }\n    if (permissionLike.tag) {\n      accountSASPermissions.tag = true;\n    }\n    if (permissionLike.list) {\n      accountSASPermissions.list = true;\n    }\n    if (permissionLike.add) {\n      accountSASPermissions.add = true;\n    }\n    if (permissionLike.create) {\n      accountSASPermissions.create = true;\n    }\n    if (permissionLike.update) {\n      accountSASPermissions.update = true;\n    }\n    if (permissionLike.process) {\n      accountSASPermissions.process = true;\n    }\n    if (permissionLike.setImmutabilityPolicy) {\n      accountSASPermissions.setImmutabilityPolicy = true;\n    }\n    if (permissionLike.permanentDelete) {\n      accountSASPermissions.permanentDelete = true;\n    }\n    return accountSASPermissions;\n  }\n\n  /**\n   * Permission to read resources and list queues and tables granted.\n   */\n  public read: boolean = false;\n\n  /**\n   * Permission to write resources granted.\n   */\n  public write: boolean = false;\n\n  /**\n   * Permission to create blobs and files granted.\n   */\n  public delete: boolean = false;\n\n  /**\n   * Permission to delete versions granted.\n   */\n  public deleteVersion: boolean = false;\n\n  /**\n   * Permission to list blob containers, blobs, shares, directories, and files granted.\n   */\n  public list: boolean = false;\n\n  /**\n   * Permission to add messages, table entities, and append to blobs granted.\n   */\n  public add: boolean = false;\n\n  /**\n   * Permission to create blobs and files granted.\n   */\n  public create: boolean = false;\n\n  /**\n   * Permissions to update messages and table entities granted.\n   */\n  public update: boolean = false;\n\n  /**\n   * Permission to get and delete messages granted.\n   */\n  public process: boolean = false;\n\n  /**\n   * Specfies Tag access granted.\n   */\n  public tag: boolean = false;\n\n  /**\n   * Permission to filter blobs.\n   */\n  public filter: boolean = false;\n\n  /**\n   * Permission to set immutability policy.\n   */\n  public setImmutabilityPolicy: boolean = false;\n\n  /**\n   * Specifies that Permanent Delete is permitted.\n   */\n  public permanentDelete: boolean = false;\n\n  /**\n   * Produces the SAS permissions string for an Azure Storage account.\n   * Call this method to set AccountSASSignatureValues Permissions field.\n   *\n   * Using this method will guarantee the resource types are in\n   * an order accepted by the service.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas\n   *\n   */\n  public toString(): string {\n    // The order of the characters should be as specified here to ensure correctness:\n    // https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas\n    // Use a string array instead of string concatenating += operator for performance\n    const permissions: string[] = [];\n    if (this.read) {\n      permissions.push(\"r\");\n    }\n    if (this.write) {\n      permissions.push(\"w\");\n    }\n    if (this.delete) {\n      permissions.push(\"d\");\n    }\n    if (this.deleteVersion) {\n      permissions.push(\"x\");\n    }\n    if (this.filter) {\n      permissions.push(\"f\");\n    }\n    if (this.tag) {\n      permissions.push(\"t\");\n    }\n    if (this.list) {\n      permissions.push(\"l\");\n    }\n    if (this.add) {\n      permissions.push(\"a\");\n    }\n    if (this.create) {\n      permissions.push(\"c\");\n    }\n    if (this.update) {\n      permissions.push(\"u\");\n    }\n    if (this.process) {\n      permissions.push(\"p\");\n    }\n    if (this.setImmutabilityPolicy) {\n      permissions.push(\"i\");\n    }\n    if (this.permanentDelete) {\n      permissions.push(\"y\");\n    }\n    return permissions.join(\"\");\n  }\n}\n\n/**\n * A type that looks like an account SAS permission.\n * Used in {@link AccountSASPermissions} to parse SAS permissions from raw objects.\n */\nexport interface AccountSASPermissionsLike {\n  /**\n   * Permission to read resources and list queues and tables granted.\n   */\n  read?: boolean;\n\n  /**\n   * Permission to write resources granted.\n   */\n  write?: boolean;\n\n  /**\n   * Permission to delete blobs and files granted.\n   */\n  delete?: boolean;\n\n  /**\n   * Permission to delete versions granted.\n   */\n  deleteVersion?: boolean;\n\n  /**\n   * Permission to list blob containers, blobs, shares, directories, and files granted.\n   */\n  list?: boolean;\n\n  /**\n   * Permission to add messages, table entities, and append to blobs granted.\n   */\n  add?: boolean;\n\n  /**\n   * Permission to create blobs and files granted.\n   */\n  create?: boolean;\n\n  /**\n   * Permissions to update messages and table entities granted.\n   */\n  update?: boolean;\n\n  /**\n   * Permission to get and delete messages granted.\n   */\n  process?: boolean;\n\n  /**\n   * Specfies Tag access granted.\n   */\n  tag?: boolean;\n\n  /**\n   * Permission to filter blobs.\n   */\n  filter?: boolean;\n\n  /**\n   * Permission to set immutability policy.\n   */\n  setImmutabilityPolicy?: boolean;\n\n  /**\n   * Specifies that Permanent Delete is permitted.\n   */\n  permanentDelete?: boolean;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
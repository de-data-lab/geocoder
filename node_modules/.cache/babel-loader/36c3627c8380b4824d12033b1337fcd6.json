{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * @hidden\n */\nvar StringUtils = /** @class */function () {\n  function StringUtils() {}\n  /**\n   * Check if a string is empty\n   *\n   * @param str\n   */\n  StringUtils.isEmpty = function (str) {\n    return typeof str === \"undefined\" || !str || 0 === str.length;\n  };\n  /**\n   * Check if a string's value is a valid JSON object\n   *\n   * @param str\n   */\n  StringUtils.validateAndParseJsonCacheKey = function (str) {\n    try {\n      var parsedKey = JSON.parse(str);\n      /**\n       * There are edge cases in which JSON.parse will successfully parse a non-valid JSON object\n       * (e.g. JSON.parse will parse an escaped string into an unescaped string), so adding a type check\n       * of the parsed value is necessary in order to be certain that the string represents a valid JSON object.\n       *\n       */\n      return parsedKey && typeof parsedKey === \"object\" ? parsedKey : null;\n    } catch (error) {\n      return null;\n    }\n  };\n  return StringUtils;\n}();\nexport { StringUtils };","map":{"version":3,"mappings":"AAAA;;;;AAOA;;;AAGA;EAAA,wBA6BA;EA5BI;;;;;EAKOA,mBAAO,GAAd,UAAeC,GAAW;IACtB,OAAQ,OAAOA,GAAG,KAAK,WAAW,IAAI,CAACA,GAAG,IAAI,CAAC,KAAKA,GAAG,CAACC,MAAM;EAClE,CAAC;EAED;;;;;EAKOF,wCAA4B,GAAnC,UAAoCC,GAAW;IAC3C,IAAI;MACA,IAAME,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACJ,GAAG,CAAC;MACjC;;;;;;MAMA,OAAQE,SAAS,IAAI,OAAOA,SAAS,KAAK,QAAQ,GAAIA,SAAS,GAAG,IAAI;KACzE,CAAC,OAAOG,KAAK,EAAE;MACZ,OAAO,IAAI;;EAEnB,CAAC;EACL,kBAAC;AAAD,CAAC,EA7BD","names":["StringUtils","str","length","parsedKey","JSON","parse","error"],"sourceRoot":"","sources":["../../src/utils/StringUtils.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { __assign } from \"tslib\";\nimport { Constants, PromptState, BlacklistedEQParams } from \"./Constants\";\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\nimport { ScopeSet } from \"../ScopeSet\";\nimport { StringUtils } from \"./StringUtils\";\nimport { CryptoUtils } from \"./CryptoUtils\";\nimport { TimeUtils } from \"./TimeUtils\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\n/**\n * @hidden\n */\nvar RequestUtils = /** @class */function () {\n  function RequestUtils() {}\n  /**\n   * @ignore\n   *\n   * @param request\n   * @param isLoginCall\n   * @param cacheStorage\n   * @param clientId\n   *\n   * validates all request parameters and generates a consumable request object\n   */\n  RequestUtils.validateRequest = function (request, isLoginCall, clientId, interactionType) {\n    // Throw error if request is empty for acquire * calls\n    if (!isLoginCall && !request) {\n      throw ClientConfigurationError.createEmptyRequestError();\n    }\n    var scopes;\n    var extraQueryParameters;\n    if (request) {\n      // if extraScopesToConsent is passed in loginCall, append them to the login request; Validate and filter scopes (the validate function will throw if validation fails)\n      scopes = isLoginCall ? ScopeSet.appendScopes(request.scopes, request.extraScopesToConsent) : request.scopes;\n      ScopeSet.validateInputScope(scopes, !isLoginCall);\n      scopes = ScopeSet.translateClientIdIfSingleScope(scopes, clientId);\n      // validate prompt parameter\n      this.validatePromptParameter(request.prompt);\n      // validate extraQueryParameters\n      extraQueryParameters = this.validateEQParameters(request.extraQueryParameters, request.claimsRequest);\n      // validate claimsRequest\n      this.validateClaimsRequest(request.claimsRequest);\n    }\n    // validate and generate state and correlationId\n    var state = this.validateAndGenerateState(request && request.state, interactionType);\n    var correlationId = this.validateAndGenerateCorrelationId(request && request.correlationId);\n    var validatedRequest = __assign(__assign({}, request), {\n      extraQueryParameters: extraQueryParameters,\n      scopes: scopes,\n      state: state,\n      correlationId: correlationId\n    });\n    return validatedRequest;\n  };\n  /**\n   * @ignore\n   *\n   * Utility to test if valid prompt value is passed in the request\n   * @param request\n   */\n  RequestUtils.validatePromptParameter = function (prompt) {\n    if (prompt) {\n      if ([PromptState.LOGIN, PromptState.SELECT_ACCOUNT, PromptState.CONSENT, PromptState.NONE].indexOf(prompt) < 0) {\n        throw ClientConfigurationError.createInvalidPromptError(prompt);\n      }\n    }\n  };\n  /**\n   * @ignore\n   *\n   * Removes unnecessary or duplicate query parameters from extraQueryParameters\n   * @param request\n   */\n  RequestUtils.validateEQParameters = function (extraQueryParameters, claimsRequest) {\n    var eQParams = __assign({}, extraQueryParameters);\n    if (!eQParams) {\n      return null;\n    }\n    if (claimsRequest) {\n      // this.logger.warning(\"Removed duplicate claims from extraQueryParameters. Please use either the claimsRequest field OR pass as extraQueryParameter - not both.\");\n      delete eQParams[Constants.claims];\n    }\n    BlacklistedEQParams.forEach(function (param) {\n      if (eQParams[param]) {\n        // this.logger.warning(\"Removed duplicate \" + param + \" from extraQueryParameters. Please use the \" + param + \" field in request object.\");\n        delete eQParams[param];\n      }\n    });\n    return eQParams;\n  };\n  /**\n   * @ignore\n   *\n   * Validates the claims passed in request is a JSON\n   * TODO: More validation will be added when the server team tells us how they have actually implemented claims\n   * @param claimsRequest\n   */\n  RequestUtils.validateClaimsRequest = function (claimsRequest) {\n    if (!claimsRequest) {\n      return;\n    }\n    try {\n      JSON.parse(claimsRequest);\n    } catch (e) {\n      throw ClientConfigurationError.createClaimsRequestParsingError(e);\n    }\n  };\n  /**\n   * @ignore\n   *\n   * generate unique state per request\n   * @param userState User-provided state value\n   * @returns State string include library state and user state\n   */\n  RequestUtils.validateAndGenerateState = function (userState, interactionType) {\n    return !StringUtils.isEmpty(userState) ? \"\" + RequestUtils.generateLibraryState(interactionType) + Constants.resourceDelimiter + userState : RequestUtils.generateLibraryState(interactionType);\n  };\n  /**\n   * Generates the state value used by the library.\n   *\n   * @returns Base64 encoded string representing the state\n   */\n  RequestUtils.generateLibraryState = function (interactionType) {\n    var stateObject = {\n      id: CryptoUtils.createNewGuid(),\n      ts: TimeUtils.now(),\n      method: interactionType\n    };\n    var stateString = JSON.stringify(stateObject);\n    return CryptoUtils.base64Encode(stateString);\n  };\n  /**\n   * Decodes the state value into a StateObject\n   *\n   * @param state State value returned in the request\n   * @returns Parsed values from the encoded state value\n   */\n  RequestUtils.parseLibraryState = function (state) {\n    var libraryState = decodeURIComponent(state).split(Constants.resourceDelimiter)[0];\n    if (CryptoUtils.isGuid(libraryState)) {\n      // If state is guid, assume timestamp is now and is redirect, as redirect should be only method where this can happen.\n      return {\n        id: libraryState,\n        ts: TimeUtils.now(),\n        method: Constants.interactionTypeRedirect\n      };\n    }\n    try {\n      var stateString = CryptoUtils.base64Decode(libraryState);\n      var stateObject = JSON.parse(stateString);\n      return stateObject;\n    } catch (e) {\n      throw ClientAuthError.createInvalidStateError(state, null);\n    }\n  };\n  /**\n   * @ignore\n   *\n   * validate correlationId and generate if not valid or not set by the user\n   * @param correlationId\n   */\n  RequestUtils.validateAndGenerateCorrelationId = function (correlationId) {\n    // validate user set correlationId or set one for the user if null\n    if (correlationId && !CryptoUtils.isGuid(correlationId)) {\n      throw ClientConfigurationError.createInvalidCorrelationIdError();\n    }\n    return CryptoUtils.isGuid(correlationId) ? correlationId : CryptoUtils.createNewGuid();\n  };\n  /**\n   * Create a request signature\n   * @param request\n   */\n  RequestUtils.createRequestSignature = function (request) {\n    return \"\" + request.scopes.join(\" \").toLowerCase() + Constants.resourceDelimiter + request.authority;\n  };\n  return RequestUtils;\n}();\nexport { RequestUtils };","map":{"version":3,"mappings":"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","names":["Constants","PromptState","BlacklistedEQParams","ClientConfigurationError","ScopeSet","StringUtils","CryptoUtils","TimeUtils","ClientAuthError","RequestUtils","request","isLoginCall","clientId","interactionType","createEmptyRequestError","scopes","extraQueryParameters","appendScopes","extraScopesToConsent","validateInputScope","translateClientIdIfSingleScope","validatePromptParameter","prompt","validateEQParameters","claimsRequest","validateClaimsRequest","state","validateAndGenerateState","correlationId","validateAndGenerateCorrelationId","validatedRequest","LOGIN","SELECT_ACCOUNT","CONSENT","NONE","indexOf","createInvalidPromptError","eQParams","claims","forEach","param","JSON","parse","e","createClaimsRequestParsingError","userState","isEmpty","generateLibraryState","resourceDelimiter","stateObject","id","createNewGuid","ts","now","method","stateString","stringify","base64Encode","libraryState","decodeURIComponent","split","isGuid","interactionTypeRedirect","base64Decode","createInvalidStateError","createInvalidCorrelationIdError","join","toLowerCase","authority"],"sourceRoot":"","sources":["../../src/utils/RequestUtils.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}
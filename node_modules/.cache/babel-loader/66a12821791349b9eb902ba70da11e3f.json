{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { __extends, __spreadArrays } from \"tslib\";\nimport { Constants, PersistentCacheKeys, TemporaryCacheKeys, ErrorCacheKeys, ServerHashParamKeys, SESSION_STORAGE } from \"../utils/Constants\";\nimport { AccessTokenCacheItem } from \"./AccessTokenCacheItem\";\nimport { BrowserStorage } from \"./BrowserStorage\";\nimport { RequestUtils } from \"../utils/RequestUtils\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { IdToken } from \"../IdToken\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\n/**\n * @hidden\n */\nvar AuthCache = /** @class */function (_super) {\n  __extends(AuthCache, _super);\n  function AuthCache(clientId, cacheLocation, storeAuthStateInCookie) {\n    var _this = _super.call(this, cacheLocation) || this;\n    _this.temporaryCache = new BrowserStorage(SESSION_STORAGE);\n    _this.clientId = clientId;\n    // This is hardcoded to true for now. We may make this configurable in the future\n    _this.rollbackEnabled = true;\n    _this.migrateCacheEntries(storeAuthStateInCookie);\n    return _this;\n  }\n  /**\n   * Support roll back to old cache schema until the next major release: true by default now\n   * @param storeAuthStateInCookie\n   */\n  AuthCache.prototype.migrateCacheEntries = function (storeAuthStateInCookie) {\n    var _this = this;\n    var idTokenKey = Constants.cachePrefix + \".\" + PersistentCacheKeys.IDTOKEN;\n    var clientInfoKey = Constants.cachePrefix + \".\" + PersistentCacheKeys.CLIENT_INFO;\n    var errorKey = Constants.cachePrefix + \".\" + ErrorCacheKeys.ERROR;\n    var errorDescKey = Constants.cachePrefix + \".\" + ErrorCacheKeys.ERROR_DESC;\n    var idTokenValue = _super.prototype.getItem.call(this, idTokenKey);\n    var idToken;\n    if (idTokenValue) {\n      try {\n        idToken = new IdToken(idTokenValue);\n      } catch (e) {\n        return;\n      }\n    }\n    if (idToken && idToken.claims && idToken.claims.aud === this.clientId) {\n      var clientInfoValue = _super.prototype.getItem.call(this, clientInfoKey);\n      var errorValue = _super.prototype.getItem.call(this, errorKey);\n      var errorDescValue = _super.prototype.getItem.call(this, errorDescKey);\n      var values_1 = [idTokenValue, clientInfoValue, errorValue, errorDescValue];\n      var keysToMigrate = [PersistentCacheKeys.IDTOKEN, PersistentCacheKeys.CLIENT_INFO, ErrorCacheKeys.ERROR, ErrorCacheKeys.ERROR_DESC];\n      keysToMigrate.forEach(function (cacheKey, index) {\n        return _this.duplicateCacheEntry(cacheKey, values_1[index], storeAuthStateInCookie);\n      });\n    }\n  };\n  /**\n   * Utility function to help with roll back keys\n   * @param newKey\n   * @param value\n   * @param storeAuthStateInCookie\n   */\n  AuthCache.prototype.duplicateCacheEntry = function (newKey, value, storeAuthStateInCookie) {\n    if (value) {\n      this.setItem(newKey, value, storeAuthStateInCookie);\n    }\n  };\n  /**\n   * Prepend msal.<client-id> to each key; Skip for any JSON object as Key (defined schemas do not need the key appended: AccessToken Keys or the upcoming schema)\n   * @param key\n   * @param addInstanceId\n   */\n  AuthCache.prototype.generateCacheKey = function (key, addInstanceId) {\n    try {\n      // Defined schemas do not need the key appended\n      JSON.parse(key);\n      return key;\n    } catch (e) {\n      if (key.indexOf(\"\" + Constants.cachePrefix) === 0 || key.indexOf(Constants.adalIdToken) === 0) {\n        return key;\n      }\n      return addInstanceId ? Constants.cachePrefix + \".\" + this.clientId + \".\" + key : Constants.cachePrefix + \".\" + key;\n    }\n  };\n  /**\n   * Validates that the input cache key contains the account search terms (clientId and homeAccountIdentifier) and\n   * then whether or not it contains the \"scopes\", depending on the token type being searched for. With matching account\n   * search terms, Access Token search tries to match the \"scopes\" keyword, while Id Token search expects \"scopes\" to not be included.\n   * @param key\n   * @param clientId\n   * @param homeAccountIdentifier\n   * @param tokenType\n   */\n  AuthCache.prototype.matchKeyForType = function (key, clientId, homeAccountIdentifier, tokenType) {\n    // All valid token cache item keys are valid JSON objects, ignore keys that aren't\n    var parsedKey = StringUtils.validateAndParseJsonCacheKey(key);\n    if (!parsedKey) {\n      return null;\n    }\n    // Does the cache item match the request account\n    var accountMatches = key.match(clientId) && key.match(homeAccountIdentifier);\n    // Does the cache item match the requested token type\n    var tokenTypeMatches = false;\n    switch (tokenType) {\n      case ServerHashParamKeys.ACCESS_TOKEN:\n        // Cache item is an access token if scopes are included in the cache item key\n        tokenTypeMatches = !!key.match(Constants.scopes);\n        break;\n      case ServerHashParamKeys.ID_TOKEN:\n        // Cache may be an ID token if scopes are NOT included in the cache item key\n        tokenTypeMatches = !key.match(Constants.scopes);\n        break;\n    }\n    return accountMatches && tokenTypeMatches ? parsedKey : null;\n  };\n  /**\n   * add value to storage\n   * @param key\n   * @param value\n   * @param enableCookieStorage\n   */\n  AuthCache.prototype.setItem = function (key, value, enableCookieStorage) {\n    _super.prototype.setItem.call(this, this.generateCacheKey(key, true), value, enableCookieStorage);\n    // Values stored in cookies will have rollback disabled to minimize cookie length\n    if (this.rollbackEnabled && !enableCookieStorage) {\n      _super.prototype.setItem.call(this, this.generateCacheKey(key, false), value, enableCookieStorage);\n    }\n  };\n  /**\n   * get one item by key from storage\n   * @param key\n   * @param enableCookieStorage\n   */\n  AuthCache.prototype.getItem = function (key, enableCookieStorage) {\n    return _super.prototype.getItem.call(this, this.generateCacheKey(key, true), enableCookieStorage);\n  };\n  /**\n   * remove value from storage\n   * @param key\n   */\n  AuthCache.prototype.removeItem = function (key) {\n    this.temporaryCache.removeItem(this.generateCacheKey(key, true));\n    _super.prototype.removeItem.call(this, this.generateCacheKey(key, true));\n    if (this.rollbackEnabled) {\n      _super.prototype.removeItem.call(this, this.generateCacheKey(key, false));\n    }\n  };\n  /**\n   * Sets temporary cache value\n   * @param key\n   * @param value\n   * @param enableCookieStorage\n   */\n  AuthCache.prototype.setTemporaryItem = function (key, value, enableCookieStorage) {\n    this.temporaryCache.setItem(this.generateCacheKey(key, true), value, enableCookieStorage);\n  };\n  /**\n   * Gets temporary cache value\n   * @param key\n   * @param enableCookieStorage\n   */\n  AuthCache.prototype.getTemporaryItem = function (key, enableCookieStorage) {\n    return this.temporaryCache.getItem(this.generateCacheKey(key, true), enableCookieStorage);\n  };\n  /**\n   * Reset the cache items\n   */\n  AuthCache.prototype.resetCacheItems = function () {\n    var storage = window[this.cacheLocation];\n    var key;\n    for (key in storage) {\n      // Check if key contains msal prefix; For now, we are clearing all cache items created by MSAL.js\n      if (storage.hasOwnProperty(key) && key.indexOf(Constants.cachePrefix) !== -1) {\n        _super.prototype.removeItem.call(this, key);\n        // TODO: Clear cache based on client id (clarify use cases where this is needed)\n      }\n    }\n  };\n  /**\n   * Reset all temporary cache items\n   */\n  AuthCache.prototype.resetTempCacheItems = function (state) {\n    var _this = this;\n    var stateId = state && RequestUtils.parseLibraryState(state).id;\n    var isTokenRenewalInProgress = this.tokenRenewalInProgress(state);\n    var storage = window[this.cacheLocation];\n    // check state and remove associated cache\n    if (stateId && !isTokenRenewalInProgress) {\n      Object.keys(storage).forEach(function (key) {\n        if (key.indexOf(stateId) !== -1) {\n          _this.removeItem(key);\n          _super.prototype.clearItemCookie.call(_this, key);\n        }\n      });\n    }\n    // delete the interaction status cache\n    this.setInteractionInProgress(false);\n    this.removeItem(TemporaryCacheKeys.REDIRECT_REQUEST);\n  };\n  /**\n   * Set cookies for IE\n   * @param cName\n   * @param cValue\n   * @param expires\n   */\n  AuthCache.prototype.setItemCookie = function (cName, cValue, expires) {\n    _super.prototype.setItemCookie.call(this, this.generateCacheKey(cName, true), cValue, expires);\n    if (this.rollbackEnabled) {\n      _super.prototype.setItemCookie.call(this, this.generateCacheKey(cName, false), cValue, expires);\n    }\n  };\n  AuthCache.prototype.clearItemCookie = function (cName) {\n    _super.prototype.clearItemCookie.call(this, this.generateCacheKey(cName, true));\n    if (this.rollbackEnabled) {\n      _super.prototype.clearItemCookie.call(this, this.generateCacheKey(cName, false));\n    }\n  };\n  /**\n   * get one item by key from cookies\n   * @param cName\n   */\n  AuthCache.prototype.getItemCookie = function (cName) {\n    return _super.prototype.getItemCookie.call(this, this.generateCacheKey(cName, true));\n  };\n  /**\n   * Get all tokens of a certain type from the cache\n   * @param clientId\n   * @param homeAccountIdentifier\n   * @param tokenType\n   */\n  AuthCache.prototype.getAllTokensByType = function (clientId, homeAccountIdentifier, tokenType) {\n    var _this = this;\n    var results = Object.keys(window[this.cacheLocation]).reduce(function (tokens, key) {\n      var matchedTokenKey = _this.matchKeyForType(key, clientId, homeAccountIdentifier, tokenType);\n      if (matchedTokenKey) {\n        var value = _this.getItem(key);\n        if (value) {\n          try {\n            var newAccessTokenCacheItem = new AccessTokenCacheItem(matchedTokenKey, JSON.parse(value));\n            return tokens.concat([newAccessTokenCacheItem]);\n          } catch (err) {\n            // Skip cache items with non-valid JSON values\n            return tokens;\n          }\n        }\n      }\n      return tokens;\n    }, []);\n    return results;\n  };\n  /**\n   * Get all access tokens in the cache\n   * @param clientId\n   * @param homeAccountIdentifier\n   */\n  AuthCache.prototype.getAllAccessTokens = function (clientId, homeAccountIdentifier) {\n    return this.getAllTokensByType(clientId, homeAccountIdentifier, ServerHashParamKeys.ACCESS_TOKEN);\n  };\n  /**\n   * Get all id tokens in the cache in the form of AccessTokenCacheItem objects so they are\n   * in a normalized format and can make use of the existing cached access token validation logic\n   */\n  AuthCache.prototype.getAllIdTokens = function (clientId, homeAccountIdentifier) {\n    return this.getAllTokensByType(clientId, homeAccountIdentifier, ServerHashParamKeys.ID_TOKEN);\n  };\n  /**\n   * Get all access and ID tokens in the cache\n   * @param clientId\n   * @param homeAccountIdentifier\n   */\n  AuthCache.prototype.getAllTokens = function (clientId, homeAccountIdentifier) {\n    var accessTokens = this.getAllAccessTokens(clientId, homeAccountIdentifier);\n    var idTokens = this.getAllIdTokens(clientId, homeAccountIdentifier);\n    return __spreadArrays(accessTokens, idTokens);\n  };\n  /**\n   * Returns whether or not interaction is currently in progress. Optionally scope it to just this clientId\n   * @param forThisClient\n   */\n  AuthCache.prototype.isInteractionInProgress = function (matchClientId) {\n    var clientId = this.getInteractionInProgress();\n    if (matchClientId) {\n      return clientId === this.clientId;\n    } else {\n      return !!clientId;\n    }\n  };\n  /**\n   * Returns the clientId of the interaction currently in progress\n   */\n  AuthCache.prototype.getInteractionInProgress = function () {\n    return this.getTemporaryItem(this.generateCacheKey(TemporaryCacheKeys.INTERACTION_STATUS, false));\n  };\n  /**\n   * Sets interaction in progress state\n   * @param isInProgress\n   */\n  AuthCache.prototype.setInteractionInProgress = function (newInProgressValue) {\n    if (newInProgressValue) {\n      if (this.isInteractionInProgress(false)) {\n        throw ClientAuthError.createAcquireTokenInProgressError();\n      } else {\n        // Ensure we don't overwrite interaction in progress for a different clientId\n        this.setTemporaryItem(this.generateCacheKey(TemporaryCacheKeys.INTERACTION_STATUS, false), this.clientId);\n      }\n    } else if (!newInProgressValue && this.isInteractionInProgress(true)) {\n      // Only remove if the current in progress interaction is for this clientId\n      this.removeItem(this.generateCacheKey(TemporaryCacheKeys.INTERACTION_STATUS, false));\n    }\n  };\n  /**\n   * Return if the token renewal is still in progress\n   *\n   * @param stateValue\n   */\n  AuthCache.prototype.tokenRenewalInProgress = function (stateValue) {\n    var renewStatus = this.getItem(AuthCache.generateTemporaryCacheKey(TemporaryCacheKeys.RENEW_STATUS, stateValue));\n    return !!(renewStatus && renewStatus === Constants.inProgress);\n  };\n  /**\n   * Clear all cookies\n   */\n  AuthCache.prototype.clearMsalCookie = function (state) {\n    var _this = this;\n    /*\n     * If state is truthy, remove values associated with that request.\n     * Otherwise, remove all MSAL cookies.\n     */\n    if (state) {\n      this.clearItemCookie(AuthCache.generateTemporaryCacheKey(TemporaryCacheKeys.NONCE_IDTOKEN, state));\n      this.clearItemCookie(AuthCache.generateTemporaryCacheKey(TemporaryCacheKeys.STATE_LOGIN, state));\n      this.clearItemCookie(AuthCache.generateTemporaryCacheKey(TemporaryCacheKeys.LOGIN_REQUEST, state));\n      this.clearItemCookie(AuthCache.generateTemporaryCacheKey(TemporaryCacheKeys.STATE_ACQ_TOKEN, state));\n    } else {\n      var cookies = document.cookie.split(\";\");\n      cookies.forEach(function (cookieString) {\n        var cookieName = cookieString.trim().split(\"=\")[0];\n        if (cookieName.indexOf(Constants.cachePrefix) > -1) {\n          _super.prototype.clearItemCookie.call(_this, cookieName);\n        }\n      });\n    }\n  };\n  /**\n   * Create acquireTokenAccountKey to cache account object\n   * @param accountId\n   * @param state\n   */\n  AuthCache.generateAcquireTokenAccountKey = function (accountId, state) {\n    var stateId = RequestUtils.parseLibraryState(state).id;\n    return \"\" + TemporaryCacheKeys.ACQUIRE_TOKEN_ACCOUNT + Constants.resourceDelimiter + accountId + Constants.resourceDelimiter + stateId;\n  };\n  /**\n   * Create authorityKey to cache authority\n   * @param state\n   */\n  AuthCache.generateAuthorityKey = function (state) {\n    return AuthCache.generateTemporaryCacheKey(TemporaryCacheKeys.AUTHORITY, state);\n  };\n  /**\n   * Generates the cache key for temporary cache items, using request state\n   * @param tempCacheKey Cache key prefix\n   * @param state Request state value\n   */\n  AuthCache.generateTemporaryCacheKey = function (tempCacheKey, state) {\n    // Use the state id (a guid), in the interest of shorter key names, which is important for cookies.\n    var stateId = RequestUtils.parseLibraryState(state).id;\n    return \"\" + tempCacheKey + Constants.resourceDelimiter + stateId;\n  };\n  return AuthCache;\n}(BrowserStorage);\nexport { AuthCache };","map":{"version":3,"mappings":"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","names":["Constants","PersistentCacheKeys","TemporaryCacheKeys","ErrorCacheKeys","ServerHashParamKeys","SESSION_STORAGE","AccessTokenCacheItem","BrowserStorage","RequestUtils","StringUtils","IdToken","ClientAuthError","__extends","clientId","cacheLocation","storeAuthStateInCookie","_super","_this","temporaryCache","rollbackEnabled","migrateCacheEntries","AuthCache","idTokenKey","cachePrefix","IDTOKEN","clientInfoKey","CLIENT_INFO","errorKey","ERROR","errorDescKey","ERROR_DESC","idTokenValue","getItem","idToken","e","claims","aud","clientInfoValue","errorValue","errorDescValue","values_1","keysToMigrate","forEach","cacheKey","index","duplicateCacheEntry","newKey","value","setItem","key","addInstanceId","JSON","parse","indexOf","adalIdToken","homeAccountIdentifier","tokenType","parsedKey","validateAndParseJsonCacheKey","accountMatches","match","tokenTypeMatches","ACCESS_TOKEN","scopes","ID_TOKEN","enableCookieStorage","generateCacheKey","removeItem","storage","window","hasOwnProperty","state","stateId","parseLibraryState","id","isTokenRenewalInProgress","tokenRenewalInProgress","Object","keys","clearItemCookie","setInteractionInProgress","REDIRECT_REQUEST","cName","cValue","expires","setItemCookie","getItemCookie","results","reduce","tokens","matchedTokenKey","matchKeyForType","newAccessTokenCacheItem","concat","err","getAllTokensByType","accessTokens","getAllAccessTokens","idTokens","getAllIdTokens","matchClientId","getInteractionInProgress","getTemporaryItem","INTERACTION_STATUS","newInProgressValue","isInteractionInProgress","createAcquireTokenInProgressError","setTemporaryItem","stateValue","renewStatus","generateTemporaryCacheKey","RENEW_STATUS","inProgress","NONCE_IDTOKEN","STATE_LOGIN","LOGIN_REQUEST","STATE_ACQ_TOKEN","cookies","document","cookie","split","cookieString","trim","cookieName","accountId","ACQUIRE_TOKEN_ACCOUNT","resourceDelimiter","AUTHORITY","tempCacheKey"],"sourceRoot":"","sources":["../../src/cache/AuthCache.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from \"tslib\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { isTokenCredential, isNode, getDefaultProxySettings } from \"@azure/core-http\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport { Container, Service } from \"./generated/src/operations\";\nimport { newPipeline, isPipelineLike } from \"./Pipeline\";\nimport { ContainerClient } from \"./ContainerClient\";\nimport { appendToURLPath, appendToURLQuery, extractConnectionStringParts, toTags } from \"./utils/utils.common\";\nimport { StorageSharedKeyCredential } from \"./credentials/StorageSharedKeyCredential\";\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\nimport \"@azure/core-paging\";\nimport { truncatedISO8061Date } from \"./utils/utils.common\";\nimport { convertTracingToRequestOptionsBase, createSpan } from \"./utils/tracing\";\nimport { BlobBatchClient } from \"./BlobBatchClient\";\nimport { StorageClient } from \"./StorageClient\";\nimport { AccountSASPermissions } from \"./sas/AccountSASPermissions\";\nimport { generateAccountSASQueryParameters } from \"./sas/AccountSASSignatureValues\";\nimport { AccountSASServices } from \"./sas/AccountSASServices\";\n/**\n * A BlobServiceClient represents a Client to the Azure Storage Blob service allowing you\n * to manipulate blob containers.\n */\nexport class BlobServiceClient extends StorageClient {\n  constructor(url, credentialOrPipeline,\n  // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n  /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n  options) {\n    let pipeline;\n    if (isPipelineLike(credentialOrPipeline)) {\n      pipeline = credentialOrPipeline;\n    } else if (isNode && credentialOrPipeline instanceof StorageSharedKeyCredential || credentialOrPipeline instanceof AnonymousCredential || isTokenCredential(credentialOrPipeline)) {\n      pipeline = newPipeline(credentialOrPipeline, options);\n    } else {\n      // The second parameter is undefined. Use anonymous credential\n      pipeline = newPipeline(new AnonymousCredential(), options);\n    }\n    super(url, pipeline);\n    this.serviceContext = new Service(this.storageClientContext);\n  }\n  /**\n   *\n   * Creates an instance of BlobServiceClient from connection string.\n   *\n   * @param connectionString - Account connection string or a SAS connection string of an Azure storage account.\n   *                                  [ Note - Account connection string can only be used in NODE.JS runtime. ]\n   *                                  Account connection string example -\n   *                                  `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`\n   *                                  SAS connection string example -\n   *                                  `BlobEndpoint=https://myaccount.blob.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   */\n  static fromConnectionString(connectionString,\n  // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n  /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n  options) {\n    options = options || {};\n    const extractedCreds = extractConnectionStringParts(connectionString);\n    if (extractedCreds.kind === \"AccountConnString\") {\n      if (isNode) {\n        const sharedKeyCredential = new StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);\n        if (!options.proxyOptions) {\n          options.proxyOptions = getDefaultProxySettings(extractedCreds.proxyUri);\n        }\n        const pipeline = newPipeline(sharedKeyCredential, options);\n        return new BlobServiceClient(extractedCreds.url, pipeline);\n      } else {\n        throw new Error(\"Account connection string is only supported in Node.js environment\");\n      }\n    } else if (extractedCreds.kind === \"SASConnString\") {\n      const pipeline = newPipeline(new AnonymousCredential(), options);\n      return new BlobServiceClient(extractedCreds.url + \"?\" + extractedCreds.accountSas, pipeline);\n    } else {\n      throw new Error(\"Connection string must be either an Account connection string or a SAS connection string\");\n    }\n  }\n  /**\n   * Creates a {@link ContainerClient} object\n   *\n   * @param containerName - A container name\n   * @returns A new ContainerClient object for the given container name.\n   *\n   * Example usage:\n   *\n   * ```js\n   * const containerClient = blobServiceClient.getContainerClient(\"<container name>\");\n   * ```\n   */\n  getContainerClient(containerName) {\n    return new ContainerClient(appendToURLPath(this.url, encodeURIComponent(containerName)), this.pipeline);\n  }\n  /**\n   * Create a Blob container.\n   *\n   * @param containerName - Name of the container to create.\n   * @param options - Options to configure Container Create operation.\n   * @returns Container creation response and the corresponding container client.\n   */\n  async createContainer(containerName) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      span,\n      updatedOptions\n    } = createSpan(\"BlobServiceClient-createContainer\", options);\n    try {\n      const containerClient = this.getContainerClient(containerName);\n      const containerCreateResponse = await containerClient.create(updatedOptions);\n      return {\n        containerClient,\n        containerCreateResponse\n      };\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n  /**\n   * Deletes a Blob container.\n   *\n   * @param containerName - Name of the container to delete.\n   * @param options - Options to configure Container Delete operation.\n   * @returns Container deletion response.\n   */\n  async deleteContainer(containerName) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      span,\n      updatedOptions\n    } = createSpan(\"BlobServiceClient-deleteContainer\", options);\n    try {\n      const containerClient = this.getContainerClient(containerName);\n      return await containerClient.delete(updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n  /**\n   * Restore a previously deleted Blob container.\n   * This API is only functional if Container Soft Delete is enabled for the storage account associated with the container.\n   *\n   * @param deletedContainerName - Name of the previously deleted container.\n   * @param deletedContainerVersion - Version of the previously deleted container, used to uniquely identify the deleted container.\n   * @param options - Options to configure Container Restore operation.\n   * @returns Container deletion response.\n   */\n  async undeleteContainer(deletedContainerName, deletedContainerVersion) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const {\n      span,\n      updatedOptions\n    } = createSpan(\"BlobServiceClient-undeleteContainer\", options);\n    try {\n      const containerClient = this.getContainerClient(options.destinationContainerName || deletedContainerName);\n      // Hack to access a protected member.\n      const containerContext = new Container(containerClient[\"storageClientContext\"]);\n      const containerUndeleteResponse = await containerContext.restore(Object.assign({\n        deletedContainerName,\n        deletedContainerVersion\n      }, updatedOptions));\n      return {\n        containerClient,\n        containerUndeleteResponse\n      };\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n  /**\n   * Rename an existing Blob Container.\n   *\n   * @param sourceContainerName - The name of the source container.\n   * @param destinationContainerName - The new name of the container.\n   * @param options - Options to configure Container Rename operation.\n   */\n  /* eslint-disable-next-line @typescript-eslint/ban-ts-comment */\n  // @ts-ignore Need to hide this interface for now. Make it public and turn on the live tests for it when the service is ready.\n  async renameContainer(sourceContainerName, destinationContainerName) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var _a;\n    const {\n      span,\n      updatedOptions\n    } = createSpan(\"BlobServiceClient-renameContainer\", options);\n    try {\n      const containerClient = this.getContainerClient(destinationContainerName);\n      // Hack to access a protected member.\n      const containerContext = new Container(containerClient[\"storageClientContext\"]);\n      const containerRenameResponse = await containerContext.rename(sourceContainerName, Object.assign(Object.assign({}, updatedOptions), {\n        sourceLeaseId: (_a = options.sourceCondition) === null || _a === void 0 ? void 0 : _a.leaseId\n      }));\n      return {\n        containerClient,\n        containerRenameResponse\n      };\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n  /**\n   * Gets the properties of a storage accountâ€™s Blob service, including properties\n   * for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-service-properties\n   *\n   * @param options - Options to the Service Get Properties operation.\n   * @returns Response data for the Service Get Properties operation.\n   */\n  async getProperties() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      span,\n      updatedOptions\n    } = createSpan(\"BlobServiceClient-getProperties\", options);\n    try {\n      return await this.serviceContext.getProperties(Object.assign({\n        abortSignal: options.abortSignal\n      }, convertTracingToRequestOptionsBase(updatedOptions)));\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n  /**\n   * Sets properties for a storage accountâ€™s Blob service endpoint, including properties\n   * for Storage Analytics, CORS (Cross-Origin Resource Sharing) rules and soft delete settings.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-service-properties\n   *\n   * @param properties -\n   * @param options - Options to the Service Set Properties operation.\n   * @returns Response data for the Service Set Properties operation.\n   */\n  async setProperties(properties) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      span,\n      updatedOptions\n    } = createSpan(\"BlobServiceClient-setProperties\", options);\n    try {\n      return await this.serviceContext.setProperties(properties, Object.assign({\n        abortSignal: options.abortSignal\n      }, convertTracingToRequestOptionsBase(updatedOptions)));\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n  /**\n   * Retrieves statistics related to replication for the Blob service. It is only\n   * available on the secondary location endpoint when read-access geo-redundant\n   * replication is enabled for the storage account.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-service-stats\n   *\n   * @param options - Options to the Service Get Statistics operation.\n   * @returns Response data for the Service Get Statistics operation.\n   */\n  async getStatistics() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      span,\n      updatedOptions\n    } = createSpan(\"BlobServiceClient-getStatistics\", options);\n    try {\n      return await this.serviceContext.getStatistics(Object.assign({\n        abortSignal: options.abortSignal\n      }, convertTracingToRequestOptionsBase(updatedOptions)));\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n  /**\n   * The Get Account Information operation returns the sku name and account kind\n   * for the specified account.\n   * The Get Account Information operation is available on service versions beginning\n   * with version 2018-03-28.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-account-information\n   *\n   * @param options - Options to the Service Get Account Info operation.\n   * @returns Response data for the Service Get Account Info operation.\n   */\n  async getAccountInfo() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      span,\n      updatedOptions\n    } = createSpan(\"BlobServiceClient-getAccountInfo\", options);\n    try {\n      return await this.serviceContext.getAccountInfo(Object.assign({\n        abortSignal: options.abortSignal\n      }, convertTracingToRequestOptionsBase(updatedOptions)));\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n  /**\n   * Returns a list of the containers under the specified account.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/list-containers2\n   *\n   * @param marker - A string value that identifies the portion of\n   *                        the list of containers to be returned with the next listing operation. The\n   *                        operation returns the continuationToken value within the response body if the\n   *                        listing operation did not return all containers remaining to be listed\n   *                        with the current page. The continuationToken value can be used as the value for\n   *                        the marker parameter in a subsequent call to request the next page of list\n   *                        items. The marker value is opaque to the client.\n   * @param options - Options to the Service List Container Segment operation.\n   * @returns Response data for the Service List Container Segment operation.\n   */\n  async listContainersSegment(marker) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      span,\n      updatedOptions\n    } = createSpan(\"BlobServiceClient-listContainersSegment\", options);\n    try {\n      return await this.serviceContext.listContainersSegment(Object.assign(Object.assign(Object.assign({\n        abortSignal: options.abortSignal,\n        marker\n      }, options), {\n        include: typeof options.include === \"string\" ? [options.include] : options.include\n      }), convertTracingToRequestOptionsBase(updatedOptions)));\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n  /**\n   * The Filter Blobs operation enables callers to list blobs across all containers whose tags\n   * match a given search expression. Filter blobs searches across all containers within a\n   * storage account but can be scoped within the expression to a single container.\n   *\n   * @param tagFilterSqlExpression - The where parameter enables the caller to query blobs whose tags match a given expression.\n   *                                        The given expression must evaluate to true for a blob to be returned in the results.\n   *                                        The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;\n   *                                        however, only a subset of the OData filter syntax is supported in the Blob service.\n   * @param marker - A string value that identifies the portion of\n   *                          the list of blobs to be returned with the next listing operation. The\n   *                          operation returns the continuationToken value within the response body if the\n   *                          listing operation did not return all blobs remaining to be listed\n   *                          with the current page. The continuationToken value can be used as the value for\n   *                          the marker parameter in a subsequent call to request the next page of list\n   *                          items. The marker value is opaque to the client.\n   * @param options - Options to find blobs by tags.\n   */\n  async findBlobsByTagsSegment(tagFilterSqlExpression, marker) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const {\n      span,\n      updatedOptions\n    } = createSpan(\"BlobServiceClient-findBlobsByTagsSegment\", options);\n    try {\n      const response = await this.serviceContext.filterBlobs(Object.assign({\n        abortSignal: options.abortSignal,\n        where: tagFilterSqlExpression,\n        marker,\n        maxPageSize: options.maxPageSize\n      }, convertTracingToRequestOptionsBase(updatedOptions)));\n      const wrappedResponse = Object.assign(Object.assign({}, response), {\n        _response: response._response,\n        blobs: response.blobs.map(blob => {\n          var _a;\n          let tagValue = \"\";\n          if (((_a = blob.tags) === null || _a === void 0 ? void 0 : _a.blobTagSet.length) === 1) {\n            tagValue = blob.tags.blobTagSet[0].value;\n          }\n          return Object.assign(Object.assign({}, blob), {\n            tags: toTags(blob.tags),\n            tagValue\n          });\n        })\n      });\n      return wrappedResponse;\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n  /**\n   * Returns an AsyncIterableIterator for ServiceFindBlobsByTagsSegmentResponse.\n   *\n   * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.\n   *                                         The given expression must evaluate to true for a blob to be returned in the results.\n   *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;\n   *                                         however, only a subset of the OData filter syntax is supported in the Blob service.\n   * @param marker - A string value that identifies the portion of\n   *                          the list of blobs to be returned with the next listing operation. The\n   *                          operation returns the continuationToken value within the response body if the\n   *                          listing operation did not return all blobs remaining to be listed\n   *                          with the current page. The continuationToken value can be used as the value for\n   *                          the marker parameter in a subsequent call to request the next page of list\n   *                          items. The marker value is opaque to the client.\n   * @param options - Options to find blobs by tags.\n   */\n  findBlobsByTagsSegments(tagFilterSqlExpression, marker) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return __asyncGenerator(this, arguments, function* findBlobsByTagsSegments_1() {\n      let response;\n      if (!!marker || marker === undefined) {\n        do {\n          response = yield __await(this.findBlobsByTagsSegment(tagFilterSqlExpression, marker, options));\n          response.blobs = response.blobs || [];\n          marker = response.continuationToken;\n          yield yield __await(response);\n        } while (marker);\n      }\n    });\n  }\n  /**\n   * Returns an AsyncIterableIterator for blobs.\n   *\n   * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.\n   *                                         The given expression must evaluate to true for a blob to be returned in the results.\n   *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;\n   *                                         however, only a subset of the OData filter syntax is supported in the Blob service.\n   * @param options - Options to findBlobsByTagsItems.\n   */\n  findBlobsByTagsItems(tagFilterSqlExpression) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return __asyncGenerator(this, arguments, function* findBlobsByTagsItems_1() {\n      var e_1, _a;\n      let marker;\n      try {\n        for (var _b = __asyncValues(this.findBlobsByTagsSegments(tagFilterSqlExpression, marker, options)), _c; _c = yield __await(_b.next()), !_c.done;) {\n          const segment = _c.value;\n          yield __await(yield* __asyncDelegator(__asyncValues(segment.blobs)));\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    });\n  }\n  /**\n   * Returns an async iterable iterator to find all blobs with specified tag\n   * under the specified account.\n   *\n   * .byPage() returns an async iterable iterator to list the blobs in pages.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-service-properties\n   *\n   * Example using `for await` syntax:\n   *\n   * ```js\n   * let i = 1;\n   * for await (const blob of blobServiceClient.findBlobsByTags(\"tagkey='tagvalue'\")) {\n   *   console.log(`Blob ${i++}: ${container.name}`);\n   * }\n   * ```\n   *\n   * Example using `iter.next()`:\n   *\n   * ```js\n   * let i = 1;\n   * const iter = blobServiceClient.findBlobsByTags(\"tagkey='tagvalue'\");\n   * let blobItem = await iter.next();\n   * while (!blobItem.done) {\n   *   console.log(`Blob ${i++}: ${blobItem.value.name}`);\n   *   blobItem = await iter.next();\n   * }\n   * ```\n   *\n   * Example using `byPage()`:\n   *\n   * ```js\n   * // passing optional maxPageSize in the page settings\n   * let i = 1;\n   * for await (const response of blobServiceClient.findBlobsByTags(\"tagkey='tagvalue'\").byPage({ maxPageSize: 20 })) {\n   *   if (response.blobs) {\n   *     for (const blob of response.blobs) {\n   *       console.log(`Blob ${i++}: ${blob.name}`);\n   *     }\n   *   }\n   * }\n   * ```\n   *\n   * Example using paging with a marker:\n   *\n   * ```js\n   * let i = 1;\n   * let iterator = blobServiceClient.findBlobsByTags(\"tagkey='tagvalue'\").byPage({ maxPageSize: 2 });\n   * let response = (await iterator.next()).value;\n   *\n   * // Prints 2 blob names\n   * if (response.blobs) {\n   *   for (const blob of response.blobs) {\n   *     console.log(`Blob ${i++}: ${blob.name}`);\n   *   }\n   * }\n   *\n   * // Gets next marker\n   * let marker = response.continuationToken;\n   * // Passing next marker as continuationToken\n   * iterator = blobServiceClient\n   *   .findBlobsByTags(\"tagkey='tagvalue'\")\n   *   .byPage({ continuationToken: marker, maxPageSize: 10 });\n   * response = (await iterator.next()).value;\n   *\n   * // Prints blob names\n   * if (response.blobs) {\n   *   for (const blob of response.blobs) {\n   *      console.log(`Blob ${i++}: ${blob.name}`);\n   *   }\n   * }\n   * ```\n   *\n   * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.\n   *                                         The given expression must evaluate to true for a blob to be returned in the results.\n   *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;\n   *                                         however, only a subset of the OData filter syntax is supported in the Blob service.\n   * @param options - Options to find blobs by tags.\n   */\n  findBlobsByTags(tagFilterSqlExpression) {\n    var _this = this;\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    // AsyncIterableIterator to iterate over blobs\n    const listSegmentOptions = Object.assign({}, options);\n    const iter = this.findBlobsByTagsItems(tagFilterSqlExpression, listSegmentOptions);\n    return {\n      /**\n       * The next method, part of the iteration protocol\n       */\n      next() {\n        return iter.next();\n      },\n      /**\n       * The connection to the async iterator, part of the iteration protocol\n       */\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      /**\n       * Return an AsyncIterableIterator that works a page at a time\n       */\n      byPage: function () {\n        let settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return _this.findBlobsByTagsSegments(tagFilterSqlExpression, settings.continuationToken, Object.assign({\n          maxPageSize: settings.maxPageSize\n        }, listSegmentOptions));\n      }\n    };\n  }\n  /**\n   * Returns an AsyncIterableIterator for ServiceListContainersSegmentResponses\n   *\n   * @param marker - A string value that identifies the portion of\n   *                        the list of containers to be returned with the next listing operation. The\n   *                        operation returns the continuationToken value within the response body if the\n   *                        listing operation did not return all containers remaining to be listed\n   *                        with the current page. The continuationToken value can be used as the value for\n   *                        the marker parameter in a subsequent call to request the next page of list\n   *                        items. The marker value is opaque to the client.\n   * @param options - Options to list containers operation.\n   */\n  listSegments(marker) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return __asyncGenerator(this, arguments, function* listSegments_1() {\n      let listContainersSegmentResponse;\n      if (!!marker || marker === undefined) {\n        do {\n          listContainersSegmentResponse = yield __await(this.listContainersSegment(marker, options));\n          listContainersSegmentResponse.containerItems = listContainersSegmentResponse.containerItems || [];\n          marker = listContainersSegmentResponse.continuationToken;\n          yield yield __await(yield __await(listContainersSegmentResponse));\n        } while (marker);\n      }\n    });\n  }\n  /**\n   * Returns an AsyncIterableIterator for Container Items\n   *\n   * @param options - Options to list containers operation.\n   */\n  listItems() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return __asyncGenerator(this, arguments, function* listItems_1() {\n      var e_2, _a;\n      let marker;\n      try {\n        for (var _b = __asyncValues(this.listSegments(marker, options)), _c; _c = yield __await(_b.next()), !_c.done;) {\n          const segment = _c.value;\n          yield __await(yield* __asyncDelegator(__asyncValues(segment.containerItems)));\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n    });\n  }\n  /**\n   * Returns an async iterable iterator to list all the containers\n   * under the specified account.\n   *\n   * .byPage() returns an async iterable iterator to list the containers in pages.\n   *\n   * Example using `for await` syntax:\n   *\n   * ```js\n   * let i = 1;\n   * for await (const container of blobServiceClient.listContainers()) {\n   *   console.log(`Container ${i++}: ${container.name}`);\n   * }\n   * ```\n   *\n   * Example using `iter.next()`:\n   *\n   * ```js\n   * let i = 1;\n   * const iter = blobServiceClient.listContainers();\n   * let containerItem = await iter.next();\n   * while (!containerItem.done) {\n   *   console.log(`Container ${i++}: ${containerItem.value.name}`);\n   *   containerItem = await iter.next();\n   * }\n   * ```\n   *\n   * Example using `byPage()`:\n   *\n   * ```js\n   * // passing optional maxPageSize in the page settings\n   * let i = 1;\n   * for await (const response of blobServiceClient.listContainers().byPage({ maxPageSize: 20 })) {\n   *   if (response.containerItems) {\n   *     for (const container of response.containerItems) {\n   *       console.log(`Container ${i++}: ${container.name}`);\n   *     }\n   *   }\n   * }\n   * ```\n   *\n   * Example using paging with a marker:\n   *\n   * ```js\n   * let i = 1;\n   * let iterator = blobServiceClient.listContainers().byPage({ maxPageSize: 2 });\n   * let response = (await iterator.next()).value;\n   *\n   * // Prints 2 container names\n   * if (response.containerItems) {\n   *   for (const container of response.containerItems) {\n   *     console.log(`Container ${i++}: ${container.name}`);\n   *   }\n   * }\n   *\n   * // Gets next marker\n   * let marker = response.continuationToken;\n   * // Passing next marker as continuationToken\n   * iterator = blobServiceClient\n   *   .listContainers()\n   *   .byPage({ continuationToken: marker, maxPageSize: 10 });\n   * response = (await iterator.next()).value;\n   *\n   * // Prints 10 container names\n   * if (response.containerItems) {\n   *   for (const container of response.containerItems) {\n   *      console.log(`Container ${i++}: ${container.name}`);\n   *   }\n   * }\n   * ```\n   *\n   * @param options - Options to list containers.\n   * @returns An asyncIterableIterator that supports paging.\n   */\n  listContainers() {\n    var _this2 = this;\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (options.prefix === \"\") {\n      options.prefix = undefined;\n    }\n    const include = [];\n    if (options.includeDeleted) {\n      include.push(\"deleted\");\n    }\n    if (options.includeMetadata) {\n      include.push(\"metadata\");\n    }\n    if (options.includeSystem) {\n      include.push(\"system\");\n    }\n    // AsyncIterableIterator to iterate over containers\n    const listSegmentOptions = Object.assign(Object.assign({}, options), include.length > 0 ? {\n      include\n    } : {});\n    const iter = this.listItems(listSegmentOptions);\n    return {\n      /**\n       * The next method, part of the iteration protocol\n       */\n      next() {\n        return iter.next();\n      },\n      /**\n       * The connection to the async iterator, part of the iteration protocol\n       */\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      /**\n       * Return an AsyncIterableIterator that works a page at a time\n       */\n      byPage: function () {\n        let settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return _this2.listSegments(settings.continuationToken, Object.assign({\n          maxPageSize: settings.maxPageSize\n        }, listSegmentOptions));\n      }\n    };\n  }\n  /**\n   * ONLY AVAILABLE WHEN USING BEARER TOKEN AUTHENTICATION (TokenCredential).\n   *\n   * Retrieves a user delegation key for the Blob service. This is only a valid operation when using\n   * bearer token authentication.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-user-delegation-key\n   *\n   * @param startsOn -      The start time for the user delegation SAS. Must be within 7 days of the current time\n   * @param expiresOn -     The end time for the user delegation SAS. Must be within 7 days of the current time\n   */\n  async getUserDelegationKey(startsOn, expiresOn) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const {\n      span,\n      updatedOptions\n    } = createSpan(\"BlobServiceClient-getUserDelegationKey\", options);\n    try {\n      const response = await this.serviceContext.getUserDelegationKey({\n        startsOn: truncatedISO8061Date(startsOn, false),\n        expiresOn: truncatedISO8061Date(expiresOn, false)\n      }, Object.assign({\n        abortSignal: options.abortSignal\n      }, convertTracingToRequestOptionsBase(updatedOptions)));\n      const userDelegationKey = {\n        signedObjectId: response.signedObjectId,\n        signedTenantId: response.signedTenantId,\n        signedStartsOn: new Date(response.signedStartsOn),\n        signedExpiresOn: new Date(response.signedExpiresOn),\n        signedService: response.signedService,\n        signedVersion: response.signedVersion,\n        value: response.value\n      };\n      const res = Object.assign({\n        _response: response._response,\n        requestId: response.requestId,\n        clientRequestId: response.clientRequestId,\n        version: response.version,\n        date: response.date,\n        errorCode: response.errorCode\n      }, userDelegationKey);\n      return res;\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n  /**\n   * Creates a BlobBatchClient object to conduct batch operations.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch\n   *\n   * @returns A new BlobBatchClient object for this service.\n   */\n  getBlobBatchClient() {\n    return new BlobBatchClient(this.url, this.pipeline);\n  }\n  /**\n   * Only available for BlobServiceClient constructed with a shared key credential.\n   *\n   * Generates a Blob account Shared Access Signature (SAS) URI based on the client properties\n   * and parameters passed in. The SAS is signed by the shared key credential of the client.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-account-sas\n   *\n   * @param expiresOn - Optional. The time at which the shared access signature becomes invalid. Default to an hour later if not provided.\n   * @param permissions - Specifies the list of permissions to be associated with the SAS.\n   * @param resourceTypes - Specifies the resource types associated with the shared access signature.\n   * @param options - Optional parameters.\n   * @returns An account SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.\n   */\n  generateAccountSasUrl(expiresOn) {\n    let permissions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : AccountSASPermissions.parse(\"r\");\n    let resourceTypes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"sco\";\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    if (!(this.credential instanceof StorageSharedKeyCredential)) {\n      throw RangeError(\"Can only generate the account SAS when the client is initialized with a shared key credential\");\n    }\n    if (expiresOn === undefined) {\n      const now = new Date();\n      expiresOn = new Date(now.getTime() + 3600 * 1000);\n    }\n    const sas = generateAccountSASQueryParameters(Object.assign({\n      permissions,\n      expiresOn,\n      resourceTypes,\n      services: AccountSASServices.parse(\"b\").toString()\n    }, options), this.credential).toString();\n    return appendToURLQuery(this.url, sas);\n  }\n}","map":{"version":3,"mappings":"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","names":["isTokenCredential","isNode","getDefaultProxySettings","SpanStatusCode","Container","Service","newPipeline","isPipelineLike","ContainerClient","appendToURLPath","appendToURLQuery","extractConnectionStringParts","toTags","StorageSharedKeyCredential","AnonymousCredential","truncatedISO8061Date","convertTracingToRequestOptionsBase","createSpan","BlobBatchClient","StorageClient","AccountSASPermissions","generateAccountSASQueryParameters","AccountSASServices","BlobServiceClient","constructor","url","credentialOrPipeline","options","pipeline","serviceContext","storageClientContext","fromConnectionString","connectionString","extractedCreds","kind","sharedKeyCredential","accountName","accountKey","proxyOptions","proxyUri","Error","accountSas","getContainerClient","containerName","encodeURIComponent","createContainer","span","updatedOptions","containerClient","containerCreateResponse","create","e","setStatus","code","ERROR","message","end","deleteContainer","delete","undeleteContainer","deletedContainerName","deletedContainerVersion","destinationContainerName","containerContext","containerUndeleteResponse","restore","renameContainer","sourceContainerName","containerRenameResponse","rename","sourceLeaseId","sourceCondition","leaseId","getProperties","abortSignal","setProperties","properties","getStatistics","getAccountInfo","listContainersSegment","marker","include","findBlobsByTagsSegment","tagFilterSqlExpression","response","filterBlobs","where","maxPageSize","wrappedResponse","_response","blobs","map","blob","tagValue","tags","blobTagSet","length","value","findBlobsByTagsSegments","undefined","continuationToken","findBlobsByTagsItems","segment","__asyncDelegator","findBlobsByTags","listSegmentOptions","iter","next","Symbol","asyncIterator","byPage","settings","listSegments","listContainersSegmentResponse","containerItems","listItems","listContainers","prefix","includeDeleted","push","includeMetadata","includeSystem","getUserDelegationKey","startsOn","expiresOn","userDelegationKey","signedObjectId","signedTenantId","signedStartsOn","Date","signedExpiresOn","signedService","signedVersion","res","requestId","clientRequestId","version","date","errorCode","getBlobBatchClient","generateAccountSasUrl","permissions","parse","resourceTypes","credential","RangeError","now","getTime","sas","services","toString"],"sources":["/Users/yupenglei/Documents/geo-react/node_modules/@azure/storage-blob/src/BlobServiceClient.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport {\n  TokenCredential,\n  isTokenCredential,\n  isNode,\n  HttpResponse,\n  getDefaultProxySettings,\n} from \"@azure/core-http\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport {\n  ServiceGetUserDelegationKeyHeaders,\n  ContainerCreateResponse,\n  ContainerDeleteResponse,\n  ServiceGetPropertiesResponse,\n  BlobServiceProperties,\n  ServiceSetPropertiesResponse,\n  ServiceGetStatisticsResponse,\n  ServiceGetAccountInfoResponse,\n  ServiceListContainersSegmentResponse,\n  ContainerItem,\n  UserDelegationKeyModel,\n  ContainerUndeleteResponse,\n  FilterBlobSegmentModel,\n  ServiceFilterBlobsHeaders,\n  ContainerRenameResponse,\n  LeaseAccessConditions,\n  FilterBlobSegment,\n  FilterBlobItem,\n} from \"./generatedModels\";\nimport { Container, Service } from \"./generated/src/operations\";\nimport { newPipeline, StoragePipelineOptions, PipelineLike, isPipelineLike } from \"./Pipeline\";\nimport {\n  ContainerClient,\n  ContainerCreateOptions,\n  ContainerDeleteMethodOptions,\n} from \"./ContainerClient\";\nimport {\n  appendToURLPath,\n  appendToURLQuery,\n  extractConnectionStringParts,\n  toTags,\n} from \"./utils/utils.common\";\nimport { StorageSharedKeyCredential } from \"./credentials/StorageSharedKeyCredential\";\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\nimport \"@azure/core-paging\";\nimport { PageSettings, PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport { truncatedISO8061Date } from \"./utils/utils.common\";\nimport { convertTracingToRequestOptionsBase, createSpan } from \"./utils/tracing\";\nimport { BlobBatchClient } from \"./BlobBatchClient\";\nimport { CommonOptions, StorageClient } from \"./StorageClient\";\nimport { AccountSASPermissions } from \"./sas/AccountSASPermissions\";\nimport { SASProtocol } from \"./sas/SASQueryParameters\";\nimport { SasIPRange } from \"./sas/SasIPRange\";\nimport { generateAccountSASQueryParameters } from \"./sas/AccountSASSignatureValues\";\nimport { AccountSASServices } from \"./sas/AccountSASServices\";\nimport { ListContainersIncludeType } from \"./generated/src\";\n\n/**\n * Options to configure the {@link BlobServiceClient.getProperties} operation.\n */\nexport interface ServiceGetPropertiesOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Options to configure the {@link BlobServiceClient.setProperties} operation.\n */\nexport interface ServiceSetPropertiesOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Options to configure the {@link BlobServiceClient.getAccountInfo} operation.\n */\nexport interface ServiceGetAccountInfoOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Options to configure the {@link BlobServiceClient.getStatistics} operation.\n */\nexport interface ServiceGetStatisticsOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Options to configure the Service - Get User Delegation Key.\n */\nexport interface ServiceGetUserDelegationKeyOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Options to configure the {@link BlobServiceClient.listContainerSegment} operation.\n */\ninterface ServiceListContainersSegmentOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Filters the results to return only containers\n   * whose name begins with the specified prefix.\n   */\n  prefix?: string;\n  /**\n   * Specifies the maximum number of containers\n   * to return. If the request does not specify maxPageSize, or specifies a\n   * value greater than 5000, the server will return up to 5000 items. Note\n   * that if the listing operation crosses a partition boundary, then the\n   * service will return a continuation token for retrieving the remainder of\n   * the results. For this reason, it is possible that the service will return\n   * fewer results than specified by maxPageSize, or than the default of 5000.\n   */\n  maxPageSize?: number;\n  /**\n   * Include this parameter to\n   * specify that the container's metadata be returned as part of the response\n   * body. Possible values include: 'metadata'\n   */\n  include?: ListContainersIncludeType | ListContainersIncludeType[];\n}\n\n/**\n * Options to configure the {@link BlobServiceClient.listContainers} operation.\n */\nexport interface ServiceListContainersOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Filters the results to return only containers\n   * whose name begins with the specified prefix.\n   */\n  prefix?: string;\n  /**\n   * Specifies whether the container's metadata\n   *                                   should be returned as part of the response body.\n   */\n  includeMetadata?: boolean;\n\n  /**\n   * Specifies whether soft deleted containers should be included in the response.\n   */\n  includeDeleted?: boolean;\n  /**\n   * Specifies whether system containers should be included in the response.\n   */\n  includeSystem?: boolean;\n}\n\n/**\n * Options to configure the {@link BlobServiceClient.findBlobsByTagsSegment} operation.\n */\ninterface ServiceFindBlobsByTagsSegmentOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Specifies the maximum number of blobs\n   * to return. If the request does not specify maxPageSize, or specifies a\n   * value greater than 5000, the server will return up to 5000 items. Note\n   * that if the listing operation crosses a partition boundary, then the\n   * service will return a continuation token for retrieving the remainder of\n   * the results. For this reason, it is possible that the service will return\n   * fewer results than specified by maxPageSize, or than the default of 5000.\n   */\n  maxPageSize?: number;\n}\n\n/**\n * Options to configure the {@link BlobServiceClient.findBlobsByTags} operation.\n */\nexport interface ServiceFindBlobByTagsOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * The response of {@link BlobServiceClient.findBlobsByTags} operation.\n */\nexport type ServiceFindBlobsByTagsSegmentResponse = FilterBlobSegment &\n  ServiceFilterBlobsHeaders & {\n    /**\n     * The underlying HTTP response.\n     */\n    _response: HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: ServiceFilterBlobsHeaders;\n\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: FilterBlobSegmentModel;\n    };\n  };\n\n/**\n * A user delegation key.\n */\nexport interface UserDelegationKey {\n  /**\n   * The Azure Active Directory object ID in GUID format.\n   */\n  signedObjectId: string;\n  /**\n   * The Azure Active Directory tenant ID in GUID format.\n   */\n  signedTenantId: string;\n  /**\n   * The date-time the key is active.\n   */\n  signedStartsOn: Date;\n  /**\n   * The date-time the key expires.\n   */\n  signedExpiresOn: Date;\n  /**\n   * Abbreviation of the Azure Storage service that accepts the key.\n   */\n  signedService: string;\n  /**\n   * The service version that created the key.\n   */\n  signedVersion: string;\n  /**\n   * The key as a base64 string.\n   */\n  value: string;\n}\n\n/**\n * Contains response data for the {@link getUserDelegationKey} operation.\n */\nexport declare type ServiceGetUserDelegationKeyResponse = UserDelegationKey &\n  ServiceGetUserDelegationKeyHeaders & {\n    /**\n     * The underlying HTTP response.\n     */\n    _response: HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: ServiceGetUserDelegationKeyHeaders;\n\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: UserDelegationKeyModel;\n    };\n  };\n\n/**\n * Options to configure {@link BlobServiceClient.undeleteContainer} operation.\n */\nexport interface ServiceUndeleteContainerOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Optional. Specifies the new name of the restored container.\n   * Will use its original name if this is not specified.\n   * @deprecated Restore container to a different name is not supported by service anymore.\n   */\n  destinationContainerName?: string;\n}\n\n/**\n * Options to configure {@link BlobServiceClient.renameContainer} operation.\n */\nexport interface ServiceRenameContainerOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n\n  /**\n   * Condition to meet for the source container.\n   */\n  sourceCondition?: LeaseAccessConditions;\n}\n\n/**\n * Options to configure {@link BlobServiceClient.generateAccountSasUrl} operation.\n */\nexport interface ServiceGenerateAccountSasUrlOptions {\n  /**\n   * The version of the service this SAS will target. If not specified, it will default to the version targeted by the\n   * library.\n   */\n  version?: string;\n\n  /**\n   * Optional. SAS protocols allowed.\n   */\n  protocol?: SASProtocol;\n\n  /**\n   * Optional. When the SAS will take effect.\n   */\n  startsOn?: Date;\n  /**\n   * Optional. IP range allowed.\n   */\n  ipRange?: SasIPRange;\n  /**\n   * Optional. Encryption scope to use when sending requests authorized with this SAS URI.\n   */\n  encryptionScope?: string;\n}\n\n/**\n * A BlobServiceClient represents a Client to the Azure Storage Blob service allowing you\n * to manipulate blob containers.\n */\nexport class BlobServiceClient extends StorageClient {\n  /**\n   * serviceContext provided by protocol layer.\n   */\n  private serviceContext: Service;\n\n  /**\n   *\n   * Creates an instance of BlobServiceClient from connection string.\n   *\n   * @param connectionString - Account connection string or a SAS connection string of an Azure storage account.\n   *                                  [ Note - Account connection string can only be used in NODE.JS runtime. ]\n   *                                  Account connection string example -\n   *                                  `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`\n   *                                  SAS connection string example -\n   *                                  `BlobEndpoint=https://myaccount.blob.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   */\n  public static fromConnectionString(\n    connectionString: string,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: StoragePipelineOptions\n  ): BlobServiceClient {\n    options = options || {};\n    const extractedCreds = extractConnectionStringParts(connectionString);\n    if (extractedCreds.kind === \"AccountConnString\") {\n      if (isNode) {\n        const sharedKeyCredential = new StorageSharedKeyCredential(\n          extractedCreds.accountName!,\n          extractedCreds.accountKey\n        );\n\n        if (!options.proxyOptions) {\n          options.proxyOptions = getDefaultProxySettings(extractedCreds.proxyUri);\n        }\n\n        const pipeline = newPipeline(sharedKeyCredential, options);\n        return new BlobServiceClient(extractedCreds.url, pipeline);\n      } else {\n        throw new Error(\"Account connection string is only supported in Node.js environment\");\n      }\n    } else if (extractedCreds.kind === \"SASConnString\") {\n      const pipeline = newPipeline(new AnonymousCredential(), options);\n      return new BlobServiceClient(extractedCreds.url + \"?\" + extractedCreds.accountSas, pipeline);\n    } else {\n      throw new Error(\n        \"Connection string must be either an Account connection string or a SAS connection string\"\n      );\n    }\n  }\n\n  /**\n   * Creates an instance of BlobServiceClient.\n   *\n   * @param url - A Client string pointing to Azure Storage blob service, such as\n   *                     \"https://myaccount.blob.core.windows.net\". You can append a SAS\n   *                     if using AnonymousCredential, such as \"https://myaccount.blob.core.windows.net?sasString\".\n   * @param credential -  Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   *\n   * Example using DefaultAzureCredential from `@azure/identity`:\n   *\n   * ```js\n   * const account = \"<storage account name>\";\n   *\n   * const defaultAzureCredential = new DefaultAzureCredential();\n   *\n   * const blobServiceClient = new BlobServiceClient(\n   *   `https://${account}.blob.core.windows.net`,\n   *   defaultAzureCredential\n   * );\n   * ```\n   *\n   * Example using an account name/key:\n   *\n   * ```js\n   * const account = \"<storage account name>\"\n   * const sharedKeyCredential = new StorageSharedKeyCredential(account, \"<account key>\");\n   *\n   * const blobServiceClient = new BlobServiceClient(\n   *   `https://${account}.blob.core.windows.net`,\n   *   sharedKeyCredential\n   * );\n   * ```\n   */\n  constructor(\n    url: string,\n    credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: StoragePipelineOptions\n  );\n  /**\n   * Creates an instance of BlobServiceClient.\n   *\n   * @param url - A Client string pointing to Azure Storage blob service, such as\n   *                     \"https://myaccount.blob.core.windows.net\". You can append a SAS\n   *                     if using AnonymousCredential, such as \"https://myaccount.blob.core.windows.net?sasString\".\n   * @param pipeline - Call newPipeline() to create a default\n   *                            pipeline, or provide a customized pipeline.\n   */\n  constructor(url: string, pipeline: PipelineLike);\n  constructor(\n    url: string,\n    credentialOrPipeline?:\n      | StorageSharedKeyCredential\n      | AnonymousCredential\n      | TokenCredential\n      | PipelineLike,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: StoragePipelineOptions\n  ) {\n    let pipeline: PipelineLike;\n    if (isPipelineLike(credentialOrPipeline)) {\n      pipeline = credentialOrPipeline;\n    } else if (\n      (isNode && credentialOrPipeline instanceof StorageSharedKeyCredential) ||\n      credentialOrPipeline instanceof AnonymousCredential ||\n      isTokenCredential(credentialOrPipeline)\n    ) {\n      pipeline = newPipeline(credentialOrPipeline, options);\n    } else {\n      // The second parameter is undefined. Use anonymous credential\n      pipeline = newPipeline(new AnonymousCredential(), options);\n    }\n    super(url, pipeline);\n    this.serviceContext = new Service(this.storageClientContext);\n  }\n\n  /**\n   * Creates a {@link ContainerClient} object\n   *\n   * @param containerName - A container name\n   * @returns A new ContainerClient object for the given container name.\n   *\n   * Example usage:\n   *\n   * ```js\n   * const containerClient = blobServiceClient.getContainerClient(\"<container name>\");\n   * ```\n   */\n  public getContainerClient(containerName: string): ContainerClient {\n    return new ContainerClient(\n      appendToURLPath(this.url, encodeURIComponent(containerName)),\n      this.pipeline\n    );\n  }\n\n  /**\n   * Create a Blob container.\n   *\n   * @param containerName - Name of the container to create.\n   * @param options - Options to configure Container Create operation.\n   * @returns Container creation response and the corresponding container client.\n   */\n  public async createContainer(\n    containerName: string,\n    options: ContainerCreateOptions = {}\n  ): Promise<{\n    containerClient: ContainerClient;\n    containerCreateResponse: ContainerCreateResponse;\n  }> {\n    const { span, updatedOptions } = createSpan(\"BlobServiceClient-createContainer\", options);\n    try {\n      const containerClient = this.getContainerClient(containerName);\n      const containerCreateResponse = await containerClient.create(updatedOptions);\n      return {\n        containerClient,\n        containerCreateResponse,\n      };\n    } catch (e: any) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Deletes a Blob container.\n   *\n   * @param containerName - Name of the container to delete.\n   * @param options - Options to configure Container Delete operation.\n   * @returns Container deletion response.\n   */\n  public async deleteContainer(\n    containerName: string,\n    options: ContainerDeleteMethodOptions = {}\n  ): Promise<ContainerDeleteResponse> {\n    const { span, updatedOptions } = createSpan(\"BlobServiceClient-deleteContainer\", options);\n    try {\n      const containerClient = this.getContainerClient(containerName);\n      return await containerClient.delete(updatedOptions);\n    } catch (e: any) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Restore a previously deleted Blob container.\n   * This API is only functional if Container Soft Delete is enabled for the storage account associated with the container.\n   *\n   * @param deletedContainerName - Name of the previously deleted container.\n   * @param deletedContainerVersion - Version of the previously deleted container, used to uniquely identify the deleted container.\n   * @param options - Options to configure Container Restore operation.\n   * @returns Container deletion response.\n   */\n  public async undeleteContainer(\n    deletedContainerName: string,\n    deletedContainerVersion: string,\n    options: ServiceUndeleteContainerOptions = {}\n  ): Promise<{\n    containerClient: ContainerClient;\n    containerUndeleteResponse: ContainerUndeleteResponse;\n  }> {\n    const { span, updatedOptions } = createSpan(\"BlobServiceClient-undeleteContainer\", options);\n    try {\n      const containerClient = this.getContainerClient(\n        options.destinationContainerName || deletedContainerName\n      );\n      // Hack to access a protected member.\n      const containerContext = new Container(containerClient[\"storageClientContext\"]);\n      const containerUndeleteResponse = await containerContext.restore({\n        deletedContainerName,\n        deletedContainerVersion,\n        ...updatedOptions,\n      });\n      return { containerClient, containerUndeleteResponse };\n    } catch (e: any) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Rename an existing Blob Container.\n   *\n   * @param sourceContainerName - The name of the source container.\n   * @param destinationContainerName - The new name of the container.\n   * @param options - Options to configure Container Rename operation.\n   */\n  /* eslint-disable-next-line @typescript-eslint/ban-ts-comment */\n  // @ts-ignore Need to hide this interface for now. Make it public and turn on the live tests for it when the service is ready.\n  private async renameContainer(\n    sourceContainerName: string,\n    destinationContainerName: string,\n    options: ServiceRenameContainerOptions = {}\n  ): Promise<{\n    containerClient: ContainerClient;\n    containerRenameResponse: ContainerRenameResponse;\n  }> {\n    const { span, updatedOptions } = createSpan(\"BlobServiceClient-renameContainer\", options);\n    try {\n      const containerClient = this.getContainerClient(destinationContainerName);\n      // Hack to access a protected member.\n      const containerContext = new Container(containerClient[\"storageClientContext\"]);\n      const containerRenameResponse = await containerContext.rename(sourceContainerName, {\n        ...updatedOptions,\n        sourceLeaseId: options.sourceCondition?.leaseId,\n      });\n      return { containerClient, containerRenameResponse };\n    } catch (e: any) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Gets the properties of a storage accountâ€™s Blob service, including properties\n   * for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-service-properties\n   *\n   * @param options - Options to the Service Get Properties operation.\n   * @returns Response data for the Service Get Properties operation.\n   */\n  public async getProperties(\n    options: ServiceGetPropertiesOptions = {}\n  ): Promise<ServiceGetPropertiesResponse> {\n    const { span, updatedOptions } = createSpan(\"BlobServiceClient-getProperties\", options);\n    try {\n      return await this.serviceContext.getProperties({\n        abortSignal: options.abortSignal,\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n    } catch (e: any) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Sets properties for a storage accountâ€™s Blob service endpoint, including properties\n   * for Storage Analytics, CORS (Cross-Origin Resource Sharing) rules and soft delete settings.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-service-properties\n   *\n   * @param properties -\n   * @param options - Options to the Service Set Properties operation.\n   * @returns Response data for the Service Set Properties operation.\n   */\n  public async setProperties(\n    properties: BlobServiceProperties,\n    options: ServiceSetPropertiesOptions = {}\n  ): Promise<ServiceSetPropertiesResponse> {\n    const { span, updatedOptions } = createSpan(\"BlobServiceClient-setProperties\", options);\n    try {\n      return await this.serviceContext.setProperties(properties, {\n        abortSignal: options.abortSignal,\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n    } catch (e: any) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Retrieves statistics related to replication for the Blob service. It is only\n   * available on the secondary location endpoint when read-access geo-redundant\n   * replication is enabled for the storage account.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-service-stats\n   *\n   * @param options - Options to the Service Get Statistics operation.\n   * @returns Response data for the Service Get Statistics operation.\n   */\n  public async getStatistics(\n    options: ServiceGetStatisticsOptions = {}\n  ): Promise<ServiceGetStatisticsResponse> {\n    const { span, updatedOptions } = createSpan(\"BlobServiceClient-getStatistics\", options);\n    try {\n      return await this.serviceContext.getStatistics({\n        abortSignal: options.abortSignal,\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n    } catch (e: any) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * The Get Account Information operation returns the sku name and account kind\n   * for the specified account.\n   * The Get Account Information operation is available on service versions beginning\n   * with version 2018-03-28.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-account-information\n   *\n   * @param options - Options to the Service Get Account Info operation.\n   * @returns Response data for the Service Get Account Info operation.\n   */\n  public async getAccountInfo(\n    options: ServiceGetAccountInfoOptions = {}\n  ): Promise<ServiceGetAccountInfoResponse> {\n    const { span, updatedOptions } = createSpan(\"BlobServiceClient-getAccountInfo\", options);\n    try {\n      return await this.serviceContext.getAccountInfo({\n        abortSignal: options.abortSignal,\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n    } catch (e: any) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Returns a list of the containers under the specified account.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/list-containers2\n   *\n   * @param marker - A string value that identifies the portion of\n   *                        the list of containers to be returned with the next listing operation. The\n   *                        operation returns the continuationToken value within the response body if the\n   *                        listing operation did not return all containers remaining to be listed\n   *                        with the current page. The continuationToken value can be used as the value for\n   *                        the marker parameter in a subsequent call to request the next page of list\n   *                        items. The marker value is opaque to the client.\n   * @param options - Options to the Service List Container Segment operation.\n   * @returns Response data for the Service List Container Segment operation.\n   */\n  private async listContainersSegment(\n    marker?: string,\n    options: ServiceListContainersSegmentOptions = {}\n  ): Promise<ServiceListContainersSegmentResponse> {\n    const { span, updatedOptions } = createSpan(\"BlobServiceClient-listContainersSegment\", options);\n\n    try {\n      return await this.serviceContext.listContainersSegment({\n        abortSignal: options.abortSignal,\n        marker,\n        ...options,\n        include: typeof options.include === \"string\" ? [options.include] : options.include,\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n    } catch (e: any) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * The Filter Blobs operation enables callers to list blobs across all containers whose tags\n   * match a given search expression. Filter blobs searches across all containers within a\n   * storage account but can be scoped within the expression to a single container.\n   *\n   * @param tagFilterSqlExpression - The where parameter enables the caller to query blobs whose tags match a given expression.\n   *                                        The given expression must evaluate to true for a blob to be returned in the results.\n   *                                        The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;\n   *                                        however, only a subset of the OData filter syntax is supported in the Blob service.\n   * @param marker - A string value that identifies the portion of\n   *                          the list of blobs to be returned with the next listing operation. The\n   *                          operation returns the continuationToken value within the response body if the\n   *                          listing operation did not return all blobs remaining to be listed\n   *                          with the current page. The continuationToken value can be used as the value for\n   *                          the marker parameter in a subsequent call to request the next page of list\n   *                          items. The marker value is opaque to the client.\n   * @param options - Options to find blobs by tags.\n   */\n  private async findBlobsByTagsSegment(\n    tagFilterSqlExpression: string,\n    marker?: string,\n    options: ServiceFindBlobsByTagsSegmentOptions = {}\n  ): Promise<ServiceFindBlobsByTagsSegmentResponse> {\n    const { span, updatedOptions } = createSpan(\n      \"BlobServiceClient-findBlobsByTagsSegment\",\n      options\n    );\n\n    try {\n      const response = await this.serviceContext.filterBlobs({\n        abortSignal: options.abortSignal,\n        where: tagFilterSqlExpression,\n        marker,\n        maxPageSize: options.maxPageSize,\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n\n      const wrappedResponse: ServiceFindBlobsByTagsSegmentResponse = {\n        ...response,\n        _response: response._response, // _response is made non-enumerable\n        blobs: response.blobs.map((blob) => {\n          let tagValue = \"\";\n          if (blob.tags?.blobTagSet.length === 1) {\n            tagValue = blob.tags.blobTagSet[0].value;\n          }\n          return { ...blob, tags: toTags(blob.tags), tagValue };\n        }),\n      };\n      return wrappedResponse;\n    } catch (e: any) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Returns an AsyncIterableIterator for ServiceFindBlobsByTagsSegmentResponse.\n   *\n   * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.\n   *                                         The given expression must evaluate to true for a blob to be returned in the results.\n   *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;\n   *                                         however, only a subset of the OData filter syntax is supported in the Blob service.\n   * @param marker - A string value that identifies the portion of\n   *                          the list of blobs to be returned with the next listing operation. The\n   *                          operation returns the continuationToken value within the response body if the\n   *                          listing operation did not return all blobs remaining to be listed\n   *                          with the current page. The continuationToken value can be used as the value for\n   *                          the marker parameter in a subsequent call to request the next page of list\n   *                          items. The marker value is opaque to the client.\n   * @param options - Options to find blobs by tags.\n   */\n  private async *findBlobsByTagsSegments(\n    tagFilterSqlExpression: string,\n    marker?: string,\n    options: ServiceFindBlobsByTagsSegmentOptions = {}\n  ): AsyncIterableIterator<ServiceFindBlobsByTagsSegmentResponse> {\n    let response;\n    if (!!marker || marker === undefined) {\n      do {\n        response = await this.findBlobsByTagsSegment(tagFilterSqlExpression, marker, options);\n        response.blobs = response.blobs || [];\n        marker = response.continuationToken;\n        yield response;\n      } while (marker);\n    }\n  }\n\n  /**\n   * Returns an AsyncIterableIterator for blobs.\n   *\n   * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.\n   *                                         The given expression must evaluate to true for a blob to be returned in the results.\n   *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;\n   *                                         however, only a subset of the OData filter syntax is supported in the Blob service.\n   * @param options - Options to findBlobsByTagsItems.\n   */\n  private async *findBlobsByTagsItems(\n    tagFilterSqlExpression: string,\n    options: ServiceFindBlobsByTagsSegmentOptions = {}\n  ): AsyncIterableIterator<FilterBlobItem> {\n    let marker: string | undefined;\n    for await (const segment of this.findBlobsByTagsSegments(\n      tagFilterSqlExpression,\n      marker,\n      options\n    )) {\n      yield* segment.blobs;\n    }\n  }\n\n  /**\n   * Returns an async iterable iterator to find all blobs with specified tag\n   * under the specified account.\n   *\n   * .byPage() returns an async iterable iterator to list the blobs in pages.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-service-properties\n   *\n   * Example using `for await` syntax:\n   *\n   * ```js\n   * let i = 1;\n   * for await (const blob of blobServiceClient.findBlobsByTags(\"tagkey='tagvalue'\")) {\n   *   console.log(`Blob ${i++}: ${container.name}`);\n   * }\n   * ```\n   *\n   * Example using `iter.next()`:\n   *\n   * ```js\n   * let i = 1;\n   * const iter = blobServiceClient.findBlobsByTags(\"tagkey='tagvalue'\");\n   * let blobItem = await iter.next();\n   * while (!blobItem.done) {\n   *   console.log(`Blob ${i++}: ${blobItem.value.name}`);\n   *   blobItem = await iter.next();\n   * }\n   * ```\n   *\n   * Example using `byPage()`:\n   *\n   * ```js\n   * // passing optional maxPageSize in the page settings\n   * let i = 1;\n   * for await (const response of blobServiceClient.findBlobsByTags(\"tagkey='tagvalue'\").byPage({ maxPageSize: 20 })) {\n   *   if (response.blobs) {\n   *     for (const blob of response.blobs) {\n   *       console.log(`Blob ${i++}: ${blob.name}`);\n   *     }\n   *   }\n   * }\n   * ```\n   *\n   * Example using paging with a marker:\n   *\n   * ```js\n   * let i = 1;\n   * let iterator = blobServiceClient.findBlobsByTags(\"tagkey='tagvalue'\").byPage({ maxPageSize: 2 });\n   * let response = (await iterator.next()).value;\n   *\n   * // Prints 2 blob names\n   * if (response.blobs) {\n   *   for (const blob of response.blobs) {\n   *     console.log(`Blob ${i++}: ${blob.name}`);\n   *   }\n   * }\n   *\n   * // Gets next marker\n   * let marker = response.continuationToken;\n   * // Passing next marker as continuationToken\n   * iterator = blobServiceClient\n   *   .findBlobsByTags(\"tagkey='tagvalue'\")\n   *   .byPage({ continuationToken: marker, maxPageSize: 10 });\n   * response = (await iterator.next()).value;\n   *\n   * // Prints blob names\n   * if (response.blobs) {\n   *   for (const blob of response.blobs) {\n   *      console.log(`Blob ${i++}: ${blob.name}`);\n   *   }\n   * }\n   * ```\n   *\n   * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.\n   *                                         The given expression must evaluate to true for a blob to be returned in the results.\n   *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;\n   *                                         however, only a subset of the OData filter syntax is supported in the Blob service.\n   * @param options - Options to find blobs by tags.\n   */\n  public findBlobsByTags(\n    tagFilterSqlExpression: string,\n    options: ServiceFindBlobByTagsOptions = {}\n  ): PagedAsyncIterableIterator<FilterBlobItem, ServiceFindBlobsByTagsSegmentResponse> {\n    // AsyncIterableIterator to iterate over blobs\n    const listSegmentOptions: ServiceFindBlobsByTagsSegmentOptions = {\n      ...options,\n    };\n\n    const iter = this.findBlobsByTagsItems(tagFilterSqlExpression, listSegmentOptions);\n    return {\n      /**\n       * The next method, part of the iteration protocol\n       */\n      next() {\n        return iter.next();\n      },\n      /**\n       * The connection to the async iterator, part of the iteration protocol\n       */\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      /**\n       * Return an AsyncIterableIterator that works a page at a time\n       */\n      byPage: (settings: PageSettings = {}) => {\n        return this.findBlobsByTagsSegments(tagFilterSqlExpression, settings.continuationToken, {\n          maxPageSize: settings.maxPageSize,\n          ...listSegmentOptions,\n        });\n      },\n    };\n  }\n\n  /**\n   * Returns an AsyncIterableIterator for ServiceListContainersSegmentResponses\n   *\n   * @param marker - A string value that identifies the portion of\n   *                        the list of containers to be returned with the next listing operation. The\n   *                        operation returns the continuationToken value within the response body if the\n   *                        listing operation did not return all containers remaining to be listed\n   *                        with the current page. The continuationToken value can be used as the value for\n   *                        the marker parameter in a subsequent call to request the next page of list\n   *                        items. The marker value is opaque to the client.\n   * @param options - Options to list containers operation.\n   */\n  private async *listSegments(\n    marker?: string,\n    options: ServiceListContainersSegmentOptions = {}\n  ): AsyncIterableIterator<ServiceListContainersSegmentResponse> {\n    let listContainersSegmentResponse;\n    if (!!marker || marker === undefined) {\n      do {\n        listContainersSegmentResponse = await this.listContainersSegment(marker, options);\n        listContainersSegmentResponse.containerItems =\n          listContainersSegmentResponse.containerItems || [];\n        marker = listContainersSegmentResponse.continuationToken;\n        yield await listContainersSegmentResponse;\n      } while (marker);\n    }\n  }\n\n  /**\n   * Returns an AsyncIterableIterator for Container Items\n   *\n   * @param options - Options to list containers operation.\n   */\n  private async *listItems(\n    options: ServiceListContainersSegmentOptions = {}\n  ): AsyncIterableIterator<ContainerItem> {\n    let marker: string | undefined;\n    for await (const segment of this.listSegments(marker, options)) {\n      yield* segment.containerItems;\n    }\n  }\n\n  /**\n   * Returns an async iterable iterator to list all the containers\n   * under the specified account.\n   *\n   * .byPage() returns an async iterable iterator to list the containers in pages.\n   *\n   * Example using `for await` syntax:\n   *\n   * ```js\n   * let i = 1;\n   * for await (const container of blobServiceClient.listContainers()) {\n   *   console.log(`Container ${i++}: ${container.name}`);\n   * }\n   * ```\n   *\n   * Example using `iter.next()`:\n   *\n   * ```js\n   * let i = 1;\n   * const iter = blobServiceClient.listContainers();\n   * let containerItem = await iter.next();\n   * while (!containerItem.done) {\n   *   console.log(`Container ${i++}: ${containerItem.value.name}`);\n   *   containerItem = await iter.next();\n   * }\n   * ```\n   *\n   * Example using `byPage()`:\n   *\n   * ```js\n   * // passing optional maxPageSize in the page settings\n   * let i = 1;\n   * for await (const response of blobServiceClient.listContainers().byPage({ maxPageSize: 20 })) {\n   *   if (response.containerItems) {\n   *     for (const container of response.containerItems) {\n   *       console.log(`Container ${i++}: ${container.name}`);\n   *     }\n   *   }\n   * }\n   * ```\n   *\n   * Example using paging with a marker:\n   *\n   * ```js\n   * let i = 1;\n   * let iterator = blobServiceClient.listContainers().byPage({ maxPageSize: 2 });\n   * let response = (await iterator.next()).value;\n   *\n   * // Prints 2 container names\n   * if (response.containerItems) {\n   *   for (const container of response.containerItems) {\n   *     console.log(`Container ${i++}: ${container.name}`);\n   *   }\n   * }\n   *\n   * // Gets next marker\n   * let marker = response.continuationToken;\n   * // Passing next marker as continuationToken\n   * iterator = blobServiceClient\n   *   .listContainers()\n   *   .byPage({ continuationToken: marker, maxPageSize: 10 });\n   * response = (await iterator.next()).value;\n   *\n   * // Prints 10 container names\n   * if (response.containerItems) {\n   *   for (const container of response.containerItems) {\n   *      console.log(`Container ${i++}: ${container.name}`);\n   *   }\n   * }\n   * ```\n   *\n   * @param options - Options to list containers.\n   * @returns An asyncIterableIterator that supports paging.\n   */\n  public listContainers(\n    options: ServiceListContainersOptions = {}\n  ): PagedAsyncIterableIterator<ContainerItem, ServiceListContainersSegmentResponse> {\n    if (options.prefix === \"\") {\n      options.prefix = undefined;\n    }\n\n    const include: ListContainersIncludeType[] = [];\n    if (options.includeDeleted) {\n      include.push(\"deleted\");\n    }\n    if (options.includeMetadata) {\n      include.push(\"metadata\");\n    }\n    if (options.includeSystem) {\n      include.push(\"system\");\n    }\n\n    // AsyncIterableIterator to iterate over containers\n    const listSegmentOptions: ServiceListContainersSegmentOptions = {\n      ...options,\n      ...(include.length > 0 ? { include } : {}),\n    };\n\n    const iter = this.listItems(listSegmentOptions);\n    return {\n      /**\n       * The next method, part of the iteration protocol\n       */\n      next() {\n        return iter.next();\n      },\n      /**\n       * The connection to the async iterator, part of the iteration protocol\n       */\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      /**\n       * Return an AsyncIterableIterator that works a page at a time\n       */\n      byPage: (settings: PageSettings = {}) => {\n        return this.listSegments(settings.continuationToken, {\n          maxPageSize: settings.maxPageSize,\n          ...listSegmentOptions,\n        });\n      },\n    };\n  }\n\n  /**\n   * ONLY AVAILABLE WHEN USING BEARER TOKEN AUTHENTICATION (TokenCredential).\n   *\n   * Retrieves a user delegation key for the Blob service. This is only a valid operation when using\n   * bearer token authentication.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-user-delegation-key\n   *\n   * @param startsOn -      The start time for the user delegation SAS. Must be within 7 days of the current time\n   * @param expiresOn -     The end time for the user delegation SAS. Must be within 7 days of the current time\n   */\n  public async getUserDelegationKey(\n    startsOn: Date,\n    expiresOn: Date,\n    options: ServiceGetUserDelegationKeyOptions = {}\n  ): Promise<ServiceGetUserDelegationKeyResponse> {\n    const { span, updatedOptions } = createSpan(\"BlobServiceClient-getUserDelegationKey\", options);\n    try {\n      const response = await this.serviceContext.getUserDelegationKey(\n        {\n          startsOn: truncatedISO8061Date(startsOn, false),\n          expiresOn: truncatedISO8061Date(expiresOn, false),\n        },\n        {\n          abortSignal: options.abortSignal,\n          ...convertTracingToRequestOptionsBase(updatedOptions),\n        }\n      );\n\n      const userDelegationKey = {\n        signedObjectId: response.signedObjectId,\n        signedTenantId: response.signedTenantId,\n        signedStartsOn: new Date(response.signedStartsOn),\n        signedExpiresOn: new Date(response.signedExpiresOn),\n        signedService: response.signedService,\n        signedVersion: response.signedVersion,\n        value: response.value,\n      };\n\n      const res: ServiceGetUserDelegationKeyResponse = {\n        _response: response._response,\n        requestId: response.requestId,\n        clientRequestId: response.clientRequestId,\n        version: response.version,\n        date: response.date,\n        errorCode: response.errorCode,\n        ...userDelegationKey,\n      };\n\n      return res;\n    } catch (e: any) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a BlobBatchClient object to conduct batch operations.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch\n   *\n   * @returns A new BlobBatchClient object for this service.\n   */\n  public getBlobBatchClient(): BlobBatchClient {\n    return new BlobBatchClient(this.url, this.pipeline);\n  }\n\n  /**\n   * Only available for BlobServiceClient constructed with a shared key credential.\n   *\n   * Generates a Blob account Shared Access Signature (SAS) URI based on the client properties\n   * and parameters passed in. The SAS is signed by the shared key credential of the client.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-account-sas\n   *\n   * @param expiresOn - Optional. The time at which the shared access signature becomes invalid. Default to an hour later if not provided.\n   * @param permissions - Specifies the list of permissions to be associated with the SAS.\n   * @param resourceTypes - Specifies the resource types associated with the shared access signature.\n   * @param options - Optional parameters.\n   * @returns An account SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.\n   */\n  public generateAccountSasUrl(\n    expiresOn?: Date,\n    permissions: AccountSASPermissions = AccountSASPermissions.parse(\"r\"),\n    resourceTypes: string = \"sco\",\n    options: ServiceGenerateAccountSasUrlOptions = {}\n  ): string {\n    if (!(this.credential instanceof StorageSharedKeyCredential)) {\n      throw RangeError(\n        \"Can only generate the account SAS when the client is initialized with a shared key credential\"\n      );\n    }\n\n    if (expiresOn === undefined) {\n      const now = new Date();\n      expiresOn = new Date(now.getTime() + 3600 * 1000);\n    }\n\n    const sas = generateAccountSASQueryParameters(\n      {\n        permissions,\n        expiresOn,\n        resourceTypes,\n        services: AccountSASServices.parse(\"b\").toString(),\n        ...options,\n      },\n      this.credential\n    ).toString();\n\n    return appendToURLQuery(this.url, sas);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}